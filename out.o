# 1 "src/main.cpp"
# 1 "/home/leroy/Documents/PlatformIO/Projects/test//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "src/main.cpp"

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 1



# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdbool.h" 1 3 4
# 5 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h" 1 3 4
# 9 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h" 3 4
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 1 3 4
# 12 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 3 4
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 1 3 4







# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/features.h" 1 3 4
# 25 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/features.h" 3 4

# 25 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/features.h" 3 4
extern "C" {


# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/_newlib_version.h" 1 3 4
# 29 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/features.h" 2 3 4
# 515 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/features.h" 3 4
}
# 9 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 2 3 4
# 37 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 247 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_default_types.h" 3 4
}
# 13 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_intsup.h" 1 3 4
# 35 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
# 187 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
# 14 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_stdint.h" 1 3 4
# 15 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_stdint.h" 3 4
extern "C" {




typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;




}
# 15 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 2 3 4


extern "C" {



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 463 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdint.h" 3 4
}
# 10 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdint.h" 2 3 4
# 6 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 1 3
# 36 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 1 3
# 39 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 3
       
# 40 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 3

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/c++config.h" 1 3
# 229 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 251 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 533 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/c++config.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/os_defines.h" 1 3
# 534 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/c++config.h" 2 3


# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/cpu_defines.h" 1 3
# 537 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/arm-none-eabi/thumb/v7e-m/fpv4-sp/hard/bits/c++config.h" 2 3
# 42 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 2 3
# 75 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 1 3
# 10 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 11 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/_ansi.h" 1 3
# 15 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/_ansi.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/newlib.h" 1 3
# 16 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/_ansi.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/config.h" 1 3



# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 5 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/config.h" 2 3
# 17 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/_ansi.h" 2 3
# 12 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 2 3




# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 216 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 17 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 2 3

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 1 3
# 9 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
extern "C" {



# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/_ansi.h" 1 3
# 14 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 149 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 426 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 15 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 1 3
# 24 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_types.h" 1 3
# 25 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/lock.h" 1 3
# 30 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/lock.h" 3
extern "C" {


struct __lock;
typedef struct __lock * _LOCK_T;






extern void __retarget_lock_init(_LOCK_T *lock);

extern void __retarget_lock_init_recursive(_LOCK_T *lock);

extern void __retarget_lock_close(_LOCK_T lock);

extern void __retarget_lock_close_recursive(_LOCK_T lock);

extern void __retarget_lock_acquire(_LOCK_T lock);

extern void __retarget_lock_acquire_recursive(_LOCK_T lock);

extern int __retarget_lock_try_acquire(_LOCK_T lock);

extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);


extern void __retarget_lock_release(_LOCK_T lock);

extern void __retarget_lock_release_recursive(_LOCK_T lock);



}
# 26 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 129 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 3
typedef unsigned int __size_t;
# 145 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 3
typedef signed int _ssize_t;
# 156 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;


# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 357 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 160 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef __int_least64_t __time_t;


typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;




typedef char * __va_list;
# 16 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 93 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 117 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 181 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (* _read) (struct _reent *, void *, char *, int)
                                          ;
  int (* _write) (struct _reent *, void *, const char *, int)

                                   ;
  _fpos_t (* _seek) (struct _reent *, void *, _fpos_t, int);
  int (* _close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 569 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (* __cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};
# 775 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 801 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/reent.h" 3
}
# 19 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/cdefs.h" 1 3
# 45 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/cdefs.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 46 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/cdefs.h" 2 3
# 20 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/stdlib.h" 1 3
# 21 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 2 3

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/alloca.h" 1 3
# 23 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 2 3
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 3
extern "C" {

typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar)



                                ;
void * calloc (size_t __nmemb, size_t __size) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) __attribute__ ((__nothrow__));
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg;
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char * mkdtemp (char *);






int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void * __base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void * realloc (void * __r, size_t __size) __attribute__ ((__nothrow__));

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)))
     __attribute__((__alloc_size__(3)));
void * reallocf (void * __r, size_t __size);


char * realpath (const char * path, char * resolved_path);


int rpmatch (const char *response);




void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);

float strtof (const char * __n, char ** __end_PTR);







long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
# 188 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 3
int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void * __arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 221 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);

unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int __attribute__((__nonnull__(1))) posix_memalign (void **, size_t, size_t);


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) __attribute__ ((__nothrow__));
void * _calloc_r (struct _reent *, size_t, size_t) __attribute__ ((__nothrow__));
void _free_r (struct _reent *, void *) __attribute__ ((__nothrow__));
void * _realloc_r (struct _reent *, void *, size_t) __attribute__ ((__nothrow__));
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 308 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 3
void qsort_r (void * __base, size_t __nmemb, size_t __size, void * __thunk, int (*_compar)(void *, const void *, const void *))
             __asm__ ("" "__bsd_qsort_r");
# 318 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *, char **);

extern long double strtold (const char *, char **);







void * aligned_alloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__alloc_align__(1)))
     __attribute__((__alloc_size__(2)));
int at_quick_exit(void (*)(void));
[[noreturn]] void
 quick_exit(int);


}
# 76 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 2 3

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/std_abs.h" 1 3
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/std_abs.h" 3
       
# 34 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/std_abs.h" 3
# 46 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 106 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/std_abs.h" 3

}
}
# 78 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 2 3
# 118 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 189 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 221 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;
# 51 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 7 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 1 3
# 17 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 18 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 2 3


# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/xlocale.h" 1 3
# 9 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/xlocale.h" 3
struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 2 3



# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/strings.h" 1 3
# 44 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/strings.h" 3
extern "C" {

int bcmp(const void *, const void *, size_t) __attribute__((__pure__));
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));


int ffsl(long) __attribute__((__const__));
int ffsll(long long) __attribute__((__const__));
int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__));
char *rindex(const char *, int) __attribute__((__pure__));

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);

}
# 25 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 2 3


extern "C" {

void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void * , const void * , size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *, const char *);

size_t strxfrm (char *, const char *, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *, const char *, size_t, locale_t);


char *strtok_r (char *, const char *, char **);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void * , const void * , int, size_t);
# 76 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 3
char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);






char *strdup (const char *);

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t);

char *_strndup_r (struct _reent *, const char *, size_t);
# 100 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 3
int strerror_r (int, char *, size_t)

             __asm__ ("" "__xpg_strerror_r")

  ;







char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 175 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/string.h" 1 3
# 176 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/string.h" 2 3

}
# 8 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/math.h" 1 3
# 36 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/math.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 1 3
# 39 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3
       
# 40 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3


# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/cpp_type_traits.h" 1 3
# 35 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/cpp_type_traits.h" 3
       
# 36 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/cpp_type_traits.h" 3
# 67 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 278 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/ext/type_traits.h" 1 3
# 32 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/ext/type_traits.h" 3
       
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 2 3

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 1 3






# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 8 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 2 3


extern "C" {
# 86 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);
# 150 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
    typedef float float_t;
    typedef double double_t;
# 194 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 290 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 422 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);
# 565 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
extern int *__signgam (void);
# 576 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
struct __exception



{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};


extern int matherr (struct __exception *e);
# 642 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;
# 662 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/math.h" 3
}
# 46 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 2 3
# 77 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 536 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 957 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3

}
# 1075 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }



}
# 1917 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cmath" 3
}
# 37 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 9 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2


# 10 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h"
typedef bool boolean;
typedef uint8_t byte;
typedef uint16_t word;




# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/avr/pgmspace.h" 1
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/avr/pgmspace.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/inttypes.h" 1 3
# 22 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/inttypes.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 23 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/inttypes.h" 2 3
# 312 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/inttypes.h" 3

# 312 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/inttypes.h" 3
typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;

struct _reent;


extern "C" {


extern intmax_t imaxabs(intmax_t j);
extern imaxdiv_t imaxdiv(intmax_t numer, intmax_t denomer);
extern intmax_t strtoimax(const char *, char **, int);
extern intmax_t _strtoimax_r(struct _reent *, const char *, char **, int);
extern uintmax_t strtoumax(const char *, char **, int);
extern uintmax_t _strtoumax_r(struct _reent *, const char *, char **, int);
extern intmax_t wcstoimax(const wchar_t *, wchar_t **, int);
extern intmax_t _wcstoimax_r(struct _reent *, const wchar_t *, wchar_t **, int);
extern uintmax_t wcstoumax(const wchar_t *, wchar_t **, int);
extern uintmax_t _wcstoumax_r(struct _reent *, const wchar_t *, wchar_t **, int);


extern intmax_t strtoimax_l(const char *, char **_restrict, int, locale_t);
extern uintmax_t strtoumax_l(const char *, char **_restrict, int, locale_t);
extern intmax_t wcstoimax_l(const wchar_t *, wchar_t **_restrict, int, locale_t);
extern uintmax_t wcstoumax_l(const wchar_t *, wchar_t **_restrict, int, locale_t);



}
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/avr/pgmspace.h" 2








# 38 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/avr/pgmspace.h"
typedef void prog_void;
typedef char prog_char;
typedef unsigned char prog_uchar;
typedef int8_t prog_int8_t;
typedef uint8_t prog_uint8_t;
typedef int16_t prog_int16_t;
typedef uint16_t prog_uint16_t;
typedef int32_t prog_int32_t;
typedef uint32_t prog_uint32_t;
typedef int32_t prog_int64_t;
typedef uint32_t prog_uint64_t;

typedef const void* int_farptr_t;
typedef const void* uint_farptr_t;
# 18 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/avr/interrupt.h" 1
# 19 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/itoa.h" 1
# 19 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/itoa.h"
       


extern "C"{




extern char* itoa( int value, char *string, int radix ) ;
extern char* ltoa( long value, char *string, int radix ) ;
extern char* utoa( unsigned int value, char *string, int radix ) ;
extern char* ultoa( unsigned long value, char *string, int radix ) ;


}
# 21 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2


extern "C"{


# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_constants.h" 1
# 23 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_constants.h"
extern "C"{
# 56 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_constants.h"
enum BitOrder {
 LSBFIRST = 0,
 MSBFIRST = 1
};
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_constants.h"
typedef uint32_t err_t;

enum
{
  ERROR_NONE = 0
};


}
# 27 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2





void yield( void ) ;


void setup( void ) ;
void loop( void ) ;

void suspendLoop(void);
void resumeLoop(void);

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WVariant.h" 1
# 19 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WVariant.h"
       



# 1 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h" 1
# 170 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h"
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h" 1
# 64 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
extern "C" {
# 78 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef enum {

  Reset_IRQn = -15,
  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,

  BusFault_IRQn = -11,

  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  POWER_CLOCK_IRQn = 0,
  RADIO_IRQn = 1,
  UARTE0_UART0_IRQn = 2,
  SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn= 3,
  SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn= 4,
  NFCT_IRQn = 5,
  GPIOTE_IRQn = 6,
  SAADC_IRQn = 7,
  TIMER0_IRQn = 8,
  TIMER1_IRQn = 9,
  TIMER2_IRQn = 10,
  RTC0_IRQn = 11,
  TEMP_IRQn = 12,
  RNG_IRQn = 13,
  ECB_IRQn = 14,
  CCM_AAR_IRQn = 15,
  WDT_IRQn = 16,
  RTC1_IRQn = 17,
  QDEC_IRQn = 18,
  COMP_LPCOMP_IRQn = 19,
  SWI0_EGU0_IRQn = 20,
  SWI1_EGU1_IRQn = 21,
  SWI2_EGU2_IRQn = 22,
  SWI3_EGU3_IRQn = 23,
  SWI4_EGU4_IRQn = 24,
  SWI5_EGU5_IRQn = 25,
  TIMER3_IRQn = 26,
  TIMER4_IRQn = 27,
  PWM0_IRQn = 28,
  PDM_IRQn = 29,
  MWU_IRQn = 32,
  PWM1_IRQn = 33,
  PWM2_IRQn = 34,
  SPIM2_SPIS2_SPI2_IRQn = 35,
  RTC2_IRQn = 36,
  I2S_IRQn = 37,
  FPU_IRQn = 38,
  USBD_IRQn = 39,
  UARTE1_IRQn = 40,
  QSPI_IRQn = 41,
  CRYPTOCELL_IRQn = 42,
  PWM3_IRQn = 45,
  SPIM3_IRQn = 47
} IRQn_Type;
# 156 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
# 1 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h" 1
# 37 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
 extern "C" {
# 63 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
# 1 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_version.h" 1
# 64 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h" 2
# 162 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
# 1 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_compiler.h" 1
# 54 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_compiler.h"
# 1 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h" 1
# 29 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 71 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 131 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline __attribute__((__noreturn__)) void __cmsis_start(void)
{
  extern void _start(void) __attribute__((__noreturn__));

  typedef struct {
    uint32_t const* src;
    uint32_t* dest;
    uint32_t wlen;
  } __copy_table_t;

  typedef struct {
    uint32_t* dest;
    uint32_t wlen;
  } __zero_table_t;

  extern const __copy_table_t __copy_table_start__;
  extern const __copy_table_t __copy_table_end__;
  extern const __zero_table_t __zero_table_start__;
  extern const __zero_table_t __zero_table_end__;

  for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable) {
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
      pTable->dest[i] = pTable->src[i];
    }
  }

  for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable) {
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
      pTable->dest[i] = 0u;
    }
  }

  _start();
}
# 196 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 248 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 272 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 344 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 368 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 398 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 449 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  return(result);
}
# 479 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 506 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 558 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 583 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 624 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 833 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{
# 843 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);




}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{
# 869 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");




}
# 933 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 967 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 986 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
# 1001 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int16_t __REVSH(int16_t value)
{

  return (int16_t)__builtin_bswap16(value);






}
# 1021 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 1048 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 1068 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
  return result;
}
# 1078 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __CLZ(uint32_t value)
{
# 1089 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
}
# 1107 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 1129 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 1151 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 1168 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1185 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1202 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1268 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1283 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1305 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1327 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1342 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1354 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1366 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1621 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1941 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 2154 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 55 "lib/nrf5_sdk/components/toolchain/cmsis/include/cmsis_compiler.h" 2
# 163 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h" 2



}
# 177 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
 extern "C" {
# 259 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 298 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 316 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 371 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 406 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RESERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 440 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;
# 719 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 759 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 811 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[32U];
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 899 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;
# 1046 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile const uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1208 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1304 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1416 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1648 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1679 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __asm volatile("":::"memory");
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __asm volatile("":::"memory");
  }
}
# 1698 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1717 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1736 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1755 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1770 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1787 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1809 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 3)) & (uint32_t)0xFFUL);
  }
}
# 1831 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 3)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 3)));
  }
}
# 1856 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1883 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(3)) ? (uint32_t)(3) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(3)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(3));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 1906 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  (* (int *) (vectors + ((int32_t)IRQn + 16) * 4)) = vector;

}
# 1922 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t vectors = (uint32_t )((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + 16) * 4));
}






__attribute__((__noreturn__)) static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}
# 1955 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
# 1 "lib/nrf5_sdk/components/toolchain/cmsis/include/mpu_armv7.h" 1
# 183 "lib/nrf5_sdk/components/toolchain/cmsis/include/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

  __DSB();
  __ISB();
}



static inline void ARM_MPU_Disable(void)
{
  __DMB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_OrderedMemcpy(volatile uint32_t* dst, const uint32_t* src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 1956 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h" 2
# 1976 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2017 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 3) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2047 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
# 2059 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2080 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2100 "lib/nrf5_sdk/components/toolchain/cmsis/include/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}







}
# 157 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h" 2
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/system_nrf52840.h" 1
# 27 "lib/nrf5_sdk/modules/nrfx/mdk/system_nrf52840.h"
extern "C" {





extern uint32_t SystemCoreClock;
# 44 "lib/nrf5_sdk/modules/nrfx/mdk/system_nrf52840.h"
extern void SystemInit (void);
# 55 "lib/nrf5_sdk/modules/nrfx/mdk/system_nrf52840.h"
extern void SystemCoreClockUpdate (void);


}
# 158 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h" 2
# 208 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t PART;
  volatile const uint32_t VARIANT;
  volatile const uint32_t PACKAGE;
  volatile const uint32_t RAM;
  volatile const uint32_t FLASH;
} FICR_INFO_Type;





typedef struct {
  volatile const uint32_t A0;
  volatile const uint32_t A1;
  volatile const uint32_t A2;
  volatile const uint32_t A3;
  volatile const uint32_t A4;
  volatile const uint32_t A5;
  volatile const uint32_t B0;
  volatile const uint32_t B1;
  volatile const uint32_t B2;
  volatile const uint32_t B3;
  volatile const uint32_t B4;
  volatile const uint32_t B5;
  volatile const uint32_t T0;
  volatile const uint32_t T1;
  volatile const uint32_t T2;
  volatile const uint32_t T3;
  volatile const uint32_t T4;
} FICR_TEMP_Type;





typedef struct {
  volatile const uint32_t TAGHEADER0;


  volatile const uint32_t TAGHEADER1;


  volatile const uint32_t TAGHEADER2;


  volatile const uint32_t TAGHEADER3;


} FICR_NFC_Type;





typedef struct {
  volatile const uint32_t BYTES;
  volatile const uint32_t RCCUTOFF;
  volatile const uint32_t APCUTOFF;
  volatile const uint32_t STARTUP;
  volatile const uint32_t ROSC1;
  volatile const uint32_t ROSC2;
  volatile const uint32_t ROSC3;
  volatile const uint32_t ROSC4;
} FICR_TRNG90B_Type;





typedef struct {
  volatile uint32_t POWER;
  volatile uint32_t POWERSET;
  volatile uint32_t POWERCLR;

  volatile const uint32_t RESERVED;
} POWER_RAM_Type;





typedef struct {
  volatile uint32_t RTS;
  volatile uint32_t TXD;
  volatile uint32_t CTS;
  volatile uint32_t RXD;
} UART_PSEL_Type;





typedef struct {
  volatile uint32_t RTS;
  volatile uint32_t TXD;
  volatile uint32_t CTS;
  volatile uint32_t RXD;
} UARTE_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} UARTE_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} UARTE_TXD_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MOSI;
  volatile uint32_t MISO;
} SPI_PSEL_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MOSI;
  volatile uint32_t MISO;
  volatile uint32_t CSN;
} SPIM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIM_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIM_TXD_Type;





typedef struct {
  volatile uint32_t RXDELAY;
  volatile uint32_t CSNDUR;


} SPIM_IFTIMING_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t MISO;
  volatile uint32_t MOSI;
  volatile uint32_t CSN;
} SPIS_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIS_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} SPIS_TXD_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWI_PSEL_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWIM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIM_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIM_TXD_Type;





typedef struct {
  volatile uint32_t SCL;
  volatile uint32_t SDA;
} TWIS_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIS_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
  volatile uint32_t LIST;
} TWIS_TXD_Type;





typedef struct {
  volatile uint32_t RX;
} NFCT_FRAMESTATUS_Type;





typedef struct {
  volatile uint32_t FRAMECONFIG;
  volatile uint32_t AMOUNT;
} NFCT_TXD_Type;





typedef struct {
  volatile uint32_t FRAMECONFIG;
  volatile const uint32_t AMOUNT;
} NFCT_RXD_Type;





typedef struct {
  volatile uint32_t LIMITH;

  volatile uint32_t LIMITL;

} SAADC_EVENTS_CH_Type;





typedef struct {
  volatile uint32_t PSELP;

  volatile uint32_t PSELN;

  volatile uint32_t CONFIG;

  volatile uint32_t LIMIT;

} SAADC_CH_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

} SAADC_RESULT_Type;





typedef struct {
  volatile uint32_t LED;
  volatile uint32_t A;
  volatile uint32_t B;
} QDEC_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;

  volatile uint32_t CNT;

  volatile uint32_t REFRESH;


  volatile uint32_t ENDDELAY;
  volatile const uint32_t RESERVED[4];
} PWM_SEQ_Type;





typedef struct {
  volatile uint32_t OUT[4];

} PWM_PSEL_Type;





typedef struct {
  volatile uint32_t CLK;
  volatile uint32_t DIN;
} PDM_PSEL_Type;





typedef struct {
  volatile uint32_t PTR;

  volatile uint32_t MAXCNT;

} PDM_SAMPLE_Type;





typedef struct {
  volatile uint32_t ADDR;

  volatile uint32_t SIZE;


  volatile uint32_t PERM;


  volatile const uint32_t RESERVED;
} ACL_ACL_Type;





typedef struct {
  volatile uint32_t EN;
  volatile uint32_t DIS;
} PPI_TASKS_CHG_Type;





typedef struct {
  volatile uint32_t EEP;
  volatile uint32_t TEP;
} PPI_CH_Type;





typedef struct {
  volatile uint32_t TEP;
} PPI_FORK_Type;





typedef struct {
  volatile uint32_t WA;

  volatile uint32_t RA;

} MWU_EVENTS_REGION_Type;





typedef struct {
  volatile uint32_t WA;

  volatile uint32_t RA;

} MWU_EVENTS_PREGION_Type;





typedef struct {
  volatile uint32_t SUBSTATWA;



  volatile uint32_t SUBSTATRA;



} MWU_PERREGION_Type;





typedef struct {
  volatile uint32_t START;

  volatile uint32_t END;
  volatile const uint32_t RESERVED[2];
} MWU_REGION_Type;





typedef struct {
  volatile const uint32_t START;
  volatile const uint32_t END;
  volatile uint32_t SUBS;
  volatile const uint32_t RESERVED;
} MWU_PREGION_Type;





typedef struct {
  volatile uint32_t MODE;
  volatile uint32_t RXEN;
  volatile uint32_t TXEN;
  volatile uint32_t MCKEN;
  volatile uint32_t MCKFREQ;
  volatile uint32_t RATIO;
  volatile uint32_t SWIDTH;
  volatile uint32_t ALIGN;
  volatile uint32_t FORMAT;
  volatile uint32_t CHANNELS;
} I2S_CONFIG_Type;





typedef struct {
  volatile uint32_t PTR;
} I2S_RXD_Type;





typedef struct {
  volatile uint32_t PTR;
} I2S_TXD_Type;





typedef struct {
  volatile uint32_t MAXCNT;
} I2S_RXTXD_Type;





typedef struct {
  volatile uint32_t MCK;
  volatile uint32_t SCK;
  volatile uint32_t LRCK;
  volatile uint32_t SDIN;
  volatile uint32_t SDOUT;
} I2S_PSEL_Type;





typedef struct {
  volatile const uint32_t EPIN[8];


  volatile const uint32_t RESERVED;
  volatile const uint32_t EPOUT[8];


} USBD_HALTED_Type;





typedef struct {
  volatile uint32_t EPOUT[8];

  volatile const uint32_t ISOOUT;

} USBD_SIZE_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

  volatile const uint32_t RESERVED[2];
} USBD_EPIN_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} USBD_ISOIN_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;

  volatile const uint32_t AMOUNT;

  volatile const uint32_t RESERVED[2];
} USBD_EPOUT_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t MAXCNT;
  volatile const uint32_t AMOUNT;
} USBD_ISOOUT_Type;





typedef struct {
  volatile uint32_t SRC;
  volatile uint32_t DST;
  volatile uint32_t CNT;
} QSPI_READ_Type;





typedef struct {
  volatile uint32_t DST;
  volatile uint32_t SRC;
  volatile uint32_t CNT;
} QSPI_WRITE_Type;





typedef struct {
  volatile uint32_t PTR;
  volatile uint32_t LEN;
} QSPI_ERASE_Type;





typedef struct {
  volatile uint32_t SCK;
  volatile uint32_t CSN;
  volatile const uint32_t RESERVED;
  volatile uint32_t IO0;
  volatile uint32_t IO1;
  volatile uint32_t IO2;
  volatile uint32_t IO3;
} QSPI_PSEL_Type;
# 897 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[4];
  volatile const uint32_t CODEPAGESIZE;
  volatile const uint32_t CODESIZE;
  volatile const uint32_t RESERVED1[18];
  volatile const uint32_t DEVICEID[2];
  volatile const uint32_t RESERVED2[6];
  volatile const uint32_t ER[4];

  volatile const uint32_t IR[4];
  volatile const uint32_t DEVICEADDRTYPE;
  volatile const uint32_t DEVICEADDR[2];
  volatile const uint32_t RESERVED3[21];
  volatile const FICR_INFO_Type INFO;
  volatile const uint32_t RESERVED4[143];
  volatile const uint32_t PRODTEST[3];

  volatile const uint32_t RESERVED5[42];
  volatile const FICR_TEMP_Type TEMP;

  volatile const uint32_t RESERVED6[2];
  volatile FICR_NFC_Type NFC;
  volatile const uint32_t RESERVED7[488];
  volatile FICR_TRNG90B_Type TRNG90B;
} NRF_FICR_Type;
# 934 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[5];
  volatile uint32_t NRFFW[13];

  volatile const uint32_t RESERVED1[2];
  volatile uint32_t NRFHW[12];

  volatile uint32_t CUSTOMER[32];
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t PSELRESET[2];

  volatile uint32_t APPROTECT;
  volatile uint32_t NFCPINS;

  volatile uint32_t DEBUGCTRL;
  volatile const uint32_t RESERVED3[60];
  volatile uint32_t REGOUT0;


} NRF_UICR_Type;
# 966 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[340];
  volatile uint32_t FORCEPROTECT;

  volatile const uint32_t RESERVED1;
  volatile uint32_t DISABLE;
} NRF_APPROTECT_Type;
# 985 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_HFCLKSTART;
  volatile uint32_t TASKS_HFCLKSTOP;
  volatile uint32_t TASKS_LFCLKSTART;
  volatile uint32_t TASKS_LFCLKSTOP;
  volatile uint32_t TASKS_CAL;
  volatile uint32_t TASKS_CTSTART;
  volatile uint32_t TASKS_CTSTOP;
  volatile const uint32_t RESERVED[57];
  volatile uint32_t EVENTS_HFCLKSTARTED;
  volatile uint32_t EVENTS_LFCLKSTARTED;
  volatile const uint32_t RESERVED1;
  volatile uint32_t EVENTS_DONE;
  volatile uint32_t EVENTS_CTTO;
  volatile const uint32_t RESERVED2[5];
  volatile uint32_t EVENTS_CTSTARTED;

  volatile uint32_t EVENTS_CTSTOPPED;

  volatile const uint32_t RESERVED3[117];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[63];
  volatile const uint32_t HFCLKRUN;

  volatile const uint32_t HFCLKSTAT;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t LFCLKRUN;

  volatile const uint32_t LFCLKSTAT;
  volatile const uint32_t LFCLKSRCCOPY;

  volatile const uint32_t RESERVED6[62];
  volatile uint32_t LFCLKSRC;
  volatile const uint32_t RESERVED7[3];
  volatile uint32_t HFXODEBOUNCE;

  volatile const uint32_t RESERVED8[3];
  volatile uint32_t CTIV;
  volatile const uint32_t RESERVED9[8];
  volatile uint32_t TRACECONFIG;
  volatile const uint32_t RESERVED10[21];
  volatile uint32_t LFRCMODE;
} NRF_CLOCK_Type;
# 1041 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[30];
  volatile uint32_t TASKS_CONSTLAT;
  volatile uint32_t TASKS_LOWPWR;
  volatile const uint32_t RESERVED1[34];
  volatile uint32_t EVENTS_POFWARN;
  volatile const uint32_t RESERVED2[2];
  volatile uint32_t EVENTS_SLEEPENTER;
  volatile uint32_t EVENTS_SLEEPEXIT;
  volatile uint32_t EVENTS_USBDETECTED;
  volatile uint32_t EVENTS_USBREMOVED;
  volatile uint32_t EVENTS_USBPWRRDY;
  volatile const uint32_t RESERVED3[119];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[61];
  volatile uint32_t RESETREAS;
  volatile const uint32_t RESERVED5[9];
  volatile const uint32_t RAMSTATUS;
  volatile const uint32_t RESERVED6[3];
  volatile const uint32_t USBREGSTATUS;
  volatile const uint32_t RESERVED7[49];
  volatile uint32_t SYSTEMOFF;
  volatile const uint32_t RESERVED8[3];
  volatile uint32_t POFCON;
  volatile const uint32_t RESERVED9[2];
  volatile uint32_t GPREGRET;
  volatile uint32_t GPREGRET2;
  volatile const uint32_t RESERVED10[21];
  volatile uint32_t DCDCEN;
  volatile const uint32_t RESERVED11;
  volatile uint32_t DCDCEN0;
  volatile const uint32_t RESERVED12[47];
  volatile const uint32_t MAINREGSTATUS;
  volatile const uint32_t RESERVED13[175];
  volatile POWER_RAM_Type RAM[9];
} NRF_POWER_Type;
# 1090 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[321];
  volatile uint32_t OUT;
  volatile uint32_t OUTSET;
  volatile uint32_t OUTCLR;
  volatile const uint32_t IN;
  volatile uint32_t DIR;
  volatile uint32_t DIRSET;
  volatile uint32_t DIRCLR;
  volatile uint32_t LATCH;


  volatile uint32_t DETECTMODE;

  volatile const uint32_t RESERVED1[118];
  volatile uint32_t PIN_CNF[32];

} NRF_GPIO_Type;
# 1120 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_TXEN;
  volatile uint32_t TASKS_RXEN;
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_DISABLE;
  volatile uint32_t TASKS_RSSISTART;

  volatile uint32_t TASKS_RSSISTOP;
  volatile uint32_t TASKS_BCSTART;
  volatile uint32_t TASKS_BCSTOP;
  volatile uint32_t TASKS_EDSTART;

  volatile uint32_t TASKS_EDSTOP;
  volatile uint32_t TASKS_CCASTART;

  volatile uint32_t TASKS_CCASTOP;
  volatile const uint32_t RESERVED[51];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_ADDRESS;
  volatile uint32_t EVENTS_PAYLOAD;
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_DISABLED;
  volatile uint32_t EVENTS_DEVMATCH;

  volatile uint32_t EVENTS_DEVMISS;

  volatile uint32_t EVENTS_RSSIEND;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t EVENTS_BCMATCH;
  volatile const uint32_t RESERVED2;
  volatile uint32_t EVENTS_CRCOK;
  volatile uint32_t EVENTS_CRCERROR;
  volatile uint32_t EVENTS_FRAMESTART;
  volatile uint32_t EVENTS_EDEND;


  volatile uint32_t EVENTS_EDSTOPPED;
  volatile uint32_t EVENTS_CCAIDLE;
  volatile uint32_t EVENTS_CCABUSY;
  volatile uint32_t EVENTS_CCASTOPPED;
  volatile uint32_t EVENTS_RATEBOOST;

  volatile uint32_t EVENTS_TXREADY;

  volatile uint32_t EVENTS_RXREADY;

  volatile uint32_t EVENTS_MHRMATCH;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_SYNC;
  volatile uint32_t EVENTS_PHYEND;


  volatile const uint32_t RESERVED4[36];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED6[61];
  volatile const uint32_t CRCSTATUS;
  volatile const uint32_t RESERVED7;
  volatile const uint32_t RXMATCH;
  volatile const uint32_t RXCRC;
  volatile const uint32_t DAI;
  volatile const uint32_t PDUSTAT;
  volatile const uint32_t RESERVED8[59];
  volatile uint32_t PACKETPTR;
  volatile uint32_t FREQUENCY;
  volatile uint32_t TXPOWER;
  volatile uint32_t MODE;
  volatile uint32_t PCNF0;
  volatile uint32_t PCNF1;
  volatile uint32_t BASE0;
  volatile uint32_t BASE1;
  volatile uint32_t PREFIX0;
  volatile uint32_t PREFIX1;
  volatile uint32_t TXADDRESS;
  volatile uint32_t RXADDRESSES;
  volatile uint32_t CRCCNF;
  volatile uint32_t CRCPOLY;
  volatile uint32_t CRCINIT;
  volatile const uint32_t RESERVED9;
  volatile uint32_t TIFS;
  volatile const uint32_t RSSISAMPLE;
  volatile const uint32_t RESERVED10;
  volatile const uint32_t STATE;
  volatile uint32_t DATAWHITEIV;
  volatile const uint32_t RESERVED11[2];
  volatile uint32_t BCC;
  volatile const uint32_t RESERVED12[39];
  volatile uint32_t DAB[8];

  volatile uint32_t DAP[8];

  volatile uint32_t DACNF;
  volatile uint32_t MHRMATCHCONF;
  volatile uint32_t MHRMATCHMAS;
  volatile const uint32_t RESERVED13;
  volatile uint32_t MODECNF0;
  volatile const uint32_t RESERVED14[3];
  volatile uint32_t SFD;
  volatile uint32_t EDCNT;
  volatile uint32_t EDSAMPLE;
  volatile uint32_t CCACTRL;
  volatile const uint32_t RESERVED15[611];
  volatile uint32_t POWER;
} NRF_RADIO_Type;
# 1239 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile uint32_t TASKS_STOPRX;
  volatile uint32_t TASKS_STARTTX;
  volatile uint32_t TASKS_STOPTX;
  volatile const uint32_t RESERVED[3];
  volatile uint32_t TASKS_SUSPEND;
  volatile const uint32_t RESERVED1[56];
  volatile uint32_t EVENTS_CTS;
  volatile uint32_t EVENTS_NCTS;
  volatile uint32_t EVENTS_RXDRDY;
  volatile const uint32_t RESERVED2[4];
  volatile uint32_t EVENTS_TXDRDY;
  volatile const uint32_t RESERVED3;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_RXTO;
  volatile const uint32_t RESERVED5[46];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED6[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED7[93];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED8[31];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED9;
  volatile UART_PSEL_Type PSEL;
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED10;
  volatile uint32_t BAUDRATE;

  volatile const uint32_t RESERVED11[17];
  volatile uint32_t CONFIG;
} NRF_UART_Type;
# 1287 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile uint32_t TASKS_STOPRX;
  volatile uint32_t TASKS_STARTTX;
  volatile uint32_t TASKS_STOPTX;
  volatile const uint32_t RESERVED[7];
  volatile uint32_t TASKS_FLUSHRX;
  volatile const uint32_t RESERVED1[52];
  volatile uint32_t EVENTS_CTS;
  volatile uint32_t EVENTS_NCTS;
  volatile uint32_t EVENTS_RXDRDY;

  volatile const uint32_t RESERVED2;
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_TXDRDY;
  volatile uint32_t EVENTS_ENDTX;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_RXTO;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6;
  volatile uint32_t EVENTS_TXSTOPPED;
  volatile const uint32_t RESERVED7[41];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[93];
  volatile uint32_t ERRORSRC;

  volatile const uint32_t RESERVED10[31];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile UARTE_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[3];
  volatile uint32_t BAUDRATE;

  volatile const uint32_t RESERVED13[3];
  volatile UARTE_RXD_Type RXD;
  volatile const uint32_t RESERVED14;
  volatile UARTE_TXD_Type TXD;
  volatile const uint32_t RESERVED15[7];
  volatile uint32_t CONFIG;
} NRF_UARTE_Type;
# 1347 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[66];
  volatile uint32_t EVENTS_READY;
  volatile const uint32_t RESERVED1[126];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED3;
  volatile SPI_PSEL_Type PSEL;
  volatile const uint32_t RESERVED4;
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED5;
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED6[11];
  volatile uint32_t CONFIG;
} NRF_SPI_Type;
# 1378 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[4];
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED2[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED4;
  volatile uint32_t EVENTS_END;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_ENDTX;
  volatile const uint32_t RESERVED6[10];
  volatile uint32_t EVENTS_STARTED;
  volatile const uint32_t RESERVED7[44];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[61];
  volatile uint32_t STALLSTAT;



  volatile const uint32_t RESERVED10[63];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile SPIM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[3];
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED13[3];
  volatile SPIM_RXD_Type RXD;
  volatile SPIM_TXD_Type TXD;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED14[2];
  volatile SPIM_IFTIMING_Type IFTIMING;
  volatile uint32_t CSNPOL;
  volatile uint32_t PSELDCX;
  volatile uint32_t DCXCNT;
  volatile const uint32_t RESERVED15[19];
  volatile uint32_t ORC;


} NRF_SPIM_Type;
# 1438 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[9];
  volatile uint32_t TASKS_ACQUIRE;
  volatile uint32_t TASKS_RELEASE;

  volatile const uint32_t RESERVED1[54];
  volatile uint32_t EVENTS_END;
  volatile const uint32_t RESERVED2[2];
  volatile uint32_t EVENTS_ENDRX;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t EVENTS_ACQUIRED;
  volatile const uint32_t RESERVED4[53];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED6[61];
  volatile const uint32_t SEMSTAT;
  volatile const uint32_t RESERVED7[15];
  volatile uint32_t STATUS;
  volatile const uint32_t RESERVED8[47];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED9;
  volatile SPIS_PSEL_Type PSEL;
  volatile const uint32_t RESERVED10[7];
  volatile SPIS_RXD_Type RXD;
  volatile SPIS_TXD_Type TXD;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED11;
  volatile uint32_t DEF;

  volatile const uint32_t RESERVED12[24];
  volatile uint32_t ORC;
} NRF_SPIS_Type;
# 1484 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTTX;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED2;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED3[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile uint32_t EVENTS_RXDREADY;
  volatile const uint32_t RESERVED4[4];
  volatile uint32_t EVENTS_TXDSENT;
  volatile const uint32_t RESERVED5;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED6[4];
  volatile uint32_t EVENTS_BB;

  volatile const uint32_t RESERVED7[3];
  volatile uint32_t EVENTS_SUSPENDED;
  volatile const uint32_t RESERVED8[45];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED9[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED10[110];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED11[14];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED12;
  volatile TWI_PSEL_Type PSEL;
  volatile const uint32_t RESERVED13[2];
  volatile const uint32_t RXD;
  volatile uint32_t TXD;
  volatile const uint32_t RESERVED14;
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED15[24];
  volatile uint32_t ADDRESS;
} NRF_TWI_Type;
# 1537 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTRX;
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTTX;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t TASKS_STOP;

  volatile const uint32_t RESERVED2;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED3[56];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED5[8];
  volatile uint32_t EVENTS_SUSPENDED;

  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6[2];
  volatile uint32_t EVENTS_LASTRX;
  volatile uint32_t EVENTS_LASTTX;

  volatile const uint32_t RESERVED7[39];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[110];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t RESERVED10[14];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile TWIM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[5];
  volatile uint32_t FREQUENCY;

  volatile const uint32_t RESERVED13[3];
  volatile TWIM_RXD_Type RXD;
  volatile TWIM_TXD_Type TXD;
  volatile const uint32_t RESERVED14[13];
  volatile uint32_t ADDRESS;
} NRF_TWIM_Type;
# 1593 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[5];
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_SUSPEND;
  volatile uint32_t TASKS_RESUME;
  volatile const uint32_t RESERVED2[3];
  volatile uint32_t TASKS_PREPARERX;
  volatile uint32_t TASKS_PREPARETX;
  volatile const uint32_t RESERVED3[51];
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED4[7];
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED5[9];
  volatile uint32_t EVENTS_RXSTARTED;
  volatile uint32_t EVENTS_TXSTARTED;
  volatile const uint32_t RESERVED6[4];
  volatile uint32_t EVENTS_WRITE;
  volatile uint32_t EVENTS_READ;
  volatile const uint32_t RESERVED7[37];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED8[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED9[113];
  volatile uint32_t ERRORSRC;
  volatile const uint32_t MATCH;

  volatile const uint32_t RESERVED10[10];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED11;
  volatile TWIS_PSEL_Type PSEL;
  volatile const uint32_t RESERVED12[9];
  volatile TWIS_RXD_Type RXD;
  volatile TWIS_TXD_Type TXD;
  volatile const uint32_t RESERVED13[13];
  volatile uint32_t ADDRESS[2];
  volatile const uint32_t RESERVED14;
  volatile uint32_t CONFIG;

  volatile const uint32_t RESERVED15[10];
  volatile uint32_t ORC;

} NRF_TWIS_Type;
# 1650 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_ACTIVATE;

  volatile uint32_t TASKS_DISABLE;
  volatile uint32_t TASKS_SENSE;

  volatile uint32_t TASKS_STARTTX;

  volatile const uint32_t RESERVED[3];
  volatile uint32_t TASKS_ENABLERXDATA;
  volatile const uint32_t RESERVED1;
  volatile uint32_t TASKS_GOIDLE;
  volatile uint32_t TASKS_GOSLEEP;
  volatile const uint32_t RESERVED2[53];
  volatile uint32_t EVENTS_READY;

  volatile uint32_t EVENTS_FIELDDETECTED;
  volatile uint32_t EVENTS_FIELDLOST;
  volatile uint32_t EVENTS_TXFRAMESTART;

  volatile uint32_t EVENTS_TXFRAMEEND;

  volatile uint32_t EVENTS_RXFRAMESTART;

  volatile uint32_t EVENTS_RXFRAMEEND;


  volatile uint32_t EVENTS_ERROR;

  volatile const uint32_t RESERVED3[2];
  volatile uint32_t EVENTS_RXERROR;


  volatile uint32_t EVENTS_ENDRX;

  volatile uint32_t EVENTS_ENDTX;

  volatile const uint32_t RESERVED4;
  volatile uint32_t EVENTS_AUTOCOLRESSTARTED;
  volatile const uint32_t RESERVED5[3];
  volatile uint32_t EVENTS_COLLISION;
  volatile uint32_t EVENTS_SELECTED;
  volatile uint32_t EVENTS_STARTED;
  volatile const uint32_t RESERVED6[43];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED7[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED8[62];
  volatile uint32_t ERRORSTATUS;
  volatile const uint32_t RESERVED9;
  volatile NFCT_FRAMESTATUS_Type FRAMESTATUS;
  volatile const uint32_t NFCTAGSTATE;
  volatile const uint32_t RESERVED10[3];
  volatile const uint32_t SLEEPSTATE;
  volatile const uint32_t RESERVED11[6];
  volatile const uint32_t FIELDPRESENT;
  volatile const uint32_t RESERVED12[49];
  volatile uint32_t FRAMEDELAYMIN;
  volatile uint32_t FRAMEDELAYMAX;
  volatile uint32_t FRAMEDELAYMODE;
  volatile uint32_t PACKETPTR;

  volatile uint32_t MAXLEN;

  volatile NFCT_TXD_Type TXD;
  volatile NFCT_RXD_Type RXD;
  volatile const uint32_t RESERVED13[26];
  volatile uint32_t NFCID1_LAST;
  volatile uint32_t NFCID1_2ND_LAST;
  volatile uint32_t NFCID1_3RD_LAST;
  volatile uint32_t AUTOCOLRESCONFIG;


  volatile uint32_t SENSRES;
  volatile uint32_t SELRES;
} NRF_NFCT_Type;
# 1740 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_OUT[8];


  volatile const uint32_t RESERVED[4];
  volatile uint32_t TASKS_SET[8];


  volatile const uint32_t RESERVED1[4];
  volatile uint32_t TASKS_CLR[8];


  volatile const uint32_t RESERVED2[32];
  volatile uint32_t EVENTS_IN[8];

  volatile const uint32_t RESERVED3[23];
  volatile uint32_t EVENTS_PORT;

  volatile const uint32_t RESERVED4[97];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED5[129];
  volatile uint32_t CONFIG[8];

} NRF_GPIOTE_Type;
# 1777 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile uint32_t TASKS_SAMPLE;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_CALIBRATEOFFSET;
  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_STARTED;
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_DONE;



  volatile uint32_t EVENTS_RESULTDONE;
  volatile uint32_t EVENTS_CALIBRATEDONE;
  volatile uint32_t EVENTS_STOPPED;
  volatile SAADC_EVENTS_CH_Type EVENTS_CH[8];
  volatile const uint32_t RESERVED1[106];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[61];
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t ENABLE;
  volatile const uint32_t RESERVED4[3];
  volatile SAADC_CH_Type CH[8];
  volatile const uint32_t RESERVED5[24];
  volatile uint32_t RESOLUTION;
  volatile uint32_t OVERSAMPLE;



  volatile uint32_t SAMPLERATE;
  volatile const uint32_t RESERVED6[12];
  volatile SAADC_RESULT_Type RESULT;
} NRF_SAADC_Type;
# 1826 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_COUNT;
  volatile uint32_t TASKS_CLEAR;
  volatile uint32_t TASKS_SHUTDOWN;
  volatile const uint32_t RESERVED[11];
  volatile uint32_t TASKS_CAPTURE[6];

  volatile const uint32_t RESERVED1[58];
  volatile uint32_t EVENTS_COMPARE[6];

  volatile const uint32_t RESERVED2[42];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[126];
  volatile uint32_t MODE;
  volatile uint32_t BITMODE;
  volatile const uint32_t RESERVED5;
  volatile uint32_t PRESCALER;
  volatile const uint32_t RESERVED6[11];
  volatile uint32_t CC[6];

} NRF_TIMER_Type;
# 1864 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_CLEAR;
  volatile uint32_t TASKS_TRIGOVRFLW;
  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_TICK;
  volatile uint32_t EVENTS_OVRFLW;
  volatile const uint32_t RESERVED1[14];
  volatile uint32_t EVENTS_COMPARE[4];

  volatile const uint32_t RESERVED2[109];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[13];
  volatile uint32_t EVTEN;
  volatile uint32_t EVTENSET;
  volatile uint32_t EVTENCLR;
  volatile const uint32_t RESERVED4[110];
  volatile const uint32_t COUNTER;
  volatile uint32_t PRESCALER;

  volatile const uint32_t RESERVED5[13];
  volatile uint32_t CC[4];
} NRF_RTC_Type;
# 1901 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_DATARDY;
  volatile const uint32_t RESERVED1[128];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[127];
  volatile const int32_t TEMP;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t A0;
  volatile uint32_t A1;
  volatile uint32_t A2;
  volatile uint32_t A3;
  volatile uint32_t A4;
  volatile uint32_t A5;
  volatile const uint32_t RESERVED4[2];
  volatile uint32_t B0;
  volatile uint32_t B1;
  volatile uint32_t B2;
  volatile uint32_t B3;
  volatile uint32_t B4;
  volatile uint32_t B5;
  volatile const uint32_t RESERVED5[2];
  volatile uint32_t T0;
  volatile uint32_t T1;
  volatile uint32_t T2;
  volatile uint32_t T3;
  volatile uint32_t T4;
} NRF_TEMP_Type;
# 1944 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_VALRDY;

  volatile const uint32_t RESERVED1[63];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[126];
  volatile uint32_t CONFIG;
  volatile const uint32_t VALUE;
} NRF_RNG_Type;
# 1971 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_STARTECB;
  volatile uint32_t TASKS_STOPECB;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_ENDECB;
  volatile uint32_t EVENTS_ERRORECB;

  volatile const uint32_t RESERVED1[127];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[126];
  volatile uint32_t ECBDATAPTR;
} NRF_ECB_Type;
# 1996 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED1[61];
  volatile uint32_t EVENTS_END;
  volatile uint32_t EVENTS_RESOLVED;
  volatile uint32_t EVENTS_NOTRESOLVED;
  volatile const uint32_t RESERVED2[126];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t NIRK;
  volatile uint32_t IRKPTR;
  volatile const uint32_t RESERVED5;
  volatile uint32_t ADDRPTR;
  volatile uint32_t SCRATCHPTR;
} NRF_AAR_Type;
# 2030 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_KSGEN;

  volatile uint32_t TASKS_CRYPT;

  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_RATEOVERRIDE;


  volatile const uint32_t RESERVED[60];
  volatile uint32_t EVENTS_ENDKSGEN;
  volatile uint32_t EVENTS_ENDCRYPT;
  volatile uint32_t EVENTS_ERROR;
  volatile const uint32_t RESERVED1[61];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t MICSTATUS;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t MODE;
  volatile uint32_t CNFPTR;

  volatile uint32_t INPTR;
  volatile uint32_t OUTPTR;
  volatile uint32_t SCRATCHPTR;
  volatile uint32_t MAXPACKETSIZE;

  volatile uint32_t RATEOVERRIDE;
} NRF_CCM_Type;
# 2074 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile const uint32_t RESERVED[63];
  volatile uint32_t EVENTS_TIMEOUT;
  volatile const uint32_t RESERVED1[128];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[61];
  volatile const uint32_t RUNSTATUS;
  volatile const uint32_t REQSTATUS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t CRV;
  volatile uint32_t RREN;
  volatile uint32_t CONFIG;
  volatile const uint32_t RESERVED4[60];
  volatile uint32_t RR[8];
} NRF_WDT_Type;
# 2103 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_READCLRACC;
  volatile uint32_t TASKS_RDCLRACC;
  volatile uint32_t TASKS_RDCLRDBL;
  volatile const uint32_t RESERVED[59];
  volatile uint32_t EVENTS_SAMPLERDY;

  volatile uint32_t EVENTS_REPORTRDY;
  volatile uint32_t EVENTS_ACCOF;
  volatile uint32_t EVENTS_DBLRDY;
  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED1[59];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[125];
  volatile uint32_t ENABLE;
  volatile uint32_t LEDPOL;
  volatile uint32_t SAMPLEPER;
  volatile const int32_t SAMPLE;
  volatile uint32_t REPORTPER;

  volatile const int32_t ACC;
  volatile const int32_t ACCREAD;

  volatile QDEC_PSEL_Type PSEL;
  volatile uint32_t DBFEN;
  volatile const uint32_t RESERVED4[5];
  volatile uint32_t LEDPRE;
  volatile const uint32_t ACCDBL;

  volatile const uint32_t ACCDBLREAD;

} NRF_QDEC_Type;
# 2152 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_SAMPLE;
  volatile const uint32_t RESERVED[61];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_DOWN;
  volatile uint32_t EVENTS_UP;
  volatile uint32_t EVENTS_CROSS;
  volatile const uint32_t RESERVED1[60];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t RESULT;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t PSEL;
  volatile uint32_t REFSEL;
  volatile uint32_t EXTREFSEL;
  volatile const uint32_t RESERVED5[8];
  volatile uint32_t TH;
  volatile uint32_t MODE;
  volatile uint32_t HYST;
} NRF_COMP_Type;
# 2191 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile uint32_t TASKS_SAMPLE;
  volatile const uint32_t RESERVED[61];
  volatile uint32_t EVENTS_READY;
  volatile uint32_t EVENTS_DOWN;
  volatile uint32_t EVENTS_UP;
  volatile uint32_t EVENTS_CROSS;
  volatile const uint32_t RESERVED1[60];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED2[64];
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[61];
  volatile const uint32_t RESULT;
  volatile const uint32_t RESERVED4[63];
  volatile uint32_t ENABLE;
  volatile uint32_t PSEL;
  volatile uint32_t REFSEL;
  volatile uint32_t EXTREFSEL;
  volatile const uint32_t RESERVED5[4];
  volatile uint32_t ANADETECT;
  volatile const uint32_t RESERVED6[5];
  volatile uint32_t HYST;
} NRF_LPCOMP_Type;
# 2229 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_TRIGGER[16];

  volatile const uint32_t RESERVED[48];
  volatile uint32_t EVENTS_TRIGGERED[16];


  volatile const uint32_t RESERVED1[112];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
} NRF_EGU_Type;
# 2253 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t UNUSED;
} NRF_SWI_Type;
# 2268 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STOP;


  volatile uint32_t TASKS_SEQSTART[2];




  volatile uint32_t TASKS_NEXTSTEP;



  volatile const uint32_t RESERVED1[60];
  volatile uint32_t EVENTS_STOPPED;

  volatile uint32_t EVENTS_SEQSTARTED[2];

  volatile uint32_t EVENTS_SEQEND[2];


  volatile uint32_t EVENTS_PWMPERIODEND;
  volatile uint32_t EVENTS_LOOPSDONE;

  volatile const uint32_t RESERVED2[56];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[125];
  volatile uint32_t ENABLE;
  volatile uint32_t MODE;
  volatile uint32_t COUNTERTOP;

  volatile uint32_t PRESCALER;
  volatile uint32_t DECODER;
  volatile uint32_t LOOP;
  volatile const uint32_t RESERVED5[2];
  volatile PWM_SEQ_Type SEQ[2];
  volatile PWM_PSEL_Type PSEL;
} NRF_PWM_Type;
# 2323 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;
  volatile uint32_t TASKS_STOP;
  volatile const uint32_t RESERVED[62];
  volatile uint32_t EVENTS_STARTED;
  volatile uint32_t EVENTS_STOPPED;
  volatile uint32_t EVENTS_END;


  volatile const uint32_t RESERVED1[125];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;
  volatile uint32_t PDMCLKCTRL;
  volatile uint32_t MODE;

  volatile const uint32_t RESERVED3[3];
  volatile uint32_t GAINL;
  volatile uint32_t GAINR;
  volatile uint32_t RATIO;

  volatile const uint32_t RESERVED4[7];
  volatile PDM_PSEL_Type PSEL;
  volatile const uint32_t RESERVED5[6];
  volatile PDM_SAMPLE_Type SAMPLE;
} NRF_PDM_Type;
# 2363 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[512];
  volatile ACL_ACL_Type ACL[8];
} NRF_ACL_Type;
# 2379 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[256];
  volatile const uint32_t READY;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t READYNEXT;
  volatile const uint32_t RESERVED2[62];
  volatile uint32_t CONFIG;

  union {
    volatile uint32_t ERASEPAGE;
    volatile uint32_t ERASEPCR1;

  };
  volatile uint32_t ERASEALL;
  volatile uint32_t ERASEPCR0;

  volatile uint32_t ERASEUICR;

  volatile uint32_t ERASEPAGEPARTIAL;

  volatile uint32_t ERASEPAGEPARTIALCFG;
  volatile const uint32_t RESERVED3[8];
  volatile uint32_t ICACHECNF;
  volatile const uint32_t RESERVED4;
  volatile uint32_t IHIT;
  volatile uint32_t IMISS;
} NRF_NVMC_Type;
# 2418 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile PPI_TASKS_CHG_Type TASKS_CHG[6];
  volatile const uint32_t RESERVED[308];
  volatile uint32_t CHEN;
  volatile uint32_t CHENSET;
  volatile uint32_t CHENCLR;
  volatile const uint32_t RESERVED1;
  volatile PPI_CH_Type CH[20];
  volatile const uint32_t RESERVED2[148];
  volatile uint32_t CHG[6];
  volatile const uint32_t RESERVED3[62];
  volatile PPI_FORK_Type FORK[32];
} NRF_PPI_Type;
# 2443 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[64];
  volatile MWU_EVENTS_REGION_Type EVENTS_REGION[4];
  volatile const uint32_t RESERVED1[16];
  volatile MWU_EVENTS_PREGION_Type EVENTS_PREGION[2];
  volatile const uint32_t RESERVED2[100];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[5];
  volatile uint32_t NMIEN;
  volatile uint32_t NMIENSET;
  volatile uint32_t NMIENCLR;
  volatile const uint32_t RESERVED4[53];
  volatile MWU_PERREGION_Type PERREGION[2];
  volatile const uint32_t RESERVED5[64];
  volatile uint32_t REGIONEN;
  volatile uint32_t REGIONENSET;
  volatile uint32_t REGIONENCLR;
  volatile const uint32_t RESERVED6[57];
  volatile MWU_REGION_Type REGION[4];
  volatile const uint32_t RESERVED7[32];
  volatile MWU_PREGION_Type PREGION[2];
} NRF_MWU_Type;
# 2479 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_START;

  volatile uint32_t TASKS_STOP;


  volatile const uint32_t RESERVED[63];
  volatile uint32_t EVENTS_RXPTRUPD;




  volatile uint32_t EVENTS_STOPPED;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t EVENTS_TXPTRUPD;




  volatile const uint32_t RESERVED2[122];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED3[125];
  volatile uint32_t ENABLE;
  volatile I2S_CONFIG_Type CONFIG;
  volatile const uint32_t RESERVED4[3];
  volatile I2S_RXD_Type RXD;
  volatile const uint32_t RESERVED5;
  volatile I2S_TXD_Type TXD;
  volatile const uint32_t RESERVED6[3];
  volatile I2S_RXTXD_Type RXTXD;
  volatile const uint32_t RESERVED7[3];
  volatile I2S_PSEL_Type PSEL;
} NRF_I2S_Type;
# 2526 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t UNUSED;
} NRF_FPU_Type;
# 2541 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile uint32_t TASKS_STARTEPIN[8];



  volatile uint32_t TASKS_STARTISOIN;


  volatile uint32_t TASKS_STARTEPOUT[8];



  volatile uint32_t TASKS_STARTISOOUT;


  volatile uint32_t TASKS_EP0RCVOUT;
  volatile uint32_t TASKS_EP0STATUS;
  volatile uint32_t TASKS_EP0STALL;

  volatile uint32_t TASKS_DPDMDRIVE;

  volatile uint32_t TASKS_DPDMNODRIVE;

  volatile const uint32_t RESERVED1[40];
  volatile uint32_t EVENTS_USBRESET;

  volatile uint32_t EVENTS_STARTED;



  volatile uint32_t EVENTS_ENDEPIN[8];


  volatile uint32_t EVENTS_EP0DATADONE;

  volatile uint32_t EVENTS_ENDISOIN;

  volatile uint32_t EVENTS_ENDEPOUT[8];


  volatile uint32_t EVENTS_ENDISOOUT;

  volatile uint32_t EVENTS_SOF;

  volatile uint32_t EVENTS_USBEVENT;


  volatile uint32_t EVENTS_EP0SETUP;

  volatile uint32_t EVENTS_EPDATA;

  volatile const uint32_t RESERVED2[39];
  volatile uint32_t SHORTS;
  volatile const uint32_t RESERVED3[63];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED4[61];
  volatile uint32_t EVENTCAUSE;
  volatile const uint32_t RESERVED5[7];
  volatile USBD_HALTED_Type HALTED;
  volatile const uint32_t RESERVED6;
  volatile uint32_t EPSTATUS;

  volatile uint32_t EPDATASTATUS;


  volatile const uint32_t USBADDR;
  volatile const uint32_t RESERVED7[3];
  volatile const uint32_t BMREQUESTTYPE;
  volatile const uint32_t BREQUEST;
  volatile const uint32_t WVALUEL;
  volatile const uint32_t WVALUEH;
  volatile const uint32_t WINDEXL;
  volatile const uint32_t WINDEXH;
  volatile const uint32_t WLENGTHL;
  volatile const uint32_t WLENGTHH;
  volatile USBD_SIZE_Type SIZE;
  volatile const uint32_t RESERVED8[15];
  volatile uint32_t ENABLE;
  volatile uint32_t USBPULLUP;
  volatile uint32_t DPDMVALUE;



  volatile uint32_t DTOGGLE;
  volatile uint32_t EPINEN;
  volatile uint32_t EPOUTEN;
  volatile uint32_t EPSTALL;
  volatile uint32_t ISOSPLIT;
  volatile const uint32_t FRAMECNTR;

  volatile const uint32_t RESERVED9[2];
  volatile uint32_t LOWPOWER;

  volatile uint32_t ISOINCONFIG;


  volatile const uint32_t RESERVED10[51];
  volatile USBD_EPIN_Type EPIN[8];
  volatile USBD_ISOIN_Type ISOIN;
  volatile const uint32_t RESERVED11[21];
  volatile USBD_EPOUT_Type EPOUT[8];
  volatile USBD_ISOOUT_Type ISOOUT;
} NRF_USBD_Type;
# 2659 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile uint32_t TASKS_ACTIVATE;
  volatile uint32_t TASKS_READSTART;

  volatile uint32_t TASKS_WRITESTART;

  volatile uint32_t TASKS_ERASESTART;
  volatile uint32_t TASKS_DEACTIVATE;
  volatile const uint32_t RESERVED[59];
  volatile uint32_t EVENTS_READY;

  volatile const uint32_t RESERVED1[127];
  volatile uint32_t INTEN;
  volatile uint32_t INTENSET;
  volatile uint32_t INTENCLR;
  volatile const uint32_t RESERVED2[125];
  volatile uint32_t ENABLE;

  volatile QSPI_READ_Type READ;
  volatile QSPI_WRITE_Type WRITE;
  volatile QSPI_ERASE_Type ERASE;
  volatile QSPI_PSEL_Type PSEL;
  volatile uint32_t XIPOFFSET;

  volatile uint32_t IFCONFIG0;
  volatile const uint32_t RESERVED3[46];
  volatile uint32_t IFCONFIG1;
  volatile const uint32_t STATUS;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t DPMDUR;

  volatile const uint32_t RESERVED5[3];
  volatile uint32_t ADDRCONF;
  volatile const uint32_t RESERVED6[3];
  volatile uint32_t CINSTRCONF;
  volatile uint32_t CINSTRDAT0;
  volatile uint32_t CINSTRDAT1;
  volatile uint32_t IFTIMING;
} NRF_QSPI_Type;
# 2710 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[1678];
  volatile uint32_t HOST_CRYPTOKEY_SEL;
  volatile const uint32_t RESERVED1[4];
  volatile uint32_t HOST_IOT_KPRTL_LOCK;




  volatile uint32_t HOST_IOT_KDR0;




  volatile uint32_t HOST_IOT_KDR1;


  volatile uint32_t HOST_IOT_KDR2;


  volatile uint32_t HOST_IOT_KDR3;


  volatile uint32_t HOST_IOT_LCS;

} NRF_CC_HOST_RGF_Type;
# 2748 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
typedef struct {
  volatile const uint32_t RESERVED[320];
  volatile uint32_t ENABLE;
} NRF_CRYPTOCELL_Type;
# 2950 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840.h"
}
# 171 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h" 2
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840_bitfields.h" 1
# 172 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h" 2
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/nrf51_to_nrf52840.h" 1
# 173 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h" 2
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52_to_nrf52840.h" 1
# 174 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h" 2
# 195 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h"
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/compiler_abstraction.h" 1
# 195 "lib/nrf5_sdk/modules/nrfx/mdk/compiler_abstraction.h"
    static inline unsigned int gcc_current_sp(void)
    {
        unsigned int stack_pointer = 0;
        __asm__ __volatile__ ("mov %0, sp" : "=r"(stack_pointer));
        return stack_pointer;
    }
# 196 "lib/nrf5_sdk/modules/nrfx/mdk/nrf.h" 2
# 24 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WVariant.h" 2
# 1 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h" 1
# 52 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
# 1 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_svc.h" 1
# 45 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_svc.h"
extern "C" {
# 98 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_svc.h"
}
# 53 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h" 2
# 1 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_error.h" 1
# 51 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_error.h"
extern "C" {
# 84 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_error.h"
}
# 54 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h" 2
# 1 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_error_soc.h" 1
# 55 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_error_soc.h"
extern "C" {
# 79 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_error_soc.h"
}
# 55 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h" 2


extern "C" {
# 135 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
enum NRF_SOC_SVCS
{
  SD_PPI_CHANNEL_ENABLE_GET = (0x20),
  SD_PPI_CHANNEL_ENABLE_SET = (0x20) + 1,
  SD_PPI_CHANNEL_ENABLE_CLR = (0x20) + 2,
  SD_PPI_CHANNEL_ASSIGN = (0x20) + 3,
  SD_PPI_GROUP_TASK_ENABLE = (0x20) + 4,
  SD_PPI_GROUP_TASK_DISABLE = (0x20) + 5,
  SD_PPI_GROUP_ASSIGN = (0x20) + 6,
  SD_PPI_GROUP_GET = (0x20) + 7,
  SD_FLASH_PAGE_ERASE = (0x20) + 8,
  SD_FLASH_WRITE = (0x20) + 9,
  SD_PROTECTED_REGISTER_WRITE = (0x20) + 11,
  SD_MUTEX_NEW = (0x2C),
  SD_MUTEX_ACQUIRE = (0x2C) + 1,
  SD_MUTEX_RELEASE = (0x2C) + 2,
  SD_RAND_APPLICATION_POOL_CAPACITY_GET = (0x2C) + 3,
  SD_RAND_APPLICATION_BYTES_AVAILABLE_GET = (0x2C) + 4,
  SD_RAND_APPLICATION_VECTOR_GET = (0x2C) + 5,
  SD_POWER_MODE_SET = (0x2C) + 6,
  SD_POWER_SYSTEM_OFF = (0x2C) + 7,
  SD_POWER_RESET_REASON_GET = (0x2C) + 8,
  SD_POWER_RESET_REASON_CLR = (0x2C) + 9,
  SD_POWER_POF_ENABLE = (0x2C) + 10,
  SD_POWER_POF_THRESHOLD_SET = (0x2C) + 11,
  SD_POWER_POF_THRESHOLDVDDH_SET = (0x2C) + 12,
  SD_POWER_RAM_POWER_SET = (0x2C) + 13,
  SD_POWER_RAM_POWER_CLR = (0x2C) + 14,
  SD_POWER_RAM_POWER_GET = (0x2C) + 15,
  SD_POWER_GPREGRET_SET = (0x2C) + 16,
  SD_POWER_GPREGRET_CLR = (0x2C) + 17,
  SD_POWER_GPREGRET_GET = (0x2C) + 18,
  SD_POWER_DCDC_MODE_SET = (0x2C) + 19,
  SD_POWER_DCDC0_MODE_SET = (0x2C) + 20,
  SD_APP_EVT_WAIT = (0x2C) + 21,
  SD_CLOCK_HFCLK_REQUEST = (0x2C) + 22,
  SD_CLOCK_HFCLK_RELEASE = (0x2C) + 23,
  SD_CLOCK_HFCLK_IS_RUNNING = (0x2C) + 24,
  SD_RADIO_NOTIFICATION_CFG_SET = (0x2C) + 25,
  SD_ECB_BLOCK_ENCRYPT = (0x2C) + 26,
  SD_ECB_BLOCKS_ENCRYPT = (0x2C) + 27,
  SD_RADIO_SESSION_OPEN = (0x2C) + 28,
  SD_RADIO_SESSION_CLOSE = (0x2C) + 29,
  SD_RADIO_REQUEST = (0x2C) + 30,
  SD_EVT_GET = (0x2C) + 31,
  SD_TEMP_GET = (0x2C) + 32,
  SD_POWER_USBPWRRDY_ENABLE = (0x2C) + 33,
  SD_POWER_USBDETECTED_ENABLE = (0x2C) + 34,
  SD_POWER_USBREMOVED_ENABLE = (0x2C) + 35,
  SD_POWER_USBREGSTATUS_GET = (0x2C) + 36,
  SVC_SOC_LAST = (0x2C) + 37
};


enum NRF_MUTEX_VALUES
{
  NRF_MUTEX_FREE,
  NRF_MUTEX_TAKEN
};


enum NRF_POWER_MODES
{
  NRF_POWER_MODE_CONSTLAT,
  NRF_POWER_MODE_LOWPWR
};



enum NRF_POWER_THRESHOLDS
{
  NRF_POWER_THRESHOLD_V17 = 4UL,
  NRF_POWER_THRESHOLD_V18,
  NRF_POWER_THRESHOLD_V19,
  NRF_POWER_THRESHOLD_V20,
  NRF_POWER_THRESHOLD_V21,
  NRF_POWER_THRESHOLD_V22,
  NRF_POWER_THRESHOLD_V23,
  NRF_POWER_THRESHOLD_V24,
  NRF_POWER_THRESHOLD_V25,
  NRF_POWER_THRESHOLD_V26,
  NRF_POWER_THRESHOLD_V27,
  NRF_POWER_THRESHOLD_V28
};


enum NRF_POWER_THRESHOLDVDDHS
{
  NRF_POWER_THRESHOLDVDDH_V27,
  NRF_POWER_THRESHOLDVDDH_V28,
  NRF_POWER_THRESHOLDVDDH_V29,
  NRF_POWER_THRESHOLDVDDH_V30,
  NRF_POWER_THRESHOLDVDDH_V31,
  NRF_POWER_THRESHOLDVDDH_V32,
  NRF_POWER_THRESHOLDVDDH_V33,
  NRF_POWER_THRESHOLDVDDH_V34,
  NRF_POWER_THRESHOLDVDDH_V35,
  NRF_POWER_THRESHOLDVDDH_V36,
  NRF_POWER_THRESHOLDVDDH_V37,
  NRF_POWER_THRESHOLDVDDH_V38,
  NRF_POWER_THRESHOLDVDDH_V39,
  NRF_POWER_THRESHOLDVDDH_V40,
  NRF_POWER_THRESHOLDVDDH_V41,
  NRF_POWER_THRESHOLDVDDH_V42
};



enum NRF_POWER_DCDC_MODES
{
  NRF_POWER_DCDC_DISABLE,
  NRF_POWER_DCDC_ENABLE
};


enum NRF_RADIO_NOTIFICATION_DISTANCES
{
  NRF_RADIO_NOTIFICATION_DISTANCE_NONE = 0,
  NRF_RADIO_NOTIFICATION_DISTANCE_800US,
  NRF_RADIO_NOTIFICATION_DISTANCE_1740US,
  NRF_RADIO_NOTIFICATION_DISTANCE_2680US,
  NRF_RADIO_NOTIFICATION_DISTANCE_3620US,
  NRF_RADIO_NOTIFICATION_DISTANCE_4560US,
  NRF_RADIO_NOTIFICATION_DISTANCE_5500US
};



enum NRF_RADIO_NOTIFICATION_TYPES
{
  NRF_RADIO_NOTIFICATION_TYPE_NONE = 0,
  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_ACTIVE,
  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_INACTIVE,
  NRF_RADIO_NOTIFICATION_TYPE_INT_ON_BOTH,
};


enum NRF_RADIO_CALLBACK_SIGNAL_TYPE
{
  NRF_RADIO_CALLBACK_SIGNAL_TYPE_START,
  NRF_RADIO_CALLBACK_SIGNAL_TYPE_TIMER0,
  NRF_RADIO_CALLBACK_SIGNAL_TYPE_RADIO,
  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_FAILED,
  NRF_RADIO_CALLBACK_SIGNAL_TYPE_EXTEND_SUCCEEDED
};






enum NRF_RADIO_SIGNAL_CALLBACK_ACTION
{
  NRF_RADIO_SIGNAL_CALLBACK_ACTION_NONE,
  NRF_RADIO_SIGNAL_CALLBACK_ACTION_EXTEND,





  NRF_RADIO_SIGNAL_CALLBACK_ACTION_END,
  NRF_RADIO_SIGNAL_CALLBACK_ACTION_REQUEST_AND_END
};


enum NRF_RADIO_HFCLK_CFG
{
  NRF_RADIO_HFCLK_CFG_XTAL_GUARANTEED,






  NRF_RADIO_HFCLK_CFG_NO_GUARANTEE




};


enum NRF_RADIO_PRIORITY
{
  NRF_RADIO_PRIORITY_HIGH,
  NRF_RADIO_PRIORITY_NORMAL,
};


enum NRF_RADIO_REQUEST_TYPE
{
  NRF_RADIO_REQ_TYPE_EARLIEST,
  NRF_RADIO_REQ_TYPE_NORMAL
};


enum NRF_SOC_EVTS
{
  NRF_EVT_HFCLKSTARTED,
  NRF_EVT_POWER_FAILURE_WARNING,
  NRF_EVT_FLASH_OPERATION_SUCCESS,
  NRF_EVT_FLASH_OPERATION_ERROR,
  NRF_EVT_RADIO_BLOCKED,
  NRF_EVT_RADIO_CANCELED,
  NRF_EVT_RADIO_SIGNAL_CALLBACK_INVALID_RETURN,
  NRF_EVT_RADIO_SESSION_IDLE,
  NRF_EVT_RADIO_SESSION_CLOSED,
  NRF_EVT_POWER_USB_POWER_READY,
  NRF_EVT_POWER_USB_DETECTED,
  NRF_EVT_POWER_USB_REMOVED,
  NRF_EVT_NUMBER_OF_EVTS
};
# 357 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
typedef volatile uint8_t nrf_mutex_t;


typedef struct
{
  uint8_t hfclk;
  uint8_t priority;
  uint32_t length_us;
  uint32_t timeout_us;
} nrf_radio_request_earliest_t;


typedef struct
{
  uint8_t hfclk;
  uint8_t priority;
  uint32_t distance_us;
  uint32_t length_us;
} nrf_radio_request_normal_t;


typedef struct
{
  uint8_t request_type;
  union
  {
    nrf_radio_request_earliest_t earliest;
    nrf_radio_request_normal_t normal;
  } params;
} nrf_radio_request_t;


typedef struct
{
  uint8_t callback_action;
  union
  {
    struct
    {
      nrf_radio_request_t * p_next;
    } request;
    struct
    {
      uint32_t length_us;
    } extend;
  } params;
} nrf_radio_signal_callback_return_param_t;
# 417 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
typedef nrf_radio_signal_callback_return_param_t * (*nrf_radio_signal_callback_t) (uint8_t signal_type);


typedef uint8_t soc_ecb_key_t[(16)];
typedef uint8_t soc_ecb_cleartext_t[(16)];
typedef uint8_t soc_ecb_ciphertext_t[((16))];


typedef struct
{
  soc_ecb_key_t key;
  soc_ecb_cleartext_t cleartext;
  soc_ecb_ciphertext_t ciphertext;
} nrf_ecb_hal_data_t;



typedef struct
{
  soc_ecb_key_t const * p_key;
  soc_ecb_cleartext_t const * p_cleartext;
  soc_ecb_ciphertext_t * p_ciphertext;
} nrf_ecb_hal_data_block_t;
# 452 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 452 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 452 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 452 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 452 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_mutex_new(nrf_mutex_t * p_mutex) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_MUTEX_NEW) : "r0" ); }
# 452 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 452 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 461 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 461 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 461 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 461 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 461 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_mutex_acquire(nrf_mutex_t * p_mutex) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_MUTEX_ACQUIRE) : "r0" ); }
# 461 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 461 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 469 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 469 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 469 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 469 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_mutex_release(nrf_mutex_t * p_mutex) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_MUTEX_RELEASE) : "r0" ); }
# 469 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 469 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 477 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 477 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 477 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 477 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_rand_application_pool_capacity_get(uint8_t * p_pool_capacity) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_RAND_APPLICATION_POOL_CAPACITY_GET) : "r0" ); }
# 477 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 477 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 485 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 485 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 485 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 485 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_rand_application_bytes_available_get(uint8_t * p_bytes_available) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_RAND_APPLICATION_BYTES_AVAILABLE_GET) : "r0" ); }
# 485 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 485 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 495 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 495 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 495 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 495 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 495 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_rand_application_vector_get(uint8_t * p_buff, uint8_t length) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_RAND_APPLICATION_VECTOR_GET) : "r0" ); }
# 495 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 495 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 503 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 503 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 503 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 503 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_reset_reason_get(uint32_t * p_reset_reason) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_RESET_REASON_GET) : "r0" ); }
# 503 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 503 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 511 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 511 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 511 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 511 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_reset_reason_clr(uint32_t reset_reason_clr_msk) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_RESET_REASON_CLR) : "r0" ); }
# 511 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 511 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 520 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 520 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 520 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 520 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 520 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_mode_set(uint8_t power_mode) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_MODE_SET) : "r0" ); }
# 520 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 520 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;






# 526 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 526 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 526 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 526 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_system_off(void) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_SYSTEM_OFF) : "r0" ); }
# 526 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 526 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 537 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 537 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 537 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 537 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 537 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_pof_enable(uint8_t pof_enable) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_POF_ENABLE) : "r0" ); }
# 537 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 537 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 550 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 550 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 550 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 550 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 550 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_usbpwrrdy_enable(uint8_t usbpwrrdy_enable) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_USBPWRRDY_ENABLE) : "r0" ); }
# 550 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 550 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 563 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 563 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 563 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 563 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 563 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_usbdetected_enable(uint8_t usbdetected_enable) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_USBDETECTED_ENABLE) : "r0" ); }
# 563 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 563 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 576 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 576 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 576 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 576 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 576 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_usbremoved_enable(uint8_t usbremoved_enable) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_USBREMOVED_ENABLE) : "r0" ); }
# 576 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 576 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 586 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 586 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 586 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 586 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 586 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_usbregstatus_get(uint32_t * usbregstatus) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_USBREGSTATUS_GET) : "r0" ); }
# 586 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 586 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 599 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 599 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 599 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 599 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 599 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_pof_threshold_set(uint8_t threshold) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_POF_THRESHOLD_SET) : "r0" ); }
# 599 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 599 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 612 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 612 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 612 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 612 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 612 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_pof_thresholdvddh_set(uint8_t threshold) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_POF_THRESHOLDVDDH_SET) : "r0" ); }
# 612 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 612 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 621 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 621 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 621 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 621 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 621 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_ram_power_set(uint8_t index, uint32_t ram_powerset) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_RAM_POWER_SET) : "r0" ); }
# 621 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 621 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 630 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 630 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 630 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 630 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 630 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_ram_power_clr(uint8_t index, uint32_t ram_powerclr) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_RAM_POWER_CLR) : "r0" ); }
# 630 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 630 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 639 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 639 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 639 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 639 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 639 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_ram_power_get(uint8_t index, uint32_t * p_ram_power) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_RAM_POWER_GET) : "r0" ); }
# 639 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 639 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 648 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 648 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 648 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 648 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 648 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_gpregret_set(uint32_t gpregret_id, uint32_t gpregret_msk) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_GPREGRET_SET) : "r0" ); }
# 648 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 648 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 657 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 657 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 657 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 657 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 657 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_gpregret_clr(uint32_t gpregret_id, uint32_t gpregret_msk) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_GPREGRET_CLR) : "r0" ); }
# 657 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 657 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 666 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 666 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 666 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 666 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 666 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_gpregret_get(uint32_t gpregret_id, uint32_t *p_gpregret) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_GPREGRET_GET) : "r0" ); }
# 666 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 666 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 675 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 675 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 675 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 675 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 675 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_dcdc_mode_set(uint8_t dcdc_mode) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_DCDC_MODE_SET) : "r0" ); }
# 675 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 675 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 686 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 686 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 686 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 686 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 686 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_power_dcdc0_mode_set(uint8_t dcdc_mode) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_POWER_DCDC0_MODE_SET) : "r0" ); }
# 686 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 686 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 698 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 698 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 698 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 698 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 698 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_clock_hfclk_request(void) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_CLOCK_HFCLK_REQUEST) : "r0" ); }
# 698 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 698 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 709 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 709 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 709 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 709 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 709 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_clock_hfclk_release(void) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_CLOCK_HFCLK_RELEASE) : "r0" ); }
# 709 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 709 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 720 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 720 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 720 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 720 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 720 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_clock_hfclk_is_running(uint32_t * p_is_running) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_CLOCK_HFCLK_IS_RUNNING) : "r0" ); }
# 720 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 720 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 748 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 748 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 748 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 748 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 748 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_app_evt_wait(void) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_APP_EVT_WAIT) : "r0" ); }
# 748 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 748 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 756 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 756 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 756 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 756 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_channel_enable_get(uint32_t * p_channel_enable) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_CHANNEL_ENABLE_GET) : "r0" ); }
# 756 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 756 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 764 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 764 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 764 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 764 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_channel_enable_set(uint32_t channel_enable_set_msk) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_CHANNEL_ENABLE_SET) : "r0" ); }
# 764 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 764 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;








# 772 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 772 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 772 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 772 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_channel_enable_clr(uint32_t channel_enable_clr_msk) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_CHANNEL_ENABLE_CLR) : "r0" ); }
# 772 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 772 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 783 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 783 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 783 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 783 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 783 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_channel_assign(uint8_t channel_num, const volatile void * evt_endpoint, const volatile void * task_endpoint) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_CHANNEL_ASSIGN) : "r0" ); }
# 783 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 783 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 792 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 792 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 792 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 792 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 792 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_group_task_enable(uint8_t group_num) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_GROUP_TASK_ENABLE) : "r0" ); }
# 792 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 792 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 801 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 801 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 801 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 801 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 801 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_group_task_disable(uint8_t group_num) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_GROUP_TASK_DISABLE) : "r0" ); }
# 801 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 801 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 811 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 811 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 811 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 811 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 811 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_group_assign(uint8_t group_num, uint32_t channel_msk) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_GROUP_ASSIGN) : "r0" ); }
# 811 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 811 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 821 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 821 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 821 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 821 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 821 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ppi_group_get(uint8_t group_num, uint32_t * p_channel_msk) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PPI_GROUP_GET) : "r0" ); }
# 821 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 821 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 852 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 852 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 852 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 852 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 852 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_radio_notification_cfg_set(uint8_t type, uint8_t distance) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_RADIO_NOTIFICATION_CFG_SET) : "r0" ); }
# 852 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 852 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 868 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 868 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 868 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 868 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 868 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ecb_block_encrypt(nrf_ecb_hal_data_t * p_ecb_data) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_ECB_BLOCK_ENCRYPT) : "r0" ); }
# 868 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 868 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 885 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 885 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 885 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 885 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 885 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_ecb_blocks_encrypt(uint8_t block_count, nrf_ecb_hal_data_block_t * p_data_blocks) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_ECB_BLOCKS_ENCRYPT) : "r0" ); }
# 885 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 885 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 896 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 896 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 896 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 896 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 896 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_evt_get(uint32_t * p_evt_id) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_EVT_GET) : "r0" ); }
# 896 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 896 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 907 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 907 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 907 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 907 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 907 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_temp_get(int32_t * p_temp) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_TEMP_GET) : "r0" ); }
# 907 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 907 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 944 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 944 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 944 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 944 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 944 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_flash_write(uint32_t * p_dst, uint32_t const * p_src, uint32_t size) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_FLASH_WRITE) : "r0" ); }
# 944 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 944 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 976 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 976 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 976 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 976 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 976 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_flash_page_erase(uint32_t page_number) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_FLASH_PAGE_ERASE) : "r0" ); }
# 976 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 976 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 1000 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1000 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 1000 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1000 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 1000 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_radio_session_open(nrf_radio_signal_callback_t p_radio_signal_callback) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_RADIO_SESSION_OPEN) : "r0" ); }
# 1000 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 1000 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 1013 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1013 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 1013 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1013 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 1013 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_radio_session_close(void) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_RADIO_SESSION_CLOSE) : "r0" ); }
# 1013 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 1013 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 1050 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1050 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 1050 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1050 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 1050 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_radio_request(nrf_radio_request_t const * p_request) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_RADIO_REQUEST) : "r0" ); }
# 1050 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 1050 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;
# 1071 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1071 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic push
# 1071 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"

# 1071 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 1071 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_protected_register_write(volatile uint32_t * p_register, uint32_t value) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_PROTECTED_REGISTER_WRITE) : "r0" ); }
# 1071 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
#pragma GCC diagnostic pop
# 1071 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_soc.h"
 ;




}
# 25 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WVariant.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h" 1
# 52 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_svc.h" 1
# 53 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_error.h" 1
# 54 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_error_sdm.h" 1
# 55 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_error_sdm.h"
extern "C" {







}
# 55 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_soc.h" 1
# 56 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h" 2


extern "C" {
# 191 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
enum NRF_SD_SVCS
{
  SD_SOFTDEVICE_ENABLE = 0x10,
  SD_SOFTDEVICE_DISABLE,
  SD_SOFTDEVICE_IS_ENABLED,
  SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET,
  SVC_SDM_LAST
};
# 238 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
typedef struct
{
  uint8_t source;
  uint8_t rc_ctiv;






  uint8_t rc_temp_ctiv;
# 266 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
  uint8_t accuracy;

} nrf_clock_lf_cfg_t;
# 290 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
typedef void (*nrf_fault_handler_t)(uint32_t id, uint32_t pc, uint32_t info);
# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"

# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic push
# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"

# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_softdevice_enable(nrf_clock_lf_cfg_t const * p_clock_lf_cfg, nrf_fault_handler_t fault_handler) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_SOFTDEVICE_ENABLE) : "r0" ); }
# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic pop
# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 ;
# 342 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"

# 342 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic push
# 342 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"

# 342 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 342 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_softdevice_disable(void) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_SOFTDEVICE_DISABLE) : "r0" ); }
# 342 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic pop
# 342 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 ;








# 350 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic push
# 350 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"

# 350 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 350 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_softdevice_is_enabled(uint8_t * p_softdevice_enabled) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_SOFTDEVICE_IS_ENABLED) : "r0" ); }
# 350 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic pop
# 350 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 ;
# 360 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"

# 360 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic push
# 360 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"

# 360 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic ignored "-Wreturn-type"
# 360 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 __attribute__((naked)) __attribute__((unused)) static uint32_t sd_softdevice_vector_table_base_set(uint32_t address) { __asm( "svc %0\n" "bx r14" : : "I" ((uint16_t) SD_SOFTDEVICE_VECTOR_TABLE_BASE_SET) : "r0" ); }
# 360 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
#pragma GCC diagnostic pop
# 360 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/softdevice/s140_nrf52_7.3.0_API/include/nrf_sdm.h"
 ;




}
# 26 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WVariant.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h" 1
# 35 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
# 1 "lib/nrf5_sdk/modules/nrfx/nrfx.h" 1
# 44 "lib/nrf5_sdk/modules/nrfx/nrfx.h"
# 1 "lib/nrf5_sdk/modules/nrfx/templates/nRF52840/nrfx_config.h" 1
# 45 "lib/nrf5_sdk/modules/nrfx/nrfx.h" 2
# 1 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h" 1
# 45 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 46 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h" 2



# 1 "lib/nrf5_sdk/modules/nrfx/mdk/nrf_peripherals.h" 1
# 63 "lib/nrf5_sdk/modules/nrfx/mdk/nrf_peripherals.h"
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/nrf52840_peripherals.h" 1
# 64 "lib/nrf5_sdk/modules/nrfx/mdk/nrf_peripherals.h" 2
# 50 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h" 2


extern "C" {
# 224 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h"
typedef void (* nrfx_irq_handler_t)(void);


typedef enum
{
    NRFX_DRV_STATE_UNINITIALIZED,
    NRFX_DRV_STATE_INITIALIZED,
    NRFX_DRV_STATE_POWERED_ON,
} nrfx_drv_state_t;
# 247 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h"
static inline bool nrfx_is_in_ram(void const * p_object);
# 261 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h"
static inline bool nrfx_is_word_aligned(void const * p_object);
# 270 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h"
static inline IRQn_Type nrfx_get_irq_number(void const * p_reg);
# 286 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h"
static inline uint32_t nrfx_bitpos_to_event(uint32_t bit);
# 302 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_common.h"
static inline uint32_t nrfx_event_to_bitpos(uint32_t event);




static inline bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
}

static inline bool nrfx_is_word_aligned(void const * p_object)
{
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

static inline IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)(uint8_t)((uint32_t)(p_reg) >> 12);
}

static inline uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
}

static inline uint32_t nrfx_event_to_bitpos(uint32_t event)
{
    static const uint32_t event_reg_offset = 0x100u;
    return (event - event_reg_offset) / sizeof(uint32_t);
}






}
# 46 "lib/nrf5_sdk/modules/nrfx/nrfx.h" 2
# 1 "lib/nrf5_sdk/modules/nrfx/templates/nrfx_glue.h" 1
# 51 "lib/nrf5_sdk/modules/nrfx/templates/nrfx_glue.h"
extern "C" {
# 264 "lib/nrf5_sdk/modules/nrfx/templates/nrfx_glue.h"
}
# 47 "lib/nrf5_sdk/modules/nrfx/nrfx.h" 2
# 1 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_errors.h" 1
# 61 "lib/nrf5_sdk/modules/nrfx/drivers/nrfx_errors.h"
typedef enum {
    NRFX_SUCCESS = (0x0BAD0000 + 0),
    NRFX_ERROR_INTERNAL = (0x0BAD0000 + 1),
    NRFX_ERROR_NO_MEM = (0x0BAD0000 + 2),
    NRFX_ERROR_NOT_SUPPORTED = (0x0BAD0000 + 3),
    NRFX_ERROR_INVALID_PARAM = (0x0BAD0000 + 4),
    NRFX_ERROR_INVALID_STATE = (0x0BAD0000 + 5),
    NRFX_ERROR_INVALID_LENGTH = (0x0BAD0000 + 6),
    NRFX_ERROR_TIMEOUT = (0x0BAD0000 + 7),
    NRFX_ERROR_FORBIDDEN = (0x0BAD0000 + 8),
    NRFX_ERROR_NULL = (0x0BAD0000 + 9),
    NRFX_ERROR_INVALID_ADDR = (0x0BAD0000 + 10),
    NRFX_ERROR_BUSY = (0x0BAD0000 + 11),
    NRFX_ERROR_ALREADY_INITIALIZED = (0x0BAD0000 + 12),

    NRFX_ERROR_DRV_TWI_ERR_OVERRUN = ((0x0BAD0000 + 0x10000) + 0),
    NRFX_ERROR_DRV_TWI_ERR_ANACK = ((0x0BAD0000 + 0x10000) + 1),
    NRFX_ERROR_DRV_TWI_ERR_DNACK = ((0x0BAD0000 + 0x10000) + 2)
} nrfx_err_t;
# 48 "lib/nrf5_sdk/modules/nrfx/nrfx.h" 2
# 36 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h" 2


extern "C" {
# 72 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
typedef enum
{
    NRF_GPIO_PIN_DIR_INPUT = (0UL),
    NRF_GPIO_PIN_DIR_OUTPUT = (1UL)
} nrf_gpio_pin_dir_t;


typedef enum
{
    NRF_GPIO_PIN_INPUT_CONNECT = (0UL),
    NRF_GPIO_PIN_INPUT_DISCONNECT = (1UL)
} nrf_gpio_pin_input_t;





typedef enum
{
    NRF_GPIO_PIN_NOPULL = (0UL),
    NRF_GPIO_PIN_PULLDOWN = (1UL),
    NRF_GPIO_PIN_PULLUP = (3UL),
} nrf_gpio_pin_pull_t;


typedef enum
{
    NRF_GPIO_PIN_S0S1 = (0UL),
    NRF_GPIO_PIN_H0S1 = (1UL),
    NRF_GPIO_PIN_S0H1 = (2UL),
    NRF_GPIO_PIN_H0H1 = (3UL),
    NRF_GPIO_PIN_D0S1 = (4UL),
    NRF_GPIO_PIN_D0H1 = (5UL),
    NRF_GPIO_PIN_S0D1 = (6UL),
    NRF_GPIO_PIN_H0D1 = (7UL),
# 128 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
} nrf_gpio_pin_drive_t;


typedef enum
{
    NRF_GPIO_PIN_NOSENSE = (0UL),
    NRF_GPIO_PIN_SENSE_LOW = (3UL),
    NRF_GPIO_PIN_SENSE_HIGH = (2UL),
} nrf_gpio_pin_sense_t;
# 158 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_range_cfg_output(uint32_t pin_range_start, uint32_t pin_range_end);
# 171 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_range_cfg_input(uint32_t pin_range_start,
                                                uint32_t pin_range_end,
                                                nrf_gpio_pin_pull_t pull_config);
# 188 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_cfg(
    uint32_t pin_number,
    nrf_gpio_pin_dir_t dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense);
# 204 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_cfg_output(uint32_t pin_number);
# 215 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config);






NRF_STATIC_INLINE void nrf_gpio_cfg_default(uint32_t pin_number);







NRF_STATIC_INLINE void nrf_gpio_cfg_watcher(uint32_t pin_number);






NRF_STATIC_INLINE void nrf_gpio_input_disconnect(uint32_t pin_number);
# 248 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_input(uint32_t pin_number,
                                                nrf_gpio_pin_pull_t pull_config,
                                                nrf_gpio_pin_sense_t sense_config);







NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number,
                                              nrf_gpio_pin_sense_t sense_config);







NRF_STATIC_INLINE void nrf_gpio_pin_dir_set(uint32_t pin_number, nrf_gpio_pin_dir_t direction);
# 276 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number);
# 285 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number);
# 294 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_pin_toggle(uint32_t pin_number);
# 306 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value);
# 317 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number);
# 326 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_out_read(uint32_t pin_number);
# 335 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE nrf_gpio_pin_sense_t nrf_gpio_pin_sense_get(uint32_t pin_number);
# 344 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number);
# 353 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE nrf_gpio_pin_input_t nrf_gpio_pin_input_get(uint32_t pin_number);
# 362 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE nrf_gpio_pin_pull_t nrf_gpio_pin_pull_get(uint32_t pin_number);







NRF_STATIC_INLINE void nrf_gpio_port_dir_output_set(NRF_GPIO_Type * p_reg, uint32_t out_mask);







NRF_STATIC_INLINE void nrf_gpio_port_dir_input_set(NRF_GPIO_Type * p_reg, uint32_t in_mask);







NRF_STATIC_INLINE void nrf_gpio_port_dir_write(NRF_GPIO_Type * p_reg, uint32_t dir_mask);
# 395 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE uint32_t nrf_gpio_port_dir_read(NRF_GPIO_Type const * p_reg);
# 404 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg);
# 413 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE uint32_t nrf_gpio_port_out_read(NRF_GPIO_Type const * p_reg);







NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value);







NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask);







NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask);
# 446 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_ports_read(uint32_t start_port,
                                           uint32_t length,
                                           uint32_t * p_masks);
# 458 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_latches_read(uint32_t start_port,
                                             uint32_t length,
                                             uint32_t * p_masks);
# 469 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE void nrf_gpio_latches_read_and_clear(uint32_t start_port,
                                                       uint32_t length,
                                                       uint32_t * p_masks);
# 480 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_latch_get(uint32_t pin_number);






NRF_STATIC_INLINE void nrf_gpio_pin_latch_clear(uint32_t pin_number);
# 509 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    ;



    if (*p_pin < 32)
    {
        return ((NRF_GPIO_Type*) 0x50000000UL);
    }
    else
    {
        *p_pin = *p_pin & (32 - 1);
        return ((NRF_GPIO_Type*) 0x50000300UL);
    }

}


NRF_STATIC_INLINE void nrf_gpio_range_cfg_output(uint32_t pin_range_start, uint32_t pin_range_end)
{

    for (; pin_range_start <= pin_range_end; pin_range_start++)
    {
        nrf_gpio_cfg_output(pin_range_start);
    }
}


NRF_STATIC_INLINE void nrf_gpio_range_cfg_input(uint32_t pin_range_start,
                                                uint32_t pin_range_end,
                                                nrf_gpio_pin_pull_t pull_config)
{

    for (; pin_range_start <= pin_range_end; pin_range_start++)
    {
        nrf_gpio_cfg_input(pin_range_start, pull_config);
    }
}


NRF_STATIC_INLINE void nrf_gpio_cfg(
    uint32_t pin_number,
    nrf_gpio_pin_dir_t dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << (0UL))
                               | ((uint32_t)input << (1UL))
                               | ((uint32_t)pull << (2UL))
                               | ((uint32_t)drive << (8UL))
                               | ((uint32_t)sense << (16UL));
}


NRF_STATIC_INLINE void nrf_gpio_cfg_output(uint32_t pin_number)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_OUTPUT,
        NRF_GPIO_PIN_INPUT_DISCONNECT,
        NRF_GPIO_PIN_NOPULL,
        NRF_GPIO_PIN_S0S1,
        NRF_GPIO_PIN_NOSENSE);
}


NRF_STATIC_INLINE void nrf_gpio_cfg_input(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_INPUT,
        NRF_GPIO_PIN_INPUT_CONNECT,
        pull_config,
        NRF_GPIO_PIN_S0S1,
        NRF_GPIO_PIN_NOSENSE);
}


NRF_STATIC_INLINE void nrf_gpio_cfg_default(uint32_t pin_number)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_INPUT,
        NRF_GPIO_PIN_INPUT_DISCONNECT,
        NRF_GPIO_PIN_NOPULL,
        NRF_GPIO_PIN_S0S1,
        NRF_GPIO_PIN_NOSENSE);
}


NRF_STATIC_INLINE void nrf_gpio_cfg_watcher(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    uint32_t cnf = reg->PIN_CNF[pin_number] & ~(0x1UL << (1UL));

    reg->PIN_CNF[pin_number] = cnf | ((0UL) << (1UL));
}


NRF_STATIC_INLINE void nrf_gpio_input_disconnect(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    uint32_t cnf = reg->PIN_CNF[pin_number] & ~(0x1UL << (1UL));

    reg->PIN_CNF[pin_number] = cnf | ((1UL) << (1UL));
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_input(uint32_t pin_number,
                                                nrf_gpio_pin_pull_t pull_config,
                                                nrf_gpio_pin_sense_t sense_config)
{
    nrf_gpio_cfg(
        pin_number,
        NRF_GPIO_PIN_DIR_INPUT,
        NRF_GPIO_PIN_INPUT_CONNECT,
        pull_config,
        NRF_GPIO_PIN_S0S1,
        sense_config);
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    uint32_t cnf = reg->PIN_CNF[pin_number] & ~(0x3UL << (16UL));

    reg->PIN_CNF[pin_number] = cnf | (sense_config << (16UL));
}


NRF_STATIC_INLINE void nrf_gpio_pin_dir_set(uint32_t pin_number, nrf_gpio_pin_dir_t direction)
{
    if (direction == NRF_GPIO_PIN_DIR_INPUT)
    {
        nrf_gpio_cfg(
            pin_number,
            NRF_GPIO_PIN_DIR_INPUT,
            NRF_GPIO_PIN_INPUT_CONNECT,
            NRF_GPIO_PIN_NOPULL,
            NRF_GPIO_PIN_S0S1,
            NRF_GPIO_PIN_NOSENSE);
    }
    else
    {
        NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
        reg->DIRSET = (1UL << pin_number);
    }
}


NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}


NRF_STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
}


NRF_STATIC_INLINE void nrf_gpio_pin_toggle(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t pins_state = reg->OUT;

    reg->OUTSET = (~pins_state & (1UL << pin_number));
    reg->OUTCLR = (pins_state & (1UL << pin_number));
}


NRF_STATIC_INLINE void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value)
{
    if (value == 0)
    {
        nrf_gpio_pin_clear(pin_number);
    }
    else
    {
        nrf_gpio_pin_set(pin_number);
    }
}


NRF_STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
}


NRF_STATIC_INLINE uint32_t nrf_gpio_pin_out_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
}


NRF_STATIC_INLINE nrf_gpio_pin_sense_t nrf_gpio_pin_sense_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
                                   (0x3UL << (16UL))) >> (16UL));
}


NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
                                 (0x1UL << (0UL))) >> (0UL));
}

NRF_STATIC_INLINE nrf_gpio_pin_input_t nrf_gpio_pin_input_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_input_t)((reg->PIN_CNF[pin_number] &
                                   (0x1UL << (1UL))) >> (1UL));
}

NRF_STATIC_INLINE nrf_gpio_pin_pull_t nrf_gpio_pin_pull_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_pull_t)((reg->PIN_CNF[pin_number] &
                                  (0x3UL << (2UL))) >> (2UL));
}


NRF_STATIC_INLINE void nrf_gpio_port_dir_output_set(NRF_GPIO_Type * p_reg, uint32_t out_mask)
{
    p_reg->DIRSET = out_mask;
}


NRF_STATIC_INLINE void nrf_gpio_port_dir_input_set(NRF_GPIO_Type * p_reg, uint32_t in_mask)
{
    p_reg->DIRCLR = in_mask;
}


NRF_STATIC_INLINE void nrf_gpio_port_dir_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->DIR = value;
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_dir_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->DIR;
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_out_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->OUT;
}


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
    p_reg->OUT = value;
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
}


NRF_STATIC_INLINE void nrf_gpio_ports_read(uint32_t start_port,
                                           uint32_t length,
                                           uint32_t * p_masks)
{
    NRF_GPIO_Type * gpio_regs[2] = {((NRF_GPIO_Type*) 0x50000000UL), ((NRF_GPIO_Type*) 0x50000300UL)};

    ;
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = nrf_gpio_port_in_read(gpio_regs[i]);
        p_masks++;
    }
}



NRF_STATIC_INLINE void nrf_gpio_latches_read(uint32_t start_port,
                                             uint32_t length,
                                             uint32_t * p_masks)
{
    NRF_GPIO_Type * gpio_regs[2] = {((NRF_GPIO_Type*) 0x50000000UL), ((NRF_GPIO_Type*) 0x50000300UL)};
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = gpio_regs[i]->LATCH;
        p_masks++;
    }
}

NRF_STATIC_INLINE void nrf_gpio_latches_read_and_clear(uint32_t start_port,
                                                       uint32_t length,
                                                       uint32_t * p_masks)
{
    NRF_GPIO_Type * gpio_regs[2] = {((NRF_GPIO_Type*) 0x50000000UL), ((NRF_GPIO_Type*) 0x50000300UL)};
    uint32_t i;

    for (i = start_port; i < (start_port + length); i++)
    {
        *p_masks = gpio_regs[i]->LATCH;


        gpio_regs[i]->LATCH = *p_masks;

        p_masks++;
    }
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_latch_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (reg->LATCH & (1 << pin_number)) ? 1 : 0;
}


NRF_STATIC_INLINE void nrf_gpio_pin_latch_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->LATCH = (1 << pin_number);
}
# 892 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_gpio.h"
}
# 27 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WVariant.h" 2


extern "C" {


extern const uint32_t g_ADigitalPinMap[] ;


}
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2


}



# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 1
# 41 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 1 3
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/math.h" 1 3
# 44 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_func.h" 1
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_func.h"
  extern "C++" {

  namespace ADAFRUIT_DETAIL
  {
      template <typename T, size_t N>
      constexpr size_t arrcount_fails_if_not_array(T const (&)[N]) noexcept
      {
          return N;
      }
  }
  }
  extern "C" {
# 152 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_func.h"
const char* dbg_err_str(int32_t err_id);
# 237 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_func.h"
static inline bool mem_test_zero(void const* buffer, uint32_t size)
{
  uint8_t const* p_mem = (uint8_t const*) buffer;
  for(uint32_t i=0; i<size; i++) if (p_mem[i] != 0) return false;
  return true;
}


static inline uint8_t min8 (uint8_t x, uint8_t y) { return (x < y) ? x : y; }
static inline uint16_t min16(uint16_t x, uint16_t y) { return (x < y) ? x : y; }
static inline uint32_t min32(uint32_t x, uint32_t y) { return (x < y) ? x : y; }

static inline uint8_t max8 (uint8_t x, uint8_t y) { return (x > y) ? x : y; }
static inline uint16_t max16(uint16_t x, uint16_t y) { return (x > y) ? x : y; }
static inline uint32_t max32(uint32_t x, uint32_t y) { return (x > y) ? x : y; }



static inline uint32_t u32_from_u8(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4)
{
  return (b1 << 24) + (b2 << 16) + (b3 << 8) + b4;
}

static inline uint16_t u32_high_u16(uint32_t u32)
{
  return (uint16_t) ((u32 >> 16) & 0xffff);
}

static inline uint16_t u32_low_u16(uint32_t u32)
{
  return (uint16_t) (u32 & 0xffff);
}

static inline uint16_t u16_from_u8(uint8_t b1, uint8_t b2)
{
  return (b1 << 8) + b2;
}

static inline uint8_t u16_high_u8(uint16_t u16)
{
  return (uint8_t) ((u16 >> 8) & 0x00ff);
}

static inline uint8_t u16_low_u8(uint16_t u16)
{
  return (uint8_t) (u16 & 0x00ff);
}


static inline uint32_t align32 (uint32_t value)
{
  return (value & 0xFFFFFFE0UL);
}

static inline uint32_t align16 (uint32_t value)
{
  return (value & 0xFFFFFFF0UL);
}

static inline uint32_t align4 (uint32_t value)
{
  return (value & 0xFFFFFFFCUL);
}

static inline uint32_t align_n (uint32_t alignment, uint32_t value)
{
  return value & (~(alignment-1));
}

static inline uint32_t align4k (uint32_t value)
{
  return (value & 0xFFFFF000UL);
}

static inline uint32_t offset4k(uint32_t value)
{
  return (value & 0xFFFUL);
}


static inline bool is_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
}


 }
# 46 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2

# 1 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h" 1
# 35 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 36 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h" 2
# 53 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
extern "C" {



# 1 "lib/nrf5_sdk/external/freertos/config/FreeRTOSConfig.h" 1
# 36 "lib/nrf5_sdk/external/freertos/config/FreeRTOSConfig.h"
# 1 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h" 1
# 53 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h"
# 1 "lib/nrf5_sdk/modules/nrfx/mdk/compiler_abstraction.h" 1
# 54 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h" 2



# 1 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h" 1
# 65 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
extern "C" {
# 119 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
typedef struct
{
  uint32_t volatile __irq_masks[(2)];
  uint32_t volatile __cr_flag;
} nrf_nvic_state_t;



extern nrf_nvic_state_t nrf_nvic_state;
# 138 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline int __sd_nvic_irq_disable(void);



static inline void __sd_nvic_irq_enable(void);






static inline uint32_t __sd_nvic_app_accessible_irq(IRQn_Type IRQn);






static inline uint32_t __sd_nvic_is_app_accessible_priority(uint32_t priority);
# 174 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_EnableIRQ(IRQn_Type IRQn);
# 186 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_DisableIRQ(IRQn_Type IRQn);
# 199 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_GetPendingIRQ(IRQn_Type IRQn, uint32_t * p_pending_irq);
# 211 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_SetPendingIRQ(IRQn_Type IRQn);
# 223 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_ClearPendingIRQ(IRQn_Type IRQn);
# 238 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_SetPriority(IRQn_Type IRQn, uint32_t priority);
# 251 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_GetPriority(IRQn_Type IRQn, uint32_t * p_priority);






static inline uint32_t sd_nvic_SystemReset(void);
# 271 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_critical_region_enter(uint8_t * p_is_nested_critical_region);
# 282 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_nvic.h"
static inline uint32_t sd_nvic_critical_region_exit(uint8_t is_nested_critical_region);





static inline int __sd_nvic_irq_disable(void)
{
  int pm = __get_PRIMASK();
  __disable_irq();
  return pm;
}

static inline void __sd_nvic_irq_enable(void)
{
  __enable_irq();
}

static inline uint32_t __sd_nvic_app_accessible_irq(IRQn_Type IRQn)
{
  if (IRQn < 32)
  {
    return ((1UL<<IRQn) & (~((uint32_t)( (1U << POWER_CLOCK_IRQn) | (1U << RADIO_IRQn) | (1U << RTC0_IRQn) | (1U << TIMER0_IRQn) | (1U << RNG_IRQn) | (1U << ECB_IRQn) | (1U << CCM_AAR_IRQn) | (1U << TEMP_IRQn) | (1U << (30)) | (1U << (uint32_t)SWI5_EGU5_IRQn) )))) != 0;
  }
  else if (IRQn < 64)
  {
    return ((1UL<<(IRQn-32)) & (~((uint32_t)0))) != 0;
  }
  else
  {
    return 1;
  }
}

static inline uint32_t __sd_nvic_is_app_accessible_priority(uint32_t priority)
{
  if( (priority >= (1 << 3))
   || (((1 << priority) & ((uint8_t)~((uint8_t)( (1U << 0) | (1U << 1) | (1U << 4) )))) == 0)
    )
  {
    return 0;
  }
  return 1;
}


static inline uint32_t sd_nvic_EnableIRQ(IRQn_Type IRQn)
{
  if (!__sd_nvic_app_accessible_irq(IRQn))
  {
    return ((0x2000) + 1);
  }
  if (!__sd_nvic_is_app_accessible_priority(__NVIC_GetPriority(IRQn)))
  {
    return ((0x2000) + 2);
  }

  if (nrf_nvic_state.__cr_flag)
  {
    nrf_nvic_state.__irq_masks[(uint32_t)((int32_t)IRQn) >> 5] |= (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));
  }
  else
  {
    __NVIC_EnableIRQ(IRQn);
  }
  return ((0x0) + 0);
}

static inline uint32_t sd_nvic_DisableIRQ(IRQn_Type IRQn)
{
  if (!__sd_nvic_app_accessible_irq(IRQn))
  {
    return ((0x2000) + 1);
  }

  if (nrf_nvic_state.__cr_flag)
  {
    nrf_nvic_state.__irq_masks[(uint32_t)((int32_t)IRQn) >> 5] &= ~(1UL << ((uint32_t)(IRQn) & 0x1F));
  }
  else
  {
    __NVIC_DisableIRQ(IRQn);
  }

  return ((0x0) + 0);
}

static inline uint32_t sd_nvic_GetPendingIRQ(IRQn_Type IRQn, uint32_t * p_pending_irq)
{
  if (__sd_nvic_app_accessible_irq(IRQn))
  {
    *p_pending_irq = __NVIC_GetPendingIRQ(IRQn);
    return ((0x0) + 0);
  }
  else
  {
    return ((0x2000) + 1);
  }
}

static inline uint32_t sd_nvic_SetPendingIRQ(IRQn_Type IRQn)
{
  if (__sd_nvic_app_accessible_irq(IRQn))
  {
    __NVIC_SetPendingIRQ(IRQn);
    return ((0x0) + 0);
  }
  else
  {
    return ((0x2000) + 1);
  }
}

static inline uint32_t sd_nvic_ClearPendingIRQ(IRQn_Type IRQn)
{
  if (__sd_nvic_app_accessible_irq(IRQn))
  {
    __NVIC_ClearPendingIRQ(IRQn);
    return ((0x0) + 0);
  }
  else
  {
    return ((0x2000) + 1);
  }
}

static inline uint32_t sd_nvic_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if (!__sd_nvic_app_accessible_irq(IRQn))
  {
    return ((0x2000) + 1);
  }

  if (!__sd_nvic_is_app_accessible_priority(priority))
  {
    return ((0x2000) + 2);
  }

  __NVIC_SetPriority(IRQn, (uint32_t)priority);
  return ((0x0) + 0);
}

static inline uint32_t sd_nvic_GetPriority(IRQn_Type IRQn, uint32_t * p_priority)
{
  if (__sd_nvic_app_accessible_irq(IRQn))
  {
    *p_priority = (__NVIC_GetPriority(IRQn) & 0xFF);
    return ((0x0) + 0);
  }
  else
  {
    return ((0x2000) + 1);
  }
}

static inline uint32_t sd_nvic_SystemReset(void)
{
  __NVIC_SystemReset();
  return ((0x2000) + 3);
}

static inline uint32_t sd_nvic_critical_region_enter(uint8_t * p_is_nested_critical_region)
{
  int was_masked = __sd_nvic_irq_disable();
  if (!nrf_nvic_state.__cr_flag)
  {
    nrf_nvic_state.__cr_flag = 1;
    nrf_nvic_state.__irq_masks[0] = ( ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0] & (~((uint32_t)( (1U << POWER_CLOCK_IRQn) | (1U << RADIO_IRQn) | (1U << RTC0_IRQn) | (1U << TIMER0_IRQn) | (1U << RNG_IRQn) | (1U << ECB_IRQn) | (1U << CCM_AAR_IRQn) | (1U << TEMP_IRQn) | (1U << (30)) | (1U << (uint32_t)SWI5_EGU5_IRQn) ))) );
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0] = (~((uint32_t)( (1U << POWER_CLOCK_IRQn) | (1U << RADIO_IRQn) | (1U << RTC0_IRQn) | (1U << TIMER0_IRQn) | (1U << RNG_IRQn) | (1U << ECB_IRQn) | (1U << CCM_AAR_IRQn) | (1U << TEMP_IRQn) | (1U << (30)) | (1U << (uint32_t)SWI5_EGU5_IRQn) )));
    nrf_nvic_state.__irq_masks[1] = ( ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[1] & (~((uint32_t)0)) );
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[1] = (~((uint32_t)0));
    *p_is_nested_critical_region = 0;
  }
  else
  {
    *p_is_nested_critical_region = 1;
  }
  if (!was_masked)
  {
    __sd_nvic_irq_enable();
  }
  return ((0x0) + 0);
}

static inline uint32_t sd_nvic_critical_region_exit(uint8_t is_nested_critical_region)
{
  if (nrf_nvic_state.__cr_flag && (is_nested_critical_region == 0))
  {
    int was_masked = __sd_nvic_irq_disable();
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0] = nrf_nvic_state.__irq_masks[0];
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[1] = nrf_nvic_state.__irq_masks[1];
    nrf_nvic_state.__cr_flag = 0;
    if (!was_masked)
    {
      __sd_nvic_irq_enable();
    }
  }

  return ((0x0) + 0);
}




}
# 58 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h" 2

# 1 "lib/nrf5_sdk/components/libraries/util/nrf_assert.h" 1
# 51 "lib/nrf5_sdk/components/libraries/util/nrf_assert.h"
extern "C" {
# 75 "lib/nrf5_sdk/components/libraries/util/nrf_assert.h"
void assert_nrf_callback(uint16_t line_num, const uint8_t *file_name);
# 119 "lib/nrf5_sdk/components/libraries/util/nrf_assert.h"
}
# 60 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h" 2
# 1 "lib/nrf5_sdk/components/libraries/util/app_error.h" 1
# 58 "lib/nrf5_sdk/components/libraries/util/app_error.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 1 3
# 36 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 37 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 2 3



# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h" 1 3 4
# 40 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h" 3 4

# 40 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 2 3





typedef __gnuc_va_list va_list;
# 61 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 1 3
# 28 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 3
typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
# 62 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 63 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 2 3




# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/endian.h" 1 3





# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/_endian.h" 1 3
# 7 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/endian.h" 2 3
# 68 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/select.h" 1 3
# 25 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/select.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_sigset.h" 1 3
# 41 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_sigset.h" 3
typedef unsigned long __sigset_t;
# 26 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_timeval.h" 1 3
# 35 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_timeval.h" 3
typedef __suseconds_t suseconds_t;




typedef __int_least64_t time_t;
# 52 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_timeval.h" 3
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
# 27 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/timespec.h" 1 3
# 38 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/timespec.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_timespec.h" 1 3
# 45 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_timespec.h" 3
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
# 39 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/timespec.h" 2 3
# 58 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/timespec.h" 3
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 28 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/select.h" 2 3



typedef __sigset_t sigset_t;
# 45 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/select.h" 3
typedef unsigned long fd_mask;







typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 71 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/select.h" 3
extern "C" {

int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout)
                                                   ;

int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set)

                           ;


}
# 69 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 2 3




typedef __uint32_t in_addr_t;




typedef __uint16_t in_port_t;
# 87 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 3
typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long clock_t;
# 135 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t;




typedef __ino_t ino_t;
# 173 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 3
typedef __off_t off_t;



typedef __dev_t dev_t;



typedef __uid_t uid_t;



typedef __gid_t gid_t;




typedef __pid_t pid_t;




typedef __key_t key_t;




typedef _ssize_t ssize_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t;
# 236 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 3
typedef __int64_t sbintime_t;


# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_pthreadtypes.h" 1 3
# 23 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_pthreadtypes.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/sched.h" 1 3
# 27 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/sched.h" 3
extern "C" {
# 48 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/sched.h" 3
struct sched_param {
  int sched_priority;
# 61 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/sched.h" 3
};


}
# 24 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_pthreadtypes.h" 2 3
# 32 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_pthreadtypes.h" 3
typedef __uint32_t pthread_t;
# 61 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_pthreadtypes.h" 3
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;





  int detachstate;
} pthread_attr_t;
# 154 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_pthreadtypes.h" 3
typedef __uint32_t pthread_mutex_t;

typedef struct {
  int is_initialized;
# 168 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/_pthreadtypes.h" 3
  int recursive;
} pthread_mutexattr_t;






typedef __uint32_t pthread_cond_t;



typedef struct {
  int is_initialized;
  clock_t clock;



} pthread_condattr_t;



typedef __uint32_t pthread_key_t;

typedef struct {
  int is_initialized;
  int init_executed;
} pthread_once_t;
# 240 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/machine/types.h" 1 3
# 241 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/types.h" 2 3
# 62 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 2 3

extern "C" {


typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/sys/stdio.h" 1 3
# 80 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 2 3
# 181 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
char * ctermid (char *);




FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *);

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int printf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int scanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int sscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int vfprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int vsprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void * , size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *, fpos_t *);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char * _name, const char * _type);
int sprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int remove (const char *);
int rename (const char *, const char *);
# 257 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);







int snprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vsnprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vfscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
# 284 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
int asiprintf (char **, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
char * asniprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * asnprintf (char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;

int diprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

int fiprintf (FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int fiscanf (FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int iprintf (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2)))
                                                            ;
int iscanf (const char *, ...) __attribute__ ((__format__ (__scanf__, 1, 2)))
                                                           ;
int siprintf (char *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int siscanf (const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int sniprintf (char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int vasiprintf (char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int vdiprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiprintf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vfiscanf (FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int viprintf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 1, 0)))
                                                            ;
int viscanf (const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 1, 0)))
                                                           ;
int vsiprintf (char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int vsiscanf (const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
# 339 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
# 374 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
int dprintf (int, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;

FILE * fmemopen (void *, size_t, const char *);


FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;



int renameat (int, const char *, int, const char *);
# 396 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
int _asiprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
char * _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _asprintf_r (struct _reent *, char **, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _diprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _dprintf_r (struct _reent *, int, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *, int, FILE *);
char * _fgets_unlocked_r (struct _reent *, char *, int, FILE *);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
FILE * _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
FILE * _freopen_r (struct _reent *, const char *, const char *, FILE *);
int _fprintf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *, FILE *);
int _fputs_unlocked_r (struct _reent *, const char *, FILE *);
size_t _fread_r (struct _reent *, void * , size_t _size, size_t _n, FILE *);
size_t _fread_unlocked_r (struct _reent *, void * , size_t _size, size_t _n, FILE *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void * , size_t _size, size_t _n, FILE *);
size_t _fwrite_unlocked_r (struct _reent *, const void * , size_t _size, size_t _n, FILE *);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _iscanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__printf__, 2, 3)))
                                                            ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new)
                                          ;
int _scanf_r (struct _reent *, const char *, ...) __attribute__ ((__format__ (__scanf__, 2, 3)))
                                                           ;
int _siprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _siscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _snprintf_r (struct _reent *, char *, size_t, const char *, ...) __attribute__ ((__format__ (__printf__, 4, 5)))
                                                            ;
int _sprintf_r (struct _reent *, char *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4)))
                                                            ;
int _sscanf_r (struct _reent *, const char *, const char *, ...) __attribute__ ((__format__ (__scanf__, 3, 4)))
                                                           ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vprintf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 2, 0)))
                                                            ;
int _vscanf_r (struct _reent *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 2, 0)))
                                                           ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 4, 0)))
                                                            ;
int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__printf__, 3, 0)))
                                                            ;
int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list) __attribute__ ((__format__ (__scanf__, 3, 0)))
                                                           ;



int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void * , size_t _size, size_t _n, FILE *);
size_t fwrite_unlocked (const void * , size_t _size, size_t _n, FILE *);
# 577 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
# 601 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
FILE *funopen (const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
FILE *_funopen_r (struct _reent *, const void * __cookie, int (*__readfn)(void * __cookie, char *__buf, int __n), int (*__writefn)(void * __cookie, const char *__buf, int __n), fpos_t (*__seekfn)(void * __cookie, fpos_t __off, int __whence), int (*__closefn)(void * __cookie))





                                   ;
# 687 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 797 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/stdio.h" 3
}
# 59 "lib/nrf5_sdk/components/libraries/util/app_error.h" 2


# 1 "lib/nrf5_sdk/components/libraries/util/sdk_errors.h" 1
# 73 "lib/nrf5_sdk/components/libraries/util/sdk_errors.h"
# 1 "lib/nrf5_sdk/components/softdevice/s140/headers/nrf_error.h" 1
# 74 "lib/nrf5_sdk/components/libraries/util/sdk_errors.h" 2



# 76 "lib/nrf5_sdk/components/libraries/util/sdk_errors.h"
extern "C" {
# 158 "lib/nrf5_sdk/components/libraries/util/sdk_errors.h"
typedef uint32_t ret_code_t;





}
# 62 "lib/nrf5_sdk/components/libraries/util/app_error.h" 2
# 1 "lib/nrf5_sdk/components/libraries/util/nordic_common.h" 1
# 48 "lib/nrf5_sdk/components/libraries/util/nordic_common.h"
extern "C" {
# 212 "lib/nrf5_sdk/components/libraries/util/nordic_common.h"
}
# 63 "lib/nrf5_sdk/components/libraries/util/app_error.h" 2
# 1 "lib/nrf5_sdk/components/libraries/util/app_error_weak.h" 1
# 46 "lib/nrf5_sdk/components/libraries/util/app_error_weak.h"
extern "C" {
# 77 "lib/nrf5_sdk/components/libraries/util/app_error_weak.h"
void app_error_fault_handler(uint32_t id, uint32_t pc, uint32_t info);






}
# 64 "lib/nrf5_sdk/components/libraries/util/app_error.h" 2




# 1 "lib/memfault/components/include/memfault/panics/assert.h" 1
       
# 11 "lib/memfault/components/include/memfault/panics/assert.h"
# 1 "lib/memfault/components/include/memfault/core/compiler.h" 1
       
# 12 "lib/memfault/components/include/memfault/core/compiler.h"
extern "C" {
# 41 "lib/memfault/components/include/memfault/core/compiler.h"
# 1 "lib/memfault/components/include/memfault/core/compiler_gcc.h" 1
       
# 15 "lib/memfault/components/include/memfault/core/compiler_gcc.h"
extern "C" {
# 95 "lib/memfault/components/include/memfault/core/compiler_gcc.h"
}
# 42 "lib/memfault/components/include/memfault/core/compiler.h" 2
# 50 "lib/memfault/components/include/memfault/core/compiler.h"
}
# 12 "lib/memfault/components/include/memfault/panics/assert.h" 2
# 1 "lib/memfault/components/include/memfault/core/reboot_reason_types.h" 1
       
# 12 "lib/memfault/components/include/memfault/core/reboot_reason_types.h"
extern "C" {


typedef enum MfltResetReason {



  kMfltRebootReason_Unknown = 0x0000,





  kMfltRebootReason_UserShutdown = 0x0001,
  kMfltRebootReason_UserReset = 0x0002,
  kMfltRebootReason_FirmwareUpdate = 0x0003,
  kMfltRebootReason_LowPower = 0x0004,
  kMfltRebootReason_DebuggerHalted = 0x0005,
  kMfltRebootReason_ButtonReset = 0x0006,
  kMfltRebootReason_PowerOnReset = 0x0007,
  kMfltRebootReason_SoftwareReset = 0x0008,


  kMfltRebootReason_DeepSleep = 0x0009,

  kMfltRebootReason_PinReset = 0x000A,







  kMfltRebootReason_UnknownError = 0x8000,
  kMfltRebootReason_Assert = 0x8001,



  kMfltRebootReason_WatchdogDeprecated = 0x8002,

  kMfltRebootReason_BrownOutReset = 0x8003,
  kMfltRebootReason_Nmi = 0x8004,


  kMfltRebootReason_HardwareWatchdog = 0x8005,
  kMfltRebootReason_SoftwareWatchdog = 0x8006,



  kMfltRebootReason_ClockFailure = 0x8007,



  kMfltRebootReason_KernelPanic = 0x8008,



  kMfltRebootReason_FirmwareUpdateError = 0x8009,


  kMfltRebootReason_BusFault = 0x9100,
  kMfltRebootReason_MemFault = 0x9200,
  kMfltRebootReason_UsageFault = 0x9300,
  kMfltRebootReason_HardFault = 0x9400,


  kMfltRebootReason_Lockup = 0x9401,
} eMemfaultRebootReason;


}
# 13 "lib/memfault/components/include/memfault/panics/assert.h" 2
# 1 "lib/memfault/components/include/memfault/panics/fault_handling.h" 1
       
# 13 "lib/memfault/components/include/memfault/panics/fault_handling.h"
# 1 "lib/memfault/components/include/memfault/config.h" 1
       
# 26 "lib/memfault/components/include/memfault/config.h"
extern "C" {







# 1 "lib/memfault/include/memfault_platform_config.h" 1
       
# 35 "lib/memfault/components/include/memfault/config.h" 2
# 43 "lib/memfault/components/include/memfault/config.h"
# 1 "lib/memfault/components/include/memfault/default_config.h" 1
       
# 13 "lib/memfault/components/include/memfault/default_config.h"
extern "C" {
# 560 "lib/memfault/components/include/memfault/default_config.h"
}
# 44 "lib/memfault/components/include/memfault/config.h" 2




}
# 14 "lib/memfault/components/include/memfault/panics/fault_handling.h" 2




extern "C" {



typedef struct MemfaultAssertInfo {
  uint32_t extra;
  eMemfaultRebootReason assert_reason;
} sMemfaultAssertInfo;
# 45 "lib/memfault/components/include/memfault/panics/fault_handling.h"
__attribute__((naked)) void NMI_Handler(void);



__attribute__((naked)) void HardFault_Handler(void);



__attribute__((naked)) void MemoryManagement_Handler(void);



__attribute__((naked)) void BusFault_Handler(void);



__attribute__((naked)) void UsageFault_Handler(void);
# 71 "lib/memfault/components/include/memfault/panics/fault_handling.h"
__attribute__((naked)) void MemfaultWatchdog_Handler(void);
# 89 "lib/memfault/components/include/memfault/panics/fault_handling.h"
__attribute__((noreturn))

void memfault_fault_handling_assert(void *pc, void *lr);
# 104 "lib/memfault/components/include/memfault/panics/fault_handling.h"
__attribute__((noreturn))

void memfault_fault_handling_assert_extra(void *pc, void *lr, sMemfaultAssertInfo *extra_info);



void memfault_fault_handling_common(void);


}
# 14 "lib/memfault/components/include/memfault/panics/assert.h" 2


extern "C" {
# 70 "lib/memfault/components/include/memfault/panics/assert.h"
}
# 69 "lib/nrf5_sdk/components/libraries/util/app_error.h" 2



extern "C" {
# 85 "lib/nrf5_sdk/components/libraries/util/app_error.h"
typedef struct
{
    uint32_t line_num;
    uint8_t const * p_file_name;
    uint32_t err_code;
} error_info_t;



typedef struct
{
    uint16_t line_num;
    uint8_t const * p_file_name;
} assert_info_t;
# 116 "lib/nrf5_sdk/components/libraries/util/app_error.h"
void app_error_handler(uint32_t error_code, uint32_t line_num, const uint8_t * p_file_name);





void app_error_handler_bare(ret_code_t error_code);
# 132 "lib/nrf5_sdk/components/libraries/util/app_error.h"
void app_error_save_and_stop(uint32_t id, uint32_t pc, uint32_t info);
# 142 "lib/nrf5_sdk/components/libraries/util/app_error.h"
void app_error_log_handle(uint32_t id, uint32_t pc, uint32_t info);
# 196 "lib/nrf5_sdk/components/libraries/util/app_error.h"
}
# 61 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h" 2


extern "C" {
# 91 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h"
typedef enum
{



    APP_IRQ_PRIORITY_HIGHEST = 2,

    APP_IRQ_PRIORITY_HIGH = 2,



    APP_IRQ_PRIORITY_MID = 3,

    APP_IRQ_PRIORITY_LOW = 6,
    APP_IRQ_PRIORITY_LOWEST = 7,
    APP_IRQ_PRIORITY_THREAD = 15
} app_irq_priority_t;




typedef enum
{
    APP_LEVEL_UNPRIVILEGED,
    APP_LEVEL_PRIVILEGED
} app_level_t;
# 172 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h"
void app_util_critical_region_enter (uint8_t *p_nested);
void app_util_critical_region_exit (uint8_t nested);
# 261 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h"
uint8_t current_int_priority_get(void);
# 270 "lib/nrf5_sdk/components/libraries/util/app_util_platform.h"
uint8_t privilege_level_get(void);



}
# 37 "lib/nrf5_sdk/external/freertos/config/FreeRTOSConfig.h" 2

# 1 "lib/memfault/ports/include/memfault/ports/freertos_trace.h" 1
       
# 12 "lib/memfault/ports/include/memfault/ports/freertos_trace.h"
extern "C" {
# 21 "lib/memfault/ports/include/memfault/ports/freertos_trace.h"
void memfault_freertos_trace_task_create(void *tcb);
void memfault_freertos_trace_task_delete(void *tcb);

# 1 "lib/memfault/components/include/memfault/core/heap_stats.h" 1
       
# 48 "lib/memfault/components/include/memfault/core/heap_stats.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 49 "lib/memfault/components/include/memfault/core/heap_stats.h" 2





extern "C" {
# 66 "lib/memfault/components/include/memfault/core/heap_stats.h"
void memfault_heap_stats_malloc(const void *lr, const void *ptr, size_t size);
# 81 "lib/memfault/components/include/memfault/core/heap_stats.h"
void memfault_heap_stats_free(const void *ptr);




}
# 25 "lib/memfault/ports/include/memfault/ports/freertos_trace.h" 2
# 63 "lib/memfault/ports/include/memfault/ports/freertos_trace.h"
}
# 39 "lib/nrf5_sdk/external/freertos/config/FreeRTOSConfig.h" 2
# 178 "lib/nrf5_sdk/external/freertos/config/FreeRTOSConfig.h"
# 1 "lib/nrf5_sdk/components/libraries/util/nrf_assert.h" 1
# 179 "lib/nrf5_sdk/external/freertos/config/FreeRTOSConfig.h" 2
# 58 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h" 2


# 1 "lib/nrf5_sdk/external/freertos/source/include/projdefs.h" 1
# 36 "lib/nrf5_sdk/external/freertos/source/include/projdefs.h"
typedef void (*TaskFunction_t)( void * );
# 61 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h" 2


# 1 "lib/nrf5_sdk/external/freertos/source/include/portable.h" 1
# 46 "lib/nrf5_sdk/external/freertos/source/include/portable.h"
# 1 "lib/nrf5_sdk/external/freertos/source/include/deprecated_definitions.h" 1
# 47 "lib/nrf5_sdk/external/freertos/source/include/portable.h" 2






# 1 "lib/nrf5_sdk/external/freertos/portable/GCC/nrf52/portmacro.h" 1
# 33 "lib/nrf5_sdk/external/freertos/portable/GCC/nrf52/portmacro.h"
# 1 "lib/nrf5_sdk/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h" 1
# 31 "lib/nrf5_sdk/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h"
# 1 "lib/nrf5_sdk/components/libraries/util/app_util.h" 1
# 54 "lib/nrf5_sdk/components/libraries/util/app_util.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 55 "lib/nrf5_sdk/components/libraries/util/app_util.h" 2





extern "C" {
# 83 "lib/nrf5_sdk/components/libraries/util/app_util.h"
extern uint32_t __StackTop;
extern uint32_t __StackLimit;
# 121 "lib/nrf5_sdk/components/libraries/util/app_util.h"
extern uint32_t __isr_vector;
extern uint32_t __etext;
# 132 "lib/nrf5_sdk/components/libraries/util/app_util.h"
enum
{
    UNIT_0_625_MS = 625,
    UNIT_1_25_MS = 1250,
    UNIT_10_MS = 10000
};
# 302 "lib/nrf5_sdk/components/libraries/util/app_util.h"
typedef uint8_t uint16_le_t[2];


typedef uint8_t uint32_le_t[4];


typedef struct
{
    uint16_t size;
    uint8_t * p_data;
} uint8_array_t;
# 1008 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint64_t value_rescale(uint32_t value, uint32_t old_unit_reversal, uint16_t new_unit_reversal)
{
    return (uint64_t)((((uint64_t)value * new_unit_reversal) + ((old_unit_reversal) / 2)) / (old_unit_reversal));
}
# 1020 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t uint16_encode(uint16_t value, uint8_t * p_encoded_data)
{
    p_encoded_data[0] = (uint8_t) ((value & 0x00FF) >> 0);
    p_encoded_data[1] = (uint8_t) ((value & 0xFF00) >> 8);
    return sizeof(uint16_t);
}
# 1034 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t uint24_encode(uint32_t value, uint8_t * p_encoded_data)
{
    p_encoded_data[0] = (uint8_t) ((value & 0x000000FF) >> 0);
    p_encoded_data[1] = (uint8_t) ((value & 0x0000FF00) >> 8);
    p_encoded_data[2] = (uint8_t) ((value & 0x00FF0000) >> 16);
    return 3;
}
# 1049 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t uint32_encode(uint32_t value, uint8_t * p_encoded_data)
{
    p_encoded_data[0] = (uint8_t) ((value & 0x000000FF) >> 0);
    p_encoded_data[1] = (uint8_t) ((value & 0x0000FF00) >> 8);
    p_encoded_data[2] = (uint8_t) ((value & 0x00FF0000) >> 16);
    p_encoded_data[3] = (uint8_t) ((value & 0xFF000000) >> 24);
    return sizeof(uint32_t);
}
# 1065 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t uint40_encode(uint64_t value, uint8_t * p_encoded_data)
{
    p_encoded_data[0] = (uint8_t) ((value & 0x00000000FF) >> 0);
    p_encoded_data[1] = (uint8_t) ((value & 0x000000FF00) >> 8);
    p_encoded_data[2] = (uint8_t) ((value & 0x0000FF0000) >> 16);
    p_encoded_data[3] = (uint8_t) ((value & 0x00FF000000) >> 24);
    p_encoded_data[4] = (uint8_t) ((value & 0xFF00000000) >> 32);
    return 5;
}
# 1082 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t uint48_encode(uint64_t value, uint8_t * p_encoded_data)
{
    p_encoded_data[0] = (uint8_t) ((value & 0x0000000000FF) >> 0);
    p_encoded_data[1] = (uint8_t) ((value & 0x00000000FF00) >> 8);
    p_encoded_data[2] = (uint8_t) ((value & 0x000000FF0000) >> 16);
    p_encoded_data[3] = (uint8_t) ((value & 0x0000FF000000) >> 24);
    p_encoded_data[4] = (uint8_t) ((value & 0x00FF00000000) >> 32);
    p_encoded_data[5] = (uint8_t) ((value & 0xFF0000000000) >> 40);
    return 6;
}







static inline uint16_t uint16_decode(const uint8_t * p_encoded_data)
{
        return ( (((uint16_t)((uint8_t *)p_encoded_data)[0])) |
                 (((uint16_t)((uint8_t *)p_encoded_data)[1]) << 8 ));
}







static inline uint16_t uint16_big_decode(const uint8_t * p_encoded_data)
{
        return ( (((uint16_t)((uint8_t *)p_encoded_data)[0]) << 8 ) |
                 (((uint16_t)((uint8_t *)p_encoded_data)[1])) );
}







static inline uint32_t uint24_decode(const uint8_t * p_encoded_data)
{
    return ( (((uint32_t)((uint8_t *)p_encoded_data)[0]) << 0) |
             (((uint32_t)((uint8_t *)p_encoded_data)[1]) << 8) |
             (((uint32_t)((uint8_t *)p_encoded_data)[2]) << 16));
}







static inline uint32_t uint32_decode(const uint8_t * p_encoded_data)
{
    return ( (((uint32_t)((uint8_t *)p_encoded_data)[0]) << 0) |
             (((uint32_t)((uint8_t *)p_encoded_data)[1]) << 8) |
             (((uint32_t)((uint8_t *)p_encoded_data)[2]) << 16) |
             (((uint32_t)((uint8_t *)p_encoded_data)[3]) << 24 ));
}







static inline uint32_t uint32_big_decode(const uint8_t * p_encoded_data)
{
    return ( (((uint32_t)((uint8_t *)p_encoded_data)[0]) << 24) |
             (((uint32_t)((uint8_t *)p_encoded_data)[1]) << 16) |
             (((uint32_t)((uint8_t *)p_encoded_data)[2]) << 8) |
             (((uint32_t)((uint8_t *)p_encoded_data)[3]) << 0) );
}
# 1166 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t uint16_big_encode(uint16_t value, uint8_t * p_encoded_data)
{
    p_encoded_data[0] = (uint8_t) (value >> 8);
    p_encoded_data[1] = (uint8_t) (value & 0xFF);

    return sizeof(uint16_t);
}
# 1183 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t uint32_big_encode(uint32_t value, uint8_t * p_encoded_data)
{
    *(uint32_t *)p_encoded_data = __REV(value);
    return sizeof(uint32_t);
}







static inline uint64_t uint40_decode(const uint8_t * p_encoded_data)
{
    return ( (((uint64_t)((uint8_t *)p_encoded_data)[0]) << 0) |
             (((uint64_t)((uint8_t *)p_encoded_data)[1]) << 8) |
             (((uint64_t)((uint8_t *)p_encoded_data)[2]) << 16) |
             (((uint64_t)((uint8_t *)p_encoded_data)[3]) << 24) |
             (((uint64_t)((uint8_t *)p_encoded_data)[4]) << 32 ));
}







static inline uint64_t uint48_decode(const uint8_t * p_encoded_data)
{
    return ( (((uint64_t)((uint8_t *)p_encoded_data)[0]) << 0) |
             (((uint64_t)((uint8_t *)p_encoded_data)[1]) << 8) |
             (((uint64_t)((uint8_t *)p_encoded_data)[2]) << 16) |
             (((uint64_t)((uint8_t *)p_encoded_data)[3]) << 24) |
             (((uint64_t)((uint8_t *)p_encoded_data)[4]) << 32) |
             (((uint64_t)((uint8_t *)p_encoded_data)[5]) << 40 ));
}
# 1240 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline uint8_t battery_level_in_percent(const uint16_t mvolts)
{
    uint8_t battery_level;

    if (mvolts >= 3000)
    {
        battery_level = 100;
    }
    else if (mvolts > 2900)
    {
        battery_level = 100 - ((3000 - mvolts) * 58) / 100;
    }
    else if (mvolts > 2740)
    {
        battery_level = 42 - ((2900 - mvolts) * 24) / 160;
    }
    else if (mvolts > 2440)
    {
        battery_level = 18 - ((2740 - mvolts) * 12) / 300;
    }
    else if (mvolts > 2100)
    {
        battery_level = 6 - ((2440 - mvolts) * 6) / 340;
    }
    else
    {
        battery_level = 0;
    }

    return battery_level;
}







static inline bool is_word_aligned(void const* p)
{
    return (((uintptr_t)p & 0x03) == 0);
}
# 1291 "lib/nrf5_sdk/components/libraries/util/app_util.h"
static inline bool is_address_from_stack(void * ptr)
{
    if (((uint32_t)ptr >= (uint32_t)&__StackLimit) &&
        ((uint32_t)ptr < (uint32_t)&__StackTop) )
    {
        return true;
    }
    else
    {
        return false;
    }
}


}
# 32 "lib/nrf5_sdk/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h" 2


extern "C" {
# 56 "lib/nrf5_sdk/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h"
typedef uint32_t StackType_t;
typedef long BaseType_t;
typedef uint32_t UBaseType_t;





    typedef uint32_t TickType_t;
# 105 "lib/nrf5_sdk/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h"
extern void vPortEnterCritical( void );
extern void vPortExitCritical( void );
# 125 "lib/nrf5_sdk/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h"
    extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
# 172 "lib/nrf5_sdk/external/freertos/portable/CMSIS/nrf52/portmacro_cmsis.h"
static inline uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI = __get_BASEPRI();
    __set_BASEPRI(2 << (8 - 3));
    return ulOriginalBASEPRI;
}





}
# 34 "lib/nrf5_sdk/external/freertos/portable/GCC/nrf52/portmacro.h" 2
# 54 "lib/nrf5_sdk/external/freertos/source/include/portable.h" 2
# 89 "lib/nrf5_sdk/external/freertos/source/include/portable.h"
extern "C" {


# 1 "lib/nrf5_sdk/external/freertos/source/include/mpu_wrappers.h" 1
# 93 "lib/nrf5_sdk/external/freertos/source/include/portable.h" 2
# 103 "lib/nrf5_sdk/external/freertos/source/include/portable.h"
 StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters ) ;



typedef struct HeapRegion
{
 uint8_t *pucStartAddress;
 size_t xSizeInBytes;
} HeapRegion_t;
# 124 "lib/nrf5_sdk/external/freertos/source/include/portable.h"
void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) ;





void *pvPortMalloc( size_t xSize ) ;
void vPortFree( void *pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;
size_t xPortGetMinimumEverFreeHeapSize( void ) ;





BaseType_t xPortStartScheduler( void ) ;






void vPortEndScheduler( void ) ;
# 162 "lib/nrf5_sdk/external/freertos/source/include/portable.h"
}
# 64 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h" 2
# 949 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
struct xSTATIC_LIST_ITEM
{
 TickType_t xDummy1;
 void *pvDummy2[ 4 ];
};
typedef struct xSTATIC_LIST_ITEM StaticListItem_t;


struct xSTATIC_MINI_LIST_ITEM
{
 TickType_t xDummy1;
 void *pvDummy2[ 2 ];
};
typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;


typedef struct xSTATIC_LIST
{
 UBaseType_t uxDummy1;
 void *pvDummy2;
 StaticMiniListItem_t xDummy3;
} StaticList_t;
# 985 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
typedef struct xSTATIC_TCB
{
 void *pxDummy1;



 StaticListItem_t xDummy3[ 2 ];
 UBaseType_t uxDummy5;
 void *pxDummy6;
 uint8_t ucDummy7[ ( 4 ) ];
# 1005 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
  UBaseType_t uxDummy12[ 2 ];
# 1020 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
  uint32_t ulDummy18;
  uint8_t ucDummy19;
# 1031 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
} StaticTask_t;
# 1047 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
typedef struct xSTATIC_QUEUE
{
 void *pvDummy1[ 3 ];

 union
 {
  void *pvDummy2;
  UBaseType_t uxDummy2;
 } u;

 StaticList_t xDummy3[ 2 ];
 UBaseType_t uxDummy4[ 3 ];
 uint8_t ucDummy5[ 2 ];
# 1074 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
} StaticQueue_t;
typedef StaticQueue_t StaticSemaphore_t;
# 1091 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
typedef struct xSTATIC_EVENT_GROUP
{
 TickType_t xDummy1;
 StaticList_t xDummy2;
# 1104 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
} StaticEventGroup_t;
# 1120 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
typedef struct xSTATIC_TIMER
{
 void *pvDummy1;
 StaticListItem_t xDummy2;
 TickType_t xDummy3;
 UBaseType_t uxDummy4;
 void *pvDummy5[ 2 ];
# 1135 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
} StaticTimer_t;
# 1151 "lib/nrf5_sdk/external/freertos/source/include/FreeRTOS.h"
typedef struct xSTATIC_STREAM_BUFFER
{
 size_t uxDummy1[ 4 ];
 void * pvDummy2[ 3 ];
 uint8_t ucDummy3;



} StaticStreamBuffer_t;


typedef StaticStreamBuffer_t StaticMessageBuffer_t;


}
# 48 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2
# 1 "lib/nrf5_sdk/external/freertos/source/include/task.h" 1
# 37 "lib/nrf5_sdk/external/freertos/source/include/task.h"
# 1 "lib/nrf5_sdk/external/freertos/source/include/list.h" 1
# 97 "lib/nrf5_sdk/external/freertos/source/include/list.h"
extern "C" {
# 140 "lib/nrf5_sdk/external/freertos/source/include/list.h"
struct xLIST_ITEM
{

 TickType_t xItemValue;
 struct xLIST_ITEM * pxNext;
 struct xLIST_ITEM * pxPrevious;
 void * pvOwner;
 void * pvContainer;

};
typedef struct xLIST_ITEM ListItem_t;

struct xMINI_LIST_ITEM
{

 TickType_t xItemValue;
 struct xLIST_ITEM * pxNext;
 struct xLIST_ITEM * pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;




typedef struct xLIST
{

 volatile UBaseType_t uxNumberOfItems;
 ListItem_t * pxIndex;
 MiniListItem_t xListEnd;

} List_t;
# 345 "lib/nrf5_sdk/external/freertos/source/include/list.h"
void vListInitialise( List_t * const pxList ) ;
# 356 "lib/nrf5_sdk/external/freertos/source/include/list.h"
void vListInitialiseItem( ListItem_t * const pxItem ) ;
# 369 "lib/nrf5_sdk/external/freertos/source/include/list.h"
void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem ) ;
# 390 "lib/nrf5_sdk/external/freertos/source/include/list.h"
void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem ) ;
# 405 "lib/nrf5_sdk/external/freertos/source/include/list.h"
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) ;


}
# 38 "lib/nrf5_sdk/external/freertos/source/include/task.h" 2


extern "C" {
# 62 "lib/nrf5_sdk/external/freertos/source/include/task.h"
typedef void * TaskHandle_t;





typedef BaseType_t (*TaskHookFunction_t)( void * );


typedef enum
{
 eRunning = 0,
 eReady,
 eBlocked,
 eSuspended,
 eDeleted,
 eInvalid
} eTaskState;


typedef enum
{
 eNoAction = 0,
 eSetBits,
 eIncrement,
 eSetValueWithOverwrite,
 eSetValueWithoutOverwrite
} eNotifyAction;




typedef struct xTIME_OUT
{
 BaseType_t xOverflowCount;
 TickType_t xTimeOnEntering;
} TimeOut_t;




typedef struct xMEMORY_REGION
{
 void *pvBaseAddress;
 uint32_t ulLengthInBytes;
 uint32_t ulParameters;
} MemoryRegion_t;




typedef struct xTASK_PARAMETERS
{
 TaskFunction_t pvTaskCode;
 const char * const pcName;
 uint16_t usStackDepth;
 void *pvParameters;
 UBaseType_t uxPriority;
 StackType_t *puxStackBuffer;
 MemoryRegion_t xRegions[ 1 ];



} TaskParameters_t;



typedef struct xTASK_STATUS
{
 TaskHandle_t xHandle;
 const char *pcTaskName;
 UBaseType_t xTaskNumber;
 eTaskState eCurrentState;
 UBaseType_t uxCurrentPriority;
 UBaseType_t uxBasePriority;
 uint32_t ulRunTimeCounter;
 StackType_t *pxStackBase;
 uint16_t usStackHighWaterMark;
} TaskStatus_t;


typedef enum
{
 eAbortSleep = 0,
 eStandardSleep,
 eNoTasksWaitingTimeout
} eSleepModeStatus;
# 322 "lib/nrf5_sdk/external/freertos/source/include/task.h"
 BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
       const char * const pcName,
       const uint16_t usStackDepth,
       void * const pvParameters,
       UBaseType_t uxPriority,
       TaskHandle_t * const pxCreatedTask ) ;
# 657 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) ;
# 698 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskDelete( TaskHandle_t xTaskToDelete ) ;
# 750 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskDelay( const TickType_t xTicksToDelay ) ;
# 809 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) ;
# 834 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskAbortDelay( TaskHandle_t xTask ) ;
# 881 "lib/nrf5_sdk/external/freertos/source/include/task.h"
UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) ;







UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) ;
# 907 "lib/nrf5_sdk/external/freertos/source/include/task.h"
eTaskState eTaskGetState( TaskHandle_t xTask ) ;
# 963 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState ) ;
# 1005 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) ;
# 1056 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskSuspend( TaskHandle_t xTaskToSuspend ) ;
# 1105 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskResume( TaskHandle_t xTaskToResume ) ;
# 1134 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) ;
# 1167 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskStartScheduler( void ) ;
# 1223 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskEndScheduler( void ) ;
# 1274 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskSuspendAll( void ) ;
# 1328 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskResumeAll( void ) ;
# 1343 "lib/nrf5_sdk/external/freertos/source/include/task.h"
TickType_t xTaskGetTickCount( void ) ;
# 1359 "lib/nrf5_sdk/external/freertos/source/include/task.h"
TickType_t xTaskGetTickCountFromISR( void ) ;
# 1373 "lib/nrf5_sdk/external/freertos/source/include/task.h"
UBaseType_t uxTaskGetNumberOfTasks( void ) ;
# 1386 "lib/nrf5_sdk/external/freertos/source/include/task.h"
char *pcTaskGetName( TaskHandle_t xTaskToQuery ) ;
# 1402 "lib/nrf5_sdk/external/freertos/source/include/task.h"
TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) ;
# 1423 "lib/nrf5_sdk/external/freertos/source/include/task.h"
UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) ;
# 1476 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) ;
# 1485 "lib/nrf5_sdk/external/freertos/source/include/task.h"
TaskHandle_t xTaskGetIdleTaskHandle( void ) ;
# 1584 "lib/nrf5_sdk/external/freertos/source/include/task.h"
UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime ) ;
# 1631 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskList( char * pcWriteBuffer ) ;
# 1685 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskGetRunTimeStats( char *pcWriteBuffer ) ;
# 1766 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue ) ;
# 1857 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken ) ;
# 1934 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait ) ;
# 2035 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken ) ;
# 2104 "lib/nrf5_sdk/external/freertos/source/include/task.h"
uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait ) ;
# 2120 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );
# 2141 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskIncrementTick( void ) ;
# 2174 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) ;
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) ;
# 2188 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely ) ;
# 2214 "lib/nrf5_sdk/external/freertos/source/include/task.h"
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) ;
void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) ;
# 2225 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskSwitchContext( void ) ;





TickType_t uxTaskResetEventItemValue( void ) ;




TaskHandle_t xTaskGetCurrentTaskHandle( void ) ;




void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) ;





BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) ;





void vTaskMissedYield( void ) ;





BaseType_t xTaskGetSchedulerState( void ) ;





BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) ;





BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) ;
# 2281 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask ) ;




UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) ;





void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) ;
# 2302 "lib/nrf5_sdk/external/freertos/source/include/task.h"
void vTaskStepTick( const TickType_t xTicksToJump ) ;
# 2318 "lib/nrf5_sdk/external/freertos/source/include/task.h"
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) ;





void *pvTaskIncrementMutexHeldCount( void ) ;





void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut ) ;



}
# 49 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2
# 1 "lib/nrf5_sdk/external/freertos/source/include/timers.h" 1
# 39 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
# 1 "lib/nrf5_sdk/external/freertos/source/include/task.h" 1
# 40 "lib/nrf5_sdk/external/freertos/source/include/timers.h" 2



extern "C" {
# 77 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
typedef void * TimerHandle_t;




typedef void (*TimerCallbackFunction_t)( TimerHandle_t xTimer );





typedef void (*PendedFunction_t)( void *, uint32_t );
# 228 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
 TimerHandle_t xTimerCreate( const char * const pcTimerName,
        const TickType_t xTimerPeriodInTicks,
        const UBaseType_t uxAutoReload,
        void * const pvTimerID,
        TimerCallbackFunction_t pxCallbackFunction ) ;
# 386 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
void *pvTimerGetTimerID( const TimerHandle_t xTimer ) ;
# 407 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID ) ;
# 444 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer ) ;







TaskHandle_t xTimerGetTimerDaemonTaskHandle( void ) ;
# 1187 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken ) ;
# 1221 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait ) ;
# 1232 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
const char * pcTimerGetName( TimerHandle_t xTimer ) ;
# 1243 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
TickType_t xTimerGetPeriod( TimerHandle_t xTimer ) ;
# 1258 "lib/nrf5_sdk/external/freertos/source/include/timers.h"
TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer ) ;





BaseType_t xTimerCreateTimerTask( void ) ;
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait ) ;







}
# 50 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2
# 1 "lib/nrf5_sdk/external/freertos/source/include/queue.h" 1
# 38 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
extern "C" {
# 47 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
typedef void * QueueHandle_t;






typedef void * QueueSetHandle_t;






typedef void * QueueSetMemberHandle_t;
# 649 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition ) ;
# 743 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait ) ;
# 776 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue, void * const pvBuffer ) ;
# 867 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait ) ;
# 882 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue ) ;
# 899 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue ) ;
# 913 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
void vQueueDelete( QueueHandle_t xQueue ) ;
# 1294 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition ) ;
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken ) ;
# 1384 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken ) ;





BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue ) ;
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue ) ;
UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue ) ;
# 1403 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken );
BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxTaskWoken );
BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait );
BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait );






QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType ) ;
QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue ) ;
QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount ) ;
QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue ) ;
BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait ) ;
void* xQueueGetMutexHolder( QueueHandle_t xSemaphore ) ;
void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore ) ;





BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait ) ;
BaseType_t xQueueGiveMutexRecursive( QueueHandle_t pxMutex ) ;
# 1457 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
 void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcName ) ;
# 1471 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
 void vQueueUnregisterQueue( QueueHandle_t xQueue ) ;
# 1486 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
 const char *pcQueueGetName( QueueHandle_t xQueue ) ;
# 1495 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
 QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType ) ;
# 1555 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength ) ;
# 1579 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) ;
# 1598 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore, QueueSetHandle_t xQueueSet ) ;
# 1634 "lib/nrf5_sdk/external/freertos/source/include/queue.h"
QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet, const TickType_t xTicksToWait ) ;




QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet ) ;


void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely ) ;
BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue ) ;
void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber ) ;
UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue ) ;
uint8_t ucQueueGetQueueType( QueueHandle_t xQueue ) ;



}
# 51 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2
# 1 "lib/nrf5_sdk/external/freertos/source/include/semphr.h" 1
# 36 "lib/nrf5_sdk/external/freertos/source/include/semphr.h"
# 1 "lib/nrf5_sdk/external/freertos/source/include/queue.h" 1
# 37 "lib/nrf5_sdk/external/freertos/source/include/semphr.h" 2

typedef QueueHandle_t SemaphoreHandle_t;
# 52 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 2



enum
{
  TASK_PRIO_LOWEST = 0,
  TASK_PRIO_LOW = 1,
  TASK_PRIO_NORMAL = 2,
  TASK_PRIO_HIGH = 3,
  TASK_PRIO_HIGHEST = 4,
};
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h"
class SchedulerRTOS
{
public:
  typedef void (*taskfunc_t)(void);

  SchedulerRTOS(void);

  bool startLoop(taskfunc_t task, uint32_t stack_size = (512*2), uint32_t prio = TASK_PRIO_LOW, const char* name = 
# 84 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h" 3 4
                                                                                                                                    __null
# 84 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/rtos.h"
                                                                                                                                        );
};

extern SchedulerRTOS Scheduler;
# 49 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2



# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WCharacter.h" 1
# 22 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WCharacter.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/ctype.h" 1 3
# 11 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/ctype.h" 3

# 11 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/ctype.h" 3
extern "C" {

int isalnum (int __c);
int isalpha (int __c);
int iscntrl (int __c);
int isdigit (int __c);
int isgraph (int __c);
int islower (int __c);
int isprint (int __c);
int ispunct (int __c);
int isspace (int __c);
int isupper (int __c);
int isxdigit (int __c);
int tolower (int __c);
int toupper (int __c);


int isblank (int __c);



int isascii (int __c);
int toascii (int __c);





extern int isalnum_l (int __c, locale_t __l);
extern int isalpha_l (int __c, locale_t __l);
extern int isblank_l (int __c, locale_t __l);
extern int iscntrl_l (int __c, locale_t __l);
extern int isdigit_l (int __c, locale_t __l);
extern int isgraph_l (int __c, locale_t __l);
extern int islower_l (int __c, locale_t __l);
extern int isprint_l (int __c, locale_t __l);
extern int ispunct_l (int __c, locale_t __l);
extern int isspace_l (int __c, locale_t __l);
extern int isupper_l (int __c, locale_t __l);
extern int isxdigit_l(int __c, locale_t __l);
extern int tolower_l (int __c, locale_t __l);
extern int toupper_l (int __c, locale_t __l);



extern int isascii_l (int __c, locale_t __l);
extern int toascii_l (int __c, locale_t __l);
# 69 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/ctype.h" 3
const char *__locale_ctype_ptr (void);
# 165 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/ctype.h" 3
extern const char _ctype_[];

}
# 23 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WCharacter.h" 2



# 25 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WCharacter.h"
extern "C" {




inline boolean isAlphaNumeric(int c) __attribute__((always_inline));
inline boolean isAlpha(int c) __attribute__((always_inline));
inline boolean isAscii(int c) __attribute__((always_inline));
inline boolean isWhitespace(int c) __attribute__((always_inline));
inline boolean isControl(int c) __attribute__((always_inline));
inline boolean isDigit(int c) __attribute__((always_inline));
inline boolean isGraph(int c) __attribute__((always_inline));
inline boolean isLowerCase(int c) __attribute__((always_inline));
inline boolean isPrintable(int c) __attribute__((always_inline));
inline boolean isPunct(int c) __attribute__((always_inline));
inline boolean isSpace(int c) __attribute__((always_inline));
inline boolean isUpperCase(int c) __attribute__((always_inline));
inline boolean isHexadecimalDigit(int c) __attribute__((always_inline));
inline int toAscii(int c) __attribute__((always_inline));
inline int toLowerCase(int c) __attribute__((always_inline));
inline int toUpperCase(int c)__attribute__((always_inline));





inline boolean isAlphaNumeric(int c)
{
  return ( isalnum(c) == 0 ? false : true);
}




inline boolean isAlpha(int c)
{
  return ( isalpha(c) == 0 ? false : true);
}




inline boolean isAscii(int c)
{

  return ( (c & ~0x7f) != 0 ? false : true);
}



inline boolean isWhitespace(int c)
{
  return ( isblank (c) == 0 ? false : true);
}



inline boolean isControl(int c)
{
  return ( iscntrl (c) == 0 ? false : true);
}



inline boolean isDigit(int c)
{
  return ( isdigit (c) == 0 ? false : true);
}



inline boolean isGraph(int c)
{
  return ( isgraph (c) == 0 ? false : true);
}



inline boolean isLowerCase(int c)
{
  return (islower (c) == 0 ? false : true);
}



inline boolean isPrintable(int c)
{
  return ( isprint (c) == 0 ? false : true);
}




inline boolean isPunct(int c)
{
  return ( ispunct (c) == 0 ? false : true);
}





inline boolean isSpace(int c)
{
  return ( isspace (c) == 0 ? false : true);
}



inline boolean isUpperCase(int c)
{
  return ( isupper (c) == 0 ? false : true);
}




inline boolean isHexadecimalDigit(int c)
{
  return ( isxdigit (c) == 0 ? false : true);
}




inline int toAscii(int c)
{

  return (c & 0x7f);
}
# 163 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WCharacter.h"
inline int toLowerCase(int c)
{
  return tolower (c);
}



inline int toUpperCase(int c)
{
  return toupper (c);
}


}
# 53 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WString.h" 1
# 26 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WString.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 1 3
# 27 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WString.h" 2


# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/avr/pgmspace.h" 1
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WString.h" 2







class __FlashStringHelper;




class StringSumHelper;


class String
{



 typedef void (String::*StringIfHelperType)() const;
 void StringIfHelper() const {}

public:





 String(const char *cstr = "");
 String(const String &str);
 String(const __FlashStringHelper *str);

 String(String &&rval);
 String(StringSumHelper &&rval);

 explicit String(char c);
 explicit String(unsigned char, unsigned char base=10);
 explicit String(int, unsigned char base=10);
 explicit String(unsigned int, unsigned char base=10);
 explicit String(long, unsigned char base=10);
 explicit String(unsigned long, unsigned char base=10);
 explicit String(float, unsigned char decimalPlaces=2);
 explicit String(double, unsigned char decimalPlaces=2);
 ~String(void);





 unsigned char reserve(unsigned int size);
 inline unsigned int length(void) const {return len;}




 String & operator = (const String &rhs);
 String & operator = (const char *cstr);
 String & operator = (const __FlashStringHelper *str);

 String & operator = (String &&rval);
 String & operator = (StringSumHelper &&rval);







 unsigned char concat(const String &str);
 unsigned char concat(const char *cstr);
 unsigned char concat(char c);
 unsigned char concat(unsigned char c);
 unsigned char concat(int num);
 unsigned char concat(unsigned int num);
 unsigned char concat(long num);
 unsigned char concat(unsigned long num);
 unsigned char concat(float num);
 unsigned char concat(double num);
 unsigned char concat(const __FlashStringHelper * str);



 String & operator += (const String &rhs) {concat(rhs); return (*this);}
 String & operator += (const char *cstr) {concat(cstr); return (*this);}
 String & operator += (char c) {concat(c); return (*this);}
 String & operator += (unsigned char num) {concat(num); return (*this);}
 String & operator += (int num) {concat(num); return (*this);}
 String & operator += (unsigned int num) {concat(num); return (*this);}
 String & operator += (long num) {concat(num); return (*this);}
 String & operator += (unsigned long num) {concat(num); return (*this);}
 String & operator += (float num) {concat(num); return (*this);}
 String & operator += (double num) {concat(num); return (*this);}
 String & operator += (const __FlashStringHelper *str){concat(str); return (*this);}

 friend StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, char c);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);


 operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
 int compareTo(const String &s) const;
 unsigned char equals(const String &s) const;
 unsigned char equals(const char *cstr) const;
 unsigned char operator == (const String &rhs) const {return equals(rhs);}
 unsigned char operator == (const char *cstr) const {return equals(cstr);}
 unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 unsigned char operator < (const String &rhs) const;
 unsigned char operator > (const String &rhs) const;
 unsigned char operator <= (const String &rhs) const;
 unsigned char operator >= (const String &rhs) const;
 unsigned char equalsIgnoreCase(const String &s) const;
 unsigned char startsWith( const String &prefix) const;
 unsigned char startsWith(const String &prefix, unsigned int offset) const;
 unsigned char endsWith(const String &suffix) const;


 char charAt(unsigned int index) const;
 void setCharAt(unsigned int index, char c);
 char operator [] (unsigned int index) const;
 char& operator [] (unsigned int index);
 void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
 void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
  {getBytes((unsigned char *)buf, bufsize, index);}
 const char * c_str() const { return buffer; }


 int indexOf( char ch ) const;
 int indexOf( char ch, unsigned int fromIndex ) const;
 int indexOf( const String &str ) const;
 int indexOf( const String &str, unsigned int fromIndex ) const;
 int lastIndexOf( char ch ) const;
 int lastIndexOf( char ch, unsigned int fromIndex ) const;
 int lastIndexOf( const String &str ) const;
 int lastIndexOf( const String &str, unsigned int fromIndex ) const;
 String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
 String substring( unsigned int beginIndex, unsigned int endIndex ) const;


 void replace(char find, char replace);
 void replace(const String& find, const String& replace);
 void remove(unsigned int index);
 void remove(unsigned int index, unsigned int count);
 void toLowerCase(void);
 void toUpperCase(void);
 void trim(void);


 long toInt(void) const;
 float toFloat(void) const;

protected:
 char *buffer;
 unsigned int capacity;
 unsigned int len;
protected:
 void init(void);
 void invalidate(void);
 unsigned char changeBuffer(unsigned int maxStrLen);
 unsigned char concat(const char *cstr, unsigned int length);


 String & copy(const char *cstr, unsigned int length);
 String & copy(const __FlashStringHelper *pstr, unsigned int length);

 void move(String &rhs);

};

class StringSumHelper : public String
{
public:
 StringSumHelper(const String &s) : String(s) {}
 StringSumHelper(const char *p) : String(p) {}
 StringSumHelper(char c) : String(c) {}
 StringSumHelper(unsigned char num) : String(num) {}
 StringSumHelper(int num) : String(num) {}
 StringSumHelper(unsigned int num) : String(num) {}
 StringSumHelper(long num) : String(num) {}
 StringSumHelper(unsigned long num) : String(num) {}
 StringSumHelper(float num) : String(num) {}
 StringSumHelper(double num) : String(num) {}
};
# 54 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h" 1
# 24 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 1 3
# 25 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h" 2
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/math.h" 1 3
# 26 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_digital.h" 1
# 23 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_digital.h"
 extern "C" {
# 34 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_digital.h"
extern void pinMode( uint32_t dwPin, uint32_t dwMode ) ;
# 56 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_digital.h"
extern void digitalWrite( uint32_t dwPin, uint32_t dwVal ) ;
# 65 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_digital.h"
extern int digitalRead( uint32_t ulPin ) ;

extern void digitalToggle( uint32_t pin );

void ledOn(uint32_t pin);
void ledOff(uint32_t pin);


}
# 27 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 1
# 38 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
extern "C" {
# 66 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
typedef enum
{
    NRF_PWM_TASK_STOP = 
# 68 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            __builtin_offsetof (
# 68 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            NRF_PWM_Type
# 68 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            , 
# 68 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            TASKS_STOP
# 68 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            )
# 68 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                              ,
    NRF_PWM_TASK_SEQSTART0 = 
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            __builtin_offsetof (
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            NRF_PWM_Type
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            , 
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            TASKS_SEQSTART[0]
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            )
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                     ,
    NRF_PWM_TASK_SEQSTART1 = 
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            __builtin_offsetof (
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            NRF_PWM_Type
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            , 
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            TASKS_SEQSTART[1]
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            )
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                     ,
    NRF_PWM_TASK_NEXTSTEP = 
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            __builtin_offsetof (
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            NRF_PWM_Type
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            , 
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                            TASKS_NEXTSTEP
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                            )

# 72 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
} nrf_pwm_task_t;


typedef enum
{
    NRF_PWM_EVENT_STOPPED = 
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                __builtin_offsetof (
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                NRF_PWM_Type
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                , 
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                EVENTS_STOPPED
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                )
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                      ,
    NRF_PWM_EVENT_SEQSTARTED0 = 
# 78 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                __builtin_offsetof (
# 78 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                NRF_PWM_Type
# 78 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                , 
# 78 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                EVENTS_SEQSTARTED[0]
# 78 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                )
# 78 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                            ,
    NRF_PWM_EVENT_SEQSTARTED1 = 
# 79 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                __builtin_offsetof (
# 79 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                NRF_PWM_Type
# 79 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                , 
# 79 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                EVENTS_SEQSTARTED[1]
# 79 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                )
# 79 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                            ,
    NRF_PWM_EVENT_SEQEND0 = 
# 80 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                __builtin_offsetof (
# 80 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                NRF_PWM_Type
# 80 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                , 
# 80 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                EVENTS_SEQEND[0]
# 80 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                )
# 80 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                        ,
    NRF_PWM_EVENT_SEQEND1 = 
# 81 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                __builtin_offsetof (
# 81 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                NRF_PWM_Type
# 81 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                , 
# 81 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                EVENTS_SEQEND[1]
# 81 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                )
# 81 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                        ,
    NRF_PWM_EVENT_PWMPERIODEND = 
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                __builtin_offsetof (
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                NRF_PWM_Type
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                , 
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                EVENTS_PWMPERIODEND
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                )
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                                                           ,
    NRF_PWM_EVENT_LOOPSDONE = 
# 83 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                __builtin_offsetof (
# 83 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                NRF_PWM_Type
# 83 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                , 
# 83 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
                                EVENTS_LOOPSDONE
# 83 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h" 3 4
                                )

# 84 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
} nrf_pwm_event_t;


typedef enum
{
    NRF_PWM_INT_STOPPED_MASK = (0x1UL << (1UL)),
    NRF_PWM_INT_SEQSTARTED0_MASK = (0x1UL << (2UL)),
    NRF_PWM_INT_SEQSTARTED1_MASK = (0x1UL << (3UL)),
    NRF_PWM_INT_SEQEND0_MASK = (0x1UL << (4UL)),
    NRF_PWM_INT_SEQEND1_MASK = (0x1UL << (5UL)),
    NRF_PWM_INT_PWMPERIODEND_MASK = (0x1UL << (6UL)),
    NRF_PWM_INT_LOOPSDONE_MASK = (0x1UL << (7UL))
} nrf_pwm_int_mask_t;


typedef enum
{
    NRF_PWM_SHORT_SEQEND0_STOP_MASK = (0x1UL << (0UL)),
    NRF_PWM_SHORT_SEQEND1_STOP_MASK = (0x1UL << (1UL)),
    NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK = (0x1UL << (2UL)),
    NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK = (0x1UL << (3UL)),
    NRF_PWM_SHORT_LOOPSDONE_STOP_MASK = (0x1UL << (4UL))
} nrf_pwm_short_mask_t;


typedef enum
{
    NRF_PWM_MODE_UP = (0UL),
    NRF_PWM_MODE_UP_AND_DOWN = (1UL),
} nrf_pwm_mode_t;


typedef enum
{
    NRF_PWM_CLK_16MHz = (0UL),
    NRF_PWM_CLK_8MHz = (1UL),
    NRF_PWM_CLK_4MHz = (2UL),
    NRF_PWM_CLK_2MHz = (3UL),
    NRF_PWM_CLK_1MHz = (4UL),
    NRF_PWM_CLK_500kHz = (5UL),
    NRF_PWM_CLK_250kHz = (6UL),
    NRF_PWM_CLK_125kHz = (7UL)
} nrf_pwm_clk_t;







typedef enum
{
    NRF_PWM_LOAD_COMMON = (0UL),
    NRF_PWM_LOAD_GROUPED = (1UL),
    NRF_PWM_LOAD_INDIVIDUAL = (2UL),
    NRF_PWM_LOAD_WAVE_FORM = (3UL)
} nrf_pwm_dec_load_t;







typedef enum
{
    NRF_PWM_STEP_AUTO = (0UL),
    NRF_PWM_STEP_TRIGGERED = (1UL)
} nrf_pwm_dec_step_t;





typedef uint16_t nrf_pwm_values_common_t;





typedef struct {
    uint16_t group_0;
    uint16_t group_1;
} nrf_pwm_values_grouped_t;





typedef struct
{
    uint16_t channel_0;
    uint16_t channel_1;
    uint16_t channel_2;
    uint16_t channel_3;
} nrf_pwm_values_individual_t;





typedef struct {
    uint16_t channel_0;
    uint16_t channel_1;
    uint16_t channel_2;
    uint16_t counter_top;
} nrf_pwm_values_wave_form_t;





typedef union {
    nrf_pwm_values_common_t const * p_common;
    nrf_pwm_values_grouped_t const * p_grouped;
    nrf_pwm_values_individual_t const * p_individual;
    nrf_pwm_values_wave_form_t const * p_wave_form;
    uint16_t const * p_raw;
} nrf_pwm_values_t;
# 224 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
typedef struct
{
    nrf_pwm_values_t values;
# 235 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
    uint16_t length;
    uint32_t repeats;
    uint32_t end_delay;
} nrf_pwm_sequence_t;
# 247 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_task_trigger(NRF_PWM_Type * p_reg,
                                            nrf_pwm_task_t task);
# 258 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE uint32_t nrf_pwm_task_address_get(NRF_PWM_Type const * p_reg,
                                                    nrf_pwm_task_t task);







NRF_STATIC_INLINE void nrf_pwm_event_clear(NRF_PWM_Type * p_reg,
                                           nrf_pwm_event_t event);
# 279 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE bool nrf_pwm_event_check(NRF_PWM_Type const * p_reg,
                                           nrf_pwm_event_t event);
# 290 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE uint32_t nrf_pwm_event_address_get(NRF_PWM_Type const * p_reg,
                                                     nrf_pwm_event_t event);







NRF_STATIC_INLINE void nrf_pwm_shorts_enable(NRF_PWM_Type * p_reg,
                                             uint32_t mask);







NRF_STATIC_INLINE void nrf_pwm_shorts_disable(NRF_PWM_Type * p_reg,
                                              uint32_t mask);







NRF_STATIC_INLINE void nrf_pwm_shorts_set(NRF_PWM_Type * p_reg,
                                          uint32_t mask);







NRF_STATIC_INLINE void nrf_pwm_int_enable(NRF_PWM_Type * p_reg,
                                          uint32_t mask);







NRF_STATIC_INLINE void nrf_pwm_int_disable(NRF_PWM_Type * p_reg,
                                           uint32_t mask);







NRF_STATIC_INLINE void nrf_pwm_int_set(NRF_PWM_Type * p_reg,
                                       uint32_t mask);
# 355 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE uint32_t nrf_pwm_int_enable_check(NRF_PWM_Type const * p_reg, uint32_t mask);
# 408 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_enable(NRF_PWM_Type * p_reg);






NRF_STATIC_INLINE void nrf_pwm_disable(NRF_PWM_Type * p_reg);
# 427 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_pins_set(NRF_PWM_Type * p_reg,
                                        uint32_t out_pins[4]);
# 438 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_configure(NRF_PWM_Type * p_reg,
                                         nrf_pwm_clk_t base_clock,
                                         nrf_pwm_mode_t mode,
                                         uint16_t top_value);
# 450 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type * p_reg,
                                            uint8_t seq_id,
                                            nrf_pwm_sequence_t const * p_seq);
# 462 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type * p_reg,
                                           uint8_t seq_id,
                                           uint16_t const * p_values);
# 474 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t seq_id,
                                           uint16_t length);
# 486 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t seq_id,
                                               uint32_t refresh);
# 498 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t seq_id,
                                                 uint32_t end_delay);
# 510 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type * p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step);
# 524 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg, uint16_t loop_count);




NRF_STATIC_INLINE void nrf_pwm_task_trigger(NRF_PWM_Type * p_reg,
                                            nrf_pwm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
}

NRF_STATIC_INLINE uint32_t nrf_pwm_task_address_get(NRF_PWM_Type const * p_reg,
                                                    nrf_pwm_task_t task)
{
    return ((uint32_t)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_pwm_event_clear(NRF_PWM_Type * p_reg,
                                           nrf_pwm_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;

    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    (void)dummy;

}

NRF_STATIC_INLINE bool nrf_pwm_event_check(NRF_PWM_Type const * p_reg,
                                           nrf_pwm_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_pwm_event_address_get(NRF_PWM_Type const * p_reg,
                                                     nrf_pwm_event_t event)
{
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_pwm_shorts_enable(NRF_PWM_Type * p_reg, uint32_t mask)
{
    p_reg->SHORTS |= mask;
}

NRF_STATIC_INLINE void nrf_pwm_shorts_disable(NRF_PWM_Type * p_reg, uint32_t mask)
{
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_pwm_shorts_set(NRF_PWM_Type * p_reg, uint32_t mask)
{
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_pwm_int_enable(NRF_PWM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_pwm_int_disable(NRF_PWM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE void nrf_pwm_int_set(NRF_PWM_Type * p_reg, uint32_t mask)
{
    p_reg->INTEN = mask;
}

NRF_STATIC_INLINE uint32_t nrf_pwm_int_enable_check(NRF_PWM_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
}
# 628 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/nordic/nrfx/hal/nrf_pwm.h"
NRF_STATIC_INLINE void nrf_pwm_enable(NRF_PWM_Type * p_reg)
{
    p_reg->ENABLE = ((1UL) << (0UL));
}

NRF_STATIC_INLINE void nrf_pwm_disable(NRF_PWM_Type * p_reg)
{
    p_reg->ENABLE = ((0UL) << (0UL));
}

NRF_STATIC_INLINE void nrf_pwm_pins_set(NRF_PWM_Type * p_reg,
                                        uint32_t out_pins[4])
{
    uint8_t i;
    for (i = 0; i < 4; ++i)
    {
        p_reg->PSEL.OUT[i] = out_pins[i];
    }
}

NRF_STATIC_INLINE void nrf_pwm_configure(NRF_PWM_Type * p_reg,
                                         nrf_pwm_clk_t base_clock,
                                         nrf_pwm_mode_t mode,
                                         uint16_t top_value)
{
    ;

    p_reg->PRESCALER = base_clock;
    p_reg->MODE = mode;
    p_reg->COUNTERTOP = top_value;
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type * p_reg,
                                            uint8_t seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    ;

    nrf_pwm_seq_ptr_set( p_reg, seq_id, p_seq->values.p_raw);
    nrf_pwm_seq_cnt_set( p_reg, seq_id, p_seq->length);
    nrf_pwm_seq_refresh_set( p_reg, seq_id, p_seq->repeats);
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
}

NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type * p_reg,
                                           uint8_t seq_id,
                                           uint16_t const * p_values)
{
    ;
    ;
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
}

NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t seq_id,
                                           uint16_t length)
{
    ;
    ;
    ;
    p_reg->SEQ[seq_id].CNT = length;
}

NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t seq_id,
                                               uint32_t refresh)
{
    ;
    ;
    p_reg->SEQ[seq_id].REFRESH = refresh;
}

NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t seq_id,
                                                 uint32_t end_delay)
{
    ;
    ;
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
}

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type * p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << (0UL)) |
                     ((uint32_t)dec_step << (8UL));
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t loop_count)
{
    p_reg->LOOP = loop_count;
}






}
# 28 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h" 2
# 58 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h"
void tone(uint8_t pin, unsigned int frequency, unsigned long duration = 0);
# 67 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Tone.h"
void noTone(uint8_t pin);
# 55 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WMath.h" 1
# 22 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WMath.h"
extern long random( long ) ;
extern long random( long, long ) ;
extern void randomSeed( uint32_t dwSeed ) ;
extern long map( long, long, long, long, long ) ;

extern uint16_t makeWord( uint16_t w ) ;
extern uint16_t makeWord( uint8_t h, uint8_t l ) ;
# 56 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwareSerial.h" 1
# 25 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwareSerial.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Stream.h" 1
# 26 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Stream.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Print.h" 1
# 24 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Print.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stdarg.h" 1 3 4
# 25 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Print.h" 2


# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Printable.h" 1
# 22 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Printable.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/stdlib.h" 1 3
# 23 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Printable.h" 2

class Print;







class Printable
{
  public:
    virtual size_t printTo(Print& p) const = 0;
};
# 28 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Print.h" 2






class Print
{
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    virtual size_t write(const uint8_t *buffer, size_t size);

    size_t write(const char *str) {
      if (str == 
# 52 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Print.h" 3 4
                __null
# 52 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Print.h"
                    ) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    }



    virtual int availableForWrite() { return 0; }

    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = 10);
    size_t print(int, int = 10);
    size_t print(unsigned int, int = 10);
    size_t print(long, int = 10);
    size_t print(unsigned long, int = 10);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = 10);
    size_t println(int, int = 10);
    size_t println(unsigned int, int = 10);
    size_t println(long, int = 10);
    size_t println(unsigned long, int = 10);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    size_t printf(const char * format, ...);

    size_t printBuffer(uint8_t const buffer[], int len, char delim=' ', int byteline = 0);
    size_t printBuffer(char const buffer[], int size, char delim=' ', int byteline = 0)
    {
      return printBuffer((uint8_t const*) buffer, size, delim, byteline);
    }

    size_t printBufferReverse(uint8_t const buffer[], int len, char delim=' ', int byteline = 0);
    size_t printBufferReverse(char const buffer[], int size, char delim=' ', int byteline = 0)
    {
      return printBufferReverse((uint8_t const*) buffer, size, delim, byteline);
    }
};
# 27 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Stream.h" 2
# 41 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Stream.h"
enum LookaheadMode{
    SKIP_ALL,
    SKIP_NONE,
    SKIP_WHITESPACE
};



class Stream : public Print
{
  protected:
    unsigned long _timeout;
    unsigned long _startMillis;
    int timedRead();
    int timedPeek();
    int peekNextDigit(LookaheadMode lookahead, bool detectDecimal);

  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}



  void setTimeout(unsigned long timeout);

  bool find(char *target);
  bool find(uint8_t *target) { return find ((char *)target); }


  bool find(char *target, size_t length);
  bool find(uint8_t *target, size_t length) { return find ((char *)target, length); }


  bool find(char target) { return find (&target, 1); }

  bool findUntil(char *target, char *terminator);
  bool findUntil(uint8_t *target, char *terminator) { return findUntil((char *)target, terminator); }

  bool findUntil(char *target, size_t targetLen, char *terminate, size_t termLen);
  bool findUntil(uint8_t *target, size_t targetLen, char *terminate, size_t termLen) {return findUntil((char *)target, targetLen, terminate, termLen); }

  long parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');






  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01');


  size_t readBytes( char *buffer, size_t length);
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }



  size_t readBytesUntil( char terminator, char *buffer, size_t length);
  size_t readBytesUntil( char terminator, uint8_t *buffer, size_t length) { return readBytesUntil(terminator, (char *)buffer, length); }




  String readString();
  String readStringUntil(char terminator);

  protected:
  long parseInt(char ignore) { return parseInt(SKIP_ALL, ignore); }
  float parseFloat(char ignore) { return parseFloat(SKIP_ALL, ignore); }




  struct MultiTarget {
    const char *str;
    size_t len;
    size_t index;
  };



  int findMulti(struct MultiTarget *targets, int tCount);
};
# 26 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwareSerial.h" 2
# 61 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwareSerial.h"
class HardwareSerial : public Stream
{
  public:
    virtual void begin(unsigned long);
    virtual void begin(unsigned long baudrate, uint16_t config);
    virtual void end();
    virtual int available(void) = 0;
    virtual int peek(void) = 0;
    virtual int read(void) = 0;
    virtual void flush(void) = 0;
    virtual size_t write(uint8_t) = 0;
    virtual size_t write(const uint8_t *buffer, size_t size) = 0;
    using Print::write;
    virtual operator bool() = 0;
};

extern void serialEventRun(void) __attribute__((weak));
extern void serialEvent() __attribute__((weak));


extern void serialEvent1() __attribute__((weak));
extern void serialEvent2() __attribute__((weak));
# 57 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/pulse.h" 1
# 19 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/pulse.h"
       


extern "C" {
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/pulse.h"
uint32_t pulseIn(uint32_t pin, uint32_t state, uint32_t timeout);



uint32_t pulseIn(uint32_t pin, uint32_t state, uint32_t timeout = 1000000L);

}
# 58 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwarePWM.h" 1
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwarePWM.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_inc.h" 1
# 44 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_inc.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 45 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_inc.h" 2


# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/verify.h" 1
# 49 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/verify.h"
extern "C"
{
# 59 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/verify.h"
  static inline void VERIFY_MESS_impl(int32_t _status, const char* (*_fstr)(int32_t), const char* func_name, int line_number)
  {
      ::printf("%s: %d: verify failed, error = ", func_name, line_number);
      if (_fstr && _fstr(_status))
      {
        ::printf(_fstr(_status));
      }
      else
      {
        ::printf("0x%lX (%ld)", _status, _status);
      }
      ::printf("\r\n");
  }
# 134 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/verify.h"
}
# 48 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_inc.h" 2
# 40 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwarePWM.h" 2

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/atomic" 1 3
# 35 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/atomic" 3
       
# 36 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/atomic" 3





# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 1 3
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 3
       
# 34 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 3



# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_lockfree_defines.h" 1 3
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_lockfree_defines.h" 3
       
# 34 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_lockfree_defines.h" 3
# 38 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 2 3






# 43 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 3
  typedef enum memory_order
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    } memory_order;

  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };

  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(__m & int(__mod));
  }


  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | (__m & __memory_order_modifier_mask));
  }

  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(__m); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(__m); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }



  template<typename _IntTp>
    struct __atomic_base;




  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 148 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i;
  };

  }




  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, __m);
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 237 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, __m);
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, __m); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p;


      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }

      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      memory_order_seq_cst); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;

 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, __m);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, __m);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, __m1, __m2);
      }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }
    };




}
# 42 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/atomic" 2 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 1 3
# 34 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 3
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/concept_check.h" 1 3
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/concept_check.h" 3
       
# 34 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/concept_check.h" 3
# 35 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }


}


# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 1 3
# 32 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
       
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
# 42 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
namespace std
{
  typedef short unsigned int uint_least16_t;
  typedef long unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const { return value; }






    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 103 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public integral_constant<bool, !_Pp::value>
    { };
# 195 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };
# 327 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 355 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };
# 727 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 939 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;

  template<typename _Tp, typename... _Args>
    struct is_constructible;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>,
       __not_<is_constructible<__dst_t, _From>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,
   __is_trivially_constructible(_Tp, _Args...)>>
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
      : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
      : public __is_implicitly_default_constructible_impl<_Tp>::type
  { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>,
                      __is_implicitly_default_constructible_safe<_Tp>>
  { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp, _Up)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };
# 1630 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };
# 1687 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };
# 1774 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<wchar_t> : __make_signed<unsigned int>
    { };



  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };
# 1893 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;
# 1943 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };
# 1980 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };
# 2019 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2039 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2078 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };
# 2498 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename...> using __void_t = void;




  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2551 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };
# 2668 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };
# 2756 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3
  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 3089 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/type_traits" 3

}
# 55 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 115 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 135 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }



}
# 166 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 181 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/bits/move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {

     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 43 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/atomic" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/atomic" 3
  template<typename _Tp>
    struct atomic;



  template<>
  struct atomic<bool>
  {
  private:
    __atomic_base<bool> _M_base;

  public:
    atomic() noexcept = default;
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
    { return _M_base.operator=(__i); }

    bool
    operator=(bool __i) volatile noexcept
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
    { return _M_base.load(); }

    operator bool() const volatile noexcept
    { return _M_base.load(); }

    bool
    is_lock_free() const noexcept { return _M_base.is_lock_free(); }

    bool
    is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }





    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { _M_base.store(__i, __m); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
    { return _M_base.load(__m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const volatile noexcept
    { return _M_base.load(__m); }

    bool
    exchange(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    exchange(bool __i,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
     memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }
  };







  template<typename _Tp>
    struct atomic
    {
    private:

      static constexpr int _S_min_alignment
 = (sizeof(_Tp) & (sizeof(_Tp) - 1)) || sizeof(_Tp) > 16
 ? 0 : sizeof(_Tp);

      static constexpr int _S_alignment
        = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);

      alignas(_S_alignment) _Tp _M_i;

      static_assert(__is_trivially_copyable(_Tp),
      "std::atomic requires a trivially copyable type");

      static_assert(sizeof(_Tp) > 0,
      "Incomplete or zero-sized types are not supported");

    public:
      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }

      operator _Tp() const noexcept
      { return load(); }

      operator _Tp() const volatile noexcept
      { return load(); }

      _Tp
      operator=(_Tp __i) noexcept
      { store(__i); return __i; }

      _Tp
      operator=(_Tp __i) volatile noexcept
      { store(__i); return __i; }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-__alignof(_M_i)));
      }






      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
      { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, __m);
 return *__ptr;
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, __m);
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),
     __ptr, __m);
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i), std::__addressof(__i),
     __ptr, __m);
 return *__ptr;
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      true, __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) volatile noexcept
      {
 return __atomic_compare_exchange(std::__addressof(_M_i),
      std::__addressof(__e),
      std::__addressof(__i),
      false, __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
          memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }
    };



  template<typename _Tp>
    struct atomic<_Tp*>
    {
      typedef _Tp* __pointer_type;
      typedef __atomic_base<_Tp*> __base_type;
      __base_type _M_b;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { }

      operator __pointer_type() const noexcept
      { return __pointer_type(_M_b); }

      operator __pointer_type() const volatile noexcept
      { return __pointer_type(_M_b); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator++(int) noexcept
      { return _M_b++; }

      __pointer_type
      operator++(int) volatile noexcept
      { return _M_b++; }

      __pointer_type
      operator--(int) noexcept
      { return _M_b--; }

      __pointer_type
      operator--(int) volatile noexcept
      { return _M_b--; }

      __pointer_type
      operator++() noexcept
      { return ++_M_b; }

      __pointer_type
      operator++() volatile noexcept
      { return ++_M_b; }

      __pointer_type
      operator--() noexcept
      { return --_M_b; }

      __pointer_type
      operator--() volatile noexcept
      { return --_M_b; }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator+=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return _M_b.operator-=(__d); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return _M_b.operator-=(__d); }

      bool
      is_lock_free() const noexcept
      { return _M_b.is_lock_free(); }

      bool
      is_lock_free() const volatile noexcept
      { return _M_b.is_lock_free(); }





      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.store(__p, __m); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.store(__p, __m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { return _M_b.load(__m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      { return _M_b.load(__m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.exchange(__p, __m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.exchange(__p, __m); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_add(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.fetch_sub(__d, __m); }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.fetch_sub(__d, __m); }
    };



  template<>
    struct atomic<char> : __atomic_base<char>
    {
      typedef char __integral_type;
      typedef __atomic_base<char> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<signed char> : __atomic_base<signed char>
    {
      typedef signed char __integral_type;
      typedef __atomic_base<signed char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned char> : __atomic_base<unsigned char>
    {
      typedef unsigned char __integral_type;
      typedef __atomic_base<unsigned char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<short> : __atomic_base<short>
    {
      typedef short __integral_type;
      typedef __atomic_base<short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned short> : __atomic_base<unsigned short>
    {
      typedef unsigned short __integral_type;
      typedef __atomic_base<unsigned short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<int> : __atomic_base<int>
    {
      typedef int __integral_type;
      typedef __atomic_base<int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned int> : __atomic_base<unsigned int>
    {
      typedef unsigned int __integral_type;
      typedef __atomic_base<unsigned int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<long> : __atomic_base<long>
    {
      typedef long __integral_type;
      typedef __atomic_base<long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned long> : __atomic_base<unsigned long>
    {
      typedef unsigned long __integral_type;
      typedef __atomic_base<unsigned long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<long long> : __atomic_base<long long>
    {
      typedef long long __integral_type;
      typedef __atomic_base<long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<unsigned long long> : __atomic_base<unsigned long long>
    {
      typedef unsigned long long __integral_type;
      typedef __atomic_base<unsigned long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<wchar_t> : __atomic_base<wchar_t>
    {
      typedef wchar_t __integral_type;
      typedef __atomic_base<wchar_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<char16_t> : __atomic_base<char16_t>
    {
      typedef char16_t __integral_type;
      typedef __atomic_base<char16_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };


  template<>
    struct atomic<char32_t> : __atomic_base<char32_t>
    {
      typedef char32_t __integral_type;
      typedef __atomic_base<char32_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;




    };



  typedef atomic<bool> atomic_bool;


  typedef atomic<char> atomic_char;


  typedef atomic<signed char> atomic_schar;


  typedef atomic<unsigned char> atomic_uchar;


  typedef atomic<short> atomic_short;


  typedef atomic<unsigned short> atomic_ushort;


  typedef atomic<int> atomic_int;


  typedef atomic<unsigned int> atomic_uint;


  typedef atomic<long> atomic_long;


  typedef atomic<unsigned long> atomic_ulong;


  typedef atomic<long long> atomic_llong;


  typedef atomic<unsigned long long> atomic_ullong;


  typedef atomic<wchar_t> atomic_wchar_t;


  typedef atomic<char16_t> atomic_char16_t;


  typedef atomic<char32_t> atomic_char32_t;






  typedef atomic<int8_t> atomic_int8_t;


  typedef atomic<uint8_t> atomic_uint8_t;


  typedef atomic<int16_t> atomic_int16_t;


  typedef atomic<uint16_t> atomic_uint16_t;


  typedef atomic<int32_t> atomic_int32_t;


  typedef atomic<uint32_t> atomic_uint32_t;


  typedef atomic<int64_t> atomic_int64_t;


  typedef atomic<uint64_t> atomic_uint64_t;



  typedef atomic<int_least8_t> atomic_int_least8_t;


  typedef atomic<uint_least8_t> atomic_uint_least8_t;


  typedef atomic<int_least16_t> atomic_int_least16_t;


  typedef atomic<uint_least16_t> atomic_uint_least16_t;


  typedef atomic<int_least32_t> atomic_int_least32_t;


  typedef atomic<uint_least32_t> atomic_uint_least32_t;


  typedef atomic<int_least64_t> atomic_int_least64_t;


  typedef atomic<uint_least64_t> atomic_uint_least64_t;



  typedef atomic<int_fast8_t> atomic_int_fast8_t;


  typedef atomic<uint_fast8_t> atomic_uint_fast8_t;


  typedef atomic<int_fast16_t> atomic_int_fast16_t;


  typedef atomic<uint_fast16_t> atomic_uint_fast16_t;


  typedef atomic<int_fast32_t> atomic_int_fast32_t;


  typedef atomic<uint_fast32_t> atomic_uint_fast32_t;


  typedef atomic<int_fast64_t> atomic_int_fast64_t;


  typedef atomic<uint_fast64_t> atomic_uint_fast64_t;



  typedef atomic<intptr_t> atomic_intptr_t;


  typedef atomic<uintptr_t> atomic_uintptr_t;


  typedef atomic<size_t> atomic_size_t;


  typedef atomic<intmax_t> atomic_intmax_t;


  typedef atomic<uintmax_t> atomic_uintmax_t;


  typedef atomic<ptrdiff_t> atomic_ptrdiff_t;



  inline bool
  atomic_flag_test_and_set_explicit(atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline bool
  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline void
  atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m) noexcept
  { __a->clear(__m); }

  inline void
  atomic_flag_clear_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { __a->clear(__m); }

  inline bool
  atomic_flag_test_and_set(atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline bool
  atomic_flag_test_and_set(volatile atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(volatile atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }



  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const volatile atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline void
    atomic_init(atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_init(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(volatile atomic<_ITp>* __a, _ITp __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const atomic<_ITp>* __a, memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const volatile atomic<_ITp>* __a,
    memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(volatile atomic<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(volatile atomic<_ITp>* __a,
         _ITp* __i1, _ITp __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }


  template<typename _ITp>
    inline void
    atomic_store(atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline void
    atomic_store(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const volatile atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(volatile atomic<_ITp>* __a, _ITp __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(volatile atomic<_ITp>* __a,
     _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(volatile atomic<_ITp>* __a,
       _ITp* __i1, _ITp __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }





  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(__atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(__atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(__atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(volatile __atomic_base<_ITp>* __a, _ITp __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }



  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add_explicit(volatile atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_add(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_add(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_add(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(volatile atomic<_ITp*>* __a,
         ptrdiff_t __d, memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub_explicit(atomic<_ITp*>* __a, ptrdiff_t __d,
         memory_order __m) noexcept
    { return __a->fetch_sub(__d, __m); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(volatile atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }

  template<typename _ITp>
    inline _ITp*
    atomic_fetch_sub(atomic<_ITp*>* __a, ptrdiff_t __d) noexcept
    { return __a->fetch_sub(__d); }



}
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwarePWM.h" 2
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdint" 1 3
# 32 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdint" 3
       
# 33 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdint" 3
# 46 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 43 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwarePWM.h" 2








# 50 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/HardwarePWM.h"
class HardwarePWM
{
  private:
    enum { MAX_CHANNELS = 4 };
    NRF_PWM_Type * const _pwm;
    std::atomic<std::uint32_t> _owner_token;

    uint16_t _seq0[MAX_CHANNELS];

    uint16_t _max_value;
    uint8_t _clock_div;

  public:
    HardwarePWM(NRF_PWM_Type* pwm);


    void setResolution(uint8_t bitnum);
    void setMaxValue(uint16_t value);

    void setClockDiv(uint8_t div);




    bool takeOwnership (uint32_t token);


    bool releaseOwnership(uint32_t token);


    bool isOwner(uint32_t token) const
    {
      return this->_owner_token == token;
    }


    bool addPin (uint8_t pin);


    bool removePin (uint8_t pin);


    int pin2channel(uint8_t pin) const
    {
      pin = g_ADigitalPinMap[pin];
      for(int i=0; i<MAX_CHANNELS; i++)
      {
        if ( _pwm->PSEL.OUT[i] == pin ) return i;
      }
      return (-1);
    }


    bool checkPin(uint8_t pin) const
    {
      return pin2channel(pin) >= 0;
    }

    void begin (void);
    bool enabled (void);
    void stop (void);


    bool writePin (uint8_t pin, uint16_t value, bool inverted = false);
    bool writeChannel(uint8_t ch , uint16_t value, bool inverted = false);


    uint16_t readPin (uint8_t pin) const;
    uint16_t readChannel (uint8_t ch) const;


    uint8_t usedChannelCount(void) const;
    uint8_t freeChannelCount(void) const;

    static void DebugOutput(Stream& logger);

  private:
    void _set_psel(int ch, uint32_t value);
};

extern HardwarePWM HwPWM0;
extern HardwarePWM HwPWM1;
extern HardwarePWM HwPWM2;


extern HardwarePWM HwPWM3;


extern HardwarePWM* HwPWMx[];
# 59 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/SoftwareTimer.h" 1
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/SoftwareTimer.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 1
# 40 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/SoftwareTimer.h" 2

class SoftwareTimer
{
  private:
    TimerHandle_t _handle;

  public:
    SoftwareTimer();
    virtual ~SoftwareTimer();

    void begin(uint32_t ms, TimerCallbackFunction_t callback, void* timerID = 
# 50 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/SoftwareTimer.h" 3 4
                                                                             __null
# 50 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/SoftwareTimer.h"
                                                                                 , bool repeating = true);
    TimerHandle_t getHandle(void) { return _handle; }

    void setID(void* id);
    void* getID(void);

    bool start(void);
    bool stop (void);
    bool reset (void);
    bool setPeriod(uint32_t ms);
};
# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Uart.h" 1
# 20 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Uart.h"
       




# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/RingBuffer.h" 1
# 32 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/RingBuffer.h"
class RingBuffer
{
  public:
    uint8_t _aucBuffer[64] ;
    int _iHead ;
    int _iTail ;

  public:
    RingBuffer( void ) ;
    void store_char( uint8_t c ) ;
 void clear();
 int read_char();
 int available();
 int peek();
 bool isFull();

  private:
 int nextIndex(int index);
} ;
# 26 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Uart.h" 2

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/variants/Seeed_XIAO_nRF52840_Sense/variant.h" 1
# 17 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/variants/Seeed_XIAO_nRF52840_Sense/variant.h"
extern "C"
{
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/variants/Seeed_XIAO_nRF52840_Sense/variant.h"
static const uint8_t A0 = (0) ;
static const uint8_t A1 = (1) ;
static const uint8_t A2 = (2) ;
static const uint8_t A3 = (3) ;
static const uint8_t A4 = (4) ;
static const uint8_t A5 = (5) ;
# 99 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/variants/Seeed_XIAO_nRF52840_Sense/variant.h"
static const uint8_t SS = (7);
static const uint8_t MOSI = (10) ;
static const uint8_t MISO = (9) ;
static const uint8_t SCK = (8) ;
# 116 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/variants/Seeed_XIAO_nRF52840_Sense/variant.h"
static const uint8_t SDA = (4);
static const uint8_t SCL = (5);
# 143 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/variants/Seeed_XIAO_nRF52840_Sense/variant.h"
}
# 28 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Uart.h" 2

# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstddef" 1 3
# 42 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstddef" 3
       
# 43 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstddef" 3







# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 51 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstddef" 2 3



# 53 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/arm-none-eabi/include/c++/7.2.1/cstddef" 3
namespace std
{

  using ::max_align_t;
}
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Uart.h" 2


# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Uart.h"
class Uart : public HardwareSerial
{
  public:
    Uart(NRF_UARTE_Type *_nrfUart, IRQn_Type _IRQn, uint8_t _pinRX, uint8_t _pinTX);
    Uart(NRF_UARTE_Type *_nrfUart, IRQn_Type _IRQn, uint8_t _pinRX, uint8_t _pinTX, uint8_t _pinCTS, uint8_t _pinRTS);

    void setPins(uint8_t pin_rx, uint8_t pin_tx);
    void begin(unsigned long baudRate);
    void begin(unsigned long baudrate, uint16_t config);
    void end();
    int available();
    int peek();
    int read();
    void flush();
    size_t write(uint8_t data);
    size_t write(const uint8_t *buffer, size_t size);
    using Print::write;

    void IrqHandler();

    operator bool ()
    {
      return _begun;
    }

  private:
    NRF_UARTE_Type *nrfUart;
    RingBuffer rxBuffer;
    uint8_t rxRcv;
    uint8_t txBuffer[64];

    IRQn_Type IRQn;

    uint8_t uc_pinRX;
    uint8_t uc_pinTX;
    uint8_t uc_pinCTS;
    uint8_t uc_pinRTS;
    uint8_t uc_hwFlow;

    bool _begun;


    SemaphoreHandle_t _end_tx_sem;
};
# 105 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Uart.h"
extern Uart Serial1;
# 61 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2




# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_CDC.h" 1
# 28 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_CDC.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_TinyUSB_API.h" 1
# 41 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_TinyUSB_API.h"
extern "C" {




void TinyUSB_Device_Init(uint8_t rhport) __attribute__((weak));


void TinyUSB_Device_Task(void) __attribute__((weak));


void TinyUSB_Device_FlushCDC(void) __attribute__((weak));


}
# 65 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_TinyUSB_API.h"
void TinyUSB_Port_EnterDFU(void);



void TinyUSB_Port_InitDevice(uint8_t rhport);




uint8_t TinyUSB_Port_GetSerialNumber(uint8_t serial_id[16]);
# 29 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_CDC.h" 2



# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Interface.h" 1
# 28 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Interface.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 29 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Interface.h" 2


class Adafruit_USBD_Interface {
protected:
  const char *_desc_str;

public:
  Adafruit_USBD_Interface(void) { _desc_str = 
# 36 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Interface.h" 3 4
                                             __null
# 36 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Interface.h"
                                                 ; }



  virtual uint16_t getInterfaceDescriptor(uint8_t itfnum, uint8_t *buf,
                                          uint16_t bufsize) = 0;

  void setStringDescriptor(const char *str) { _desc_str = str; }
  const char *getStringDescriptor(void) { return _desc_str; }
};
# 33 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_CDC.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Stream.h" 1
# 34 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_CDC.h" 2

class Adafruit_USBD_CDC : public Stream, public Adafruit_USBD_Interface {
public:
  Adafruit_USBD_CDC(void);

  static uint8_t getInstanceCount(void);


  virtual uint16_t getInterfaceDescriptor(uint8_t itfnum, uint8_t *buf,
                                          uint16_t bufsize);

  void setPins(uint8_t pin_rx, uint8_t pin_tx) {
    (void)pin_rx;
    (void)pin_tx;
  }
  void begin(uint32_t baud);
  void begin(uint32_t baud, uint8_t config);
  void end(void);


  uint32_t baud(void);
  uint8_t stopbits(void);
  uint8_t paritytype(void);
  uint8_t numbits(void);
  int dtr(void);


  virtual int available(void);
  virtual int peek(void);

  virtual int read(void);
  size_t read(uint8_t *buffer, size_t size);

  virtual void flush(void);
  virtual size_t write(uint8_t);

  virtual size_t write(const uint8_t *buffer, size_t size);
  size_t write(const char *buffer, size_t size) {
    return write((const uint8_t *)buffer, size);
  }

  virtual int availableForWrite(void);
  using Print::write;
  operator bool();

private:
  enum { INVALID_INSTANCE = 0xffu };
  static uint8_t _instance_count;

  uint8_t _instance;

  bool isValid(void) { return _instance != INVALID_INSTANCE; }
};



extern Adafruit_USBD_CDC Serial;
# 66 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2


# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/delay.h" 1
# 23 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/delay.h"
extern "C" {







static inline bool dwt_enabled(void) __attribute__((always_inline));
static inline bool dwt_enabled(void)
{
  return (((CoreDebug_Type *) (0xE000EDF0UL))->DEMCR & (1UL << 24U)) && (((DWT_Type *) (0xE0001000UL) )->CTRL & (0x1UL ));
}
# 44 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/delay.h"
extern uint32_t millis( void ) ;
# 56 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/delay.h"
static inline uint32_t micros( void ) __attribute__((always_inline));
static inline uint32_t micros( void )
{

  return dwt_enabled() ? (((DWT_Type *) (0xE0001000UL) )->CYCCNT / 64) : ( ( ((uint64_t)(xTaskGetTickCount())) * 1000000) / 1024 );
}







extern void delay( uint32_t dwMs );






static __inline__ void delayMicroseconds( uint32_t ) __attribute__((always_inline, unused)) ;
static __inline__ void delayMicroseconds( uint32_t usec )
{
  nrfx_coredep_delay_us(usec);
}




void dwt_enable(void);
void dwt_disable(void);
# 114 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/delay.h"
}
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/binary.h" 1
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/debug.h" 1
# 40 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/debug.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/common_inc.h" 1
# 41 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/debug.h" 2


 extern "C" {



const char* dbg_ble_event_str(uint16_t evt_id);
const char* dbg_err_str(int32_t err_id);
const char* dbg_hci_str(uint8_t id);


int dbgHeapTotal(void);
int dbgHeapUsed(void);

int dbgStackTotal(void);
int dbgStackUsed(void);

static inline int dbgHeapFree(void)
{
  return dbgHeapTotal() - dbgHeapUsed();
}

void dbgMemInfo(void);
void dbgPrintVersion(void);
void dbgDumpMemory(void const *buf, uint8_t size, uint16_t count, bool printOffset);
void dbgDumpMemoryCFormat(const char* str, void const *buf, uint16_t count);


 }
# 72 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/utilities.h" 1
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/utilities.h"
extern "C" {


typedef struct
{
  uint32_t key;
  void const * data;
}lookup_entry_t;

typedef struct
{
  uint16_t count;
  lookup_entry_t const* items;
} lookup_table_t;

void const * lookup_find(lookup_table_t const* p_table, uint32_t key);

const char* getBootloaderVersion(void);
const char* getMcuUniqueID(void);


}
# 73 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h" 1
# 46 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h"
extern "C"{


typedef struct
{
  void* malloced_data;
  void const* callback_func;

  uint8_t arg_count;


  uint32_t arguments[1];
}ada_callback_t;


# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h" 3
static_assert(
# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h"
sizeof(ada_callback_t) == 16
# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h" 3
, 
# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h"
"Assert failed"
# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h" 3
)
# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h"
                                            ;


typedef void (*adacb_0arg_t) (void);
typedef void (*adacb_1arg_t) (uint32_t);
typedef void (*adacb_2arg_t) (uint32_t, uint32_t);
typedef void (*adacb_3arg_t) (uint32_t, uint32_t, uint32_t);
typedef void (*adacb_4arg_t) (uint32_t, uint32_t, uint32_t, uint32_t);
typedef void (*adacb_5arg_t) (uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
# 100 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/utility/AdaCallback.h"
void ada_callback_init(uint32_t stack_sz);
bool ada_callback_invoke(const void* mdata, uint32_t mlen, const void* func, uint32_t arguments[], uint8_t argcount);
void ada_callback_queue(ada_callback_t* cb_item);
bool ada_callback_queue_resize(uint32_t new_depth);


}
# 74 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2





# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring.h" 1
# 19 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring.h"
       


extern "C" {





extern uint32_t bootloaderVersion;

extern void init(void);

uint32_t readResetReason(void);

void enterSerialDfu(void);
void enterOTADfu(void);
void enterUf2Dfu(void);

void waitForEvent(void);
void systemOff(uint32_t pin, uint8_t wake_logic);


static inline bool isInISR(void)
{
  return (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICSR & (0x1FFUL )) != 0 ;
}





float readCPUTemperature( void );


}
# 80 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_analog.h" 1
# 20 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_analog.h"
       




extern "C" {







typedef enum _eAnalogReference
{
  AR_DEFAULT,
  AR_INTERNAL,
  AR_INTERNAL_3_0,
  AR_INTERNAL_2_4,
  AR_INTERNAL_1_8,
  AR_INTERNAL_1_2,
  AR_VDD4
} eAnalogReference ;
# 62 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_analog.h"
extern void analogReference( eAnalogReference ulMode ) ;






extern void analogOversampling( uint32_t ulOversampling );







extern void analogWrite( uint32_t ulPin, uint32_t ulValue ) ;
# 86 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_analog.h"
extern uint32_t analogRead( uint32_t ulPin ) ;






extern uint32_t analogReadVDD( void ) ;







extern void analogReadResolution(int res);






extern void analogWriteResolution(uint8_t res);
# 117 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_analog.h"
extern void analogSampleTime(uint8_t sTime);







extern void analogCalibrateOffset( void );

extern void analogOutputInit( void ) ;


}
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_shift.h" 1
# 23 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/wiring_shift.h"
 extern "C" {





extern uint32_t shiftIn( uint32_t ulDataPin, uint32_t ulClockPin, uint32_t ulBitOrder ) ;





extern void shiftOut( uint32_t ulDataPin, uint32_t ulClockPin, uint32_t ulBitOrder, uint32_t ulVal ) ;



}
# 83 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WInterrupts.h" 1
# 25 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WInterrupts.h"
extern "C" {
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/WInterrupts.h"
typedef void (*voidFuncPtr)(void);







int attachInterrupt(uint32_t pin, voidFuncPtr callback, uint32_t mode);




void detachInterrupt(uint32_t pin);


}
# 84 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/cores/nRF5/Arduino.h" 2







  template<class T, class L>
  auto min(const T& a, const L& b) -> decltype((b < a) ? b : a)
  {
    return (b < a) ? b : a;
  }

  template<class T, class L>
  auto max(const T& a, const L& b) -> decltype((b < a) ? b : a)
  {
    return (a < b) ? b : a;
  }
# 3 "src/main.cpp" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 1
# 34 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_option.h" 1
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_option.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_compiler.h" 1
# 142 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_compiler.h"
         
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_option.h" 2
# 159 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_option.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_config.h" 1
# 29 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_config.h"
 extern "C" {






# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/ports/nrf/tusb_config_nrf.h" 1
# 29 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/ports/nrf/tusb_config_nrf.h"
extern "C" {
# 87 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/ports/nrf/tusb_config_nrf.h"
}
# 37 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_config.h" 2
# 50 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_config.h"
 }
# 160 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_option.h" 2
# 35 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 2



# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Device.h" 1
# 29 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Device.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 1
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h"
 extern "C" {





# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 1
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h"
 extern "C" {
# 64 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h"
# 1 "/home/leroy/.platformio/packages/toolchain-gccarmnoneeabi@1.70201.0/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h" 1 3 4
# 65 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 2




# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb_option.h" 1
# 70 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_compiler.h" 1
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_verify.h" 1
# 68 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_verify.h"
 extern "C" {
# 178 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_verify.h"
 }
# 72 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_types.h" 1
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_types.h"
 extern "C" {







typedef enum
{
  TUSB_SPEED_FULL = 0,
  TUSB_SPEED_LOW = 1,
  TUSB_SPEED_HIGH = 2,
  TUSB_SPEED_INVALID = 0xff,
}tusb_speed_t;


typedef enum
{
  TUSB_XFER_CONTROL = 0 ,
  TUSB_XFER_ISOCHRONOUS ,
  TUSB_XFER_BULK ,
  TUSB_XFER_INTERRUPT
}tusb_xfer_type_t;

typedef enum
{
  TUSB_DIR_OUT = 0,
  TUSB_DIR_IN = 1,

  TUSB_DIR_IN_MASK = 0x80
}tusb_dir_t;


typedef enum
{
  TUSB_ISO_EP_ATT_NO_SYNC = 0x00,
  TUSB_ISO_EP_ATT_ASYNCHRONOUS = 0x04,
  TUSB_ISO_EP_ATT_ADAPTIVE = 0x08,
  TUSB_ISO_EP_ATT_SYNCHRONOUS = 0x0C,
  TUSB_ISO_EP_ATT_DATA = 0x00,
  TUSB_ISO_EP_ATT_EXPLICIT_FB = 0x10,
  TUSB_ISO_EP_ATT_IMPLICIT_FB = 0x20,
}tusb_iso_ep_attribute_t;


typedef enum
{
  TUSB_DESC_DEVICE = 0x01,
  TUSB_DESC_CONFIGURATION = 0x02,
  TUSB_DESC_STRING = 0x03,
  TUSB_DESC_INTERFACE = 0x04,
  TUSB_DESC_ENDPOINT = 0x05,
  TUSB_DESC_DEVICE_QUALIFIER = 0x06,
  TUSB_DESC_OTHER_SPEED_CONFIG = 0x07,
  TUSB_DESC_INTERFACE_POWER = 0x08,
  TUSB_DESC_OTG = 0x09,
  TUSB_DESC_DEBUG = 0x0A,
  TUSB_DESC_INTERFACE_ASSOCIATION = 0x0B,

  TUSB_DESC_BOS = 0x0F,
  TUSB_DESC_DEVICE_CAPABILITY = 0x10,

  TUSB_DESC_FUNCTIONAL = 0x21,


  TUSB_DESC_CS_DEVICE = 0x21,
  TUSB_DESC_CS_CONFIGURATION = 0x22,
  TUSB_DESC_CS_STRING = 0x23,
  TUSB_DESC_CS_INTERFACE = 0x24,
  TUSB_DESC_CS_ENDPOINT = 0x25,

  TUSB_DESC_SUPERSPEED_ENDPOINT_COMPANION = 0x30,
  TUSB_DESC_SUPERSPEED_ISO_ENDPOINT_COMPANION = 0x31
}tusb_desc_type_t;

typedef enum
{
  TUSB_REQ_GET_STATUS = 0 ,
  TUSB_REQ_CLEAR_FEATURE = 1 ,
  TUSB_REQ_RESERVED = 2 ,
  TUSB_REQ_SET_FEATURE = 3 ,
  TUSB_REQ_RESERVED2 = 4 ,
  TUSB_REQ_SET_ADDRESS = 5 ,
  TUSB_REQ_GET_DESCRIPTOR = 6 ,
  TUSB_REQ_SET_DESCRIPTOR = 7 ,
  TUSB_REQ_GET_CONFIGURATION = 8 ,
  TUSB_REQ_SET_CONFIGURATION = 9 ,
  TUSB_REQ_GET_INTERFACE = 10 ,
  TUSB_REQ_SET_INTERFACE = 11 ,
  TUSB_REQ_SYNCH_FRAME = 12
}tusb_request_code_t;

typedef enum
{
  TUSB_REQ_FEATURE_EDPT_HALT = 0,
  TUSB_REQ_FEATURE_REMOTE_WAKEUP = 1,
  TUSB_REQ_FEATURE_TEST_MODE = 2
}tusb_request_feature_selector_t;

typedef enum
{
  TUSB_REQ_TYPE_STANDARD = 0,
  TUSB_REQ_TYPE_CLASS,
  TUSB_REQ_TYPE_VENDOR,
  TUSB_REQ_TYPE_INVALID
} tusb_request_type_t;

typedef enum
{
  TUSB_REQ_RCPT_DEVICE =0,
  TUSB_REQ_RCPT_INTERFACE,
  TUSB_REQ_RCPT_ENDPOINT,
  TUSB_REQ_RCPT_OTHER
} tusb_request_recipient_t;


typedef enum
{
  TUSB_CLASS_UNSPECIFIED = 0 ,
  TUSB_CLASS_AUDIO = 1 ,
  TUSB_CLASS_CDC = 2 ,
  TUSB_CLASS_HID = 3 ,
  TUSB_CLASS_RESERVED_4 = 4 ,
  TUSB_CLASS_PHYSICAL = 5 ,
  TUSB_CLASS_IMAGE = 6 ,
  TUSB_CLASS_PRINTER = 7 ,
  TUSB_CLASS_MSC = 8 ,
  TUSB_CLASS_HUB = 9 ,
  TUSB_CLASS_CDC_DATA = 10 ,
  TUSB_CLASS_SMART_CARD = 11 ,
  TUSB_CLASS_RESERVED_12 = 12 ,
  TUSB_CLASS_CONTENT_SECURITY = 13 ,
  TUSB_CLASS_VIDEO = 14 ,
  TUSB_CLASS_PERSONAL_HEALTHCARE = 15 ,
  TUSB_CLASS_AUDIO_VIDEO = 16 ,

  TUSB_CLASS_DIAGNOSTIC = 0xDC ,
  TUSB_CLASS_WIRELESS_CONTROLLER = 0xE0 ,
  TUSB_CLASS_MISC = 0xEF ,
  TUSB_CLASS_APPLICATION_SPECIFIC = 0xFE ,
  TUSB_CLASS_VENDOR_SPECIFIC = 0xFF
}tusb_class_code_t;

typedef enum
{
  MISC_SUBCLASS_COMMON = 2
}misc_subclass_type_t;

typedef enum
{
  MISC_PROTOCOL_IAD = 1
}misc_protocol_type_t;

typedef enum
{
  APP_SUBCLASS_USBTMC = 0x03,
  APP_SUBCLASS_DFU_RUNTIME = 0x01
} app_subclass_type_t;

typedef enum
{
  DEVICE_CAPABILITY_WIRELESS_USB = 0x01,
  DEVICE_CAPABILITY_USB20_EXTENSION = 0x02,
  DEVICE_CAPABILITY_SUPERSPEED_USB = 0x03,
  DEVICE_CAPABILITY_CONTAINER_id = 0x04,
  DEVICE_CAPABILITY_PLATFORM = 0x05,
  DEVICE_CAPABILITY_POWER_DELIVERY = 0x06,
  DEVICE_CAPABILITY_BATTERY_INFO = 0x07,
  DEVICE_CAPABILITY_PD_CONSUMER_PORT = 0x08,
  DEVICE_CAPABILITY_PD_PROVIDER_PORT = 0x09,
  DEVICE_CAPABILITY_SUPERSPEED_PLUS = 0x0A,
  DEVICE_CAPABILITY_PRECESION_TIME_MEASUREMENT = 0x0B,
  DEVICE_CAPABILITY_WIRELESS_USB_EXT = 0x0C,
  DEVICE_CAPABILITY_BILLBOARD = 0x0D,
  DEVICE_CAPABILITY_AUTHENTICATION = 0x0E,
  DEVICE_CAPABILITY_BILLBOARD_EX = 0x0F,
  DEVICE_CAPABILITY_CONFIGURATION_SUMMARY = 0x10
}device_capability_type_t;

enum {
  TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP = (1UL << (5)),
  TUSB_DESC_CONFIG_ATT_SELF_POWERED = (1UL << (6)),
};




typedef enum
{
  TUSB_DEVICE_STATE_UNPLUG = 0 ,
  TUSB_DEVICE_STATE_CONFIGURED ,
  TUSB_DEVICE_STATE_SUSPENDED ,
}tusb_device_state_t;

typedef enum
{
  XFER_RESULT_SUCCESS,
  XFER_RESULT_FAILED,
  XFER_RESULT_STALLED,
}xfer_result_t;

enum
{
  DESC_OFFSET_LEN = 0,
  DESC_OFFSET_TYPE = 1
};

enum
{
  INTERFACE_INVALID_NUMBER = 0xff
};


typedef enum
{
  MS_OS_20_SET_HEADER_DESCRIPTOR = 0x00,
  MS_OS_20_SUBSET_HEADER_CONFIGURATION = 0x01,
  MS_OS_20_SUBSET_HEADER_FUNCTION = 0x02,
  MS_OS_20_FEATURE_COMPATBLE_ID = 0x03,
  MS_OS_20_FEATURE_REG_PROPERTY = 0x04,
  MS_OS_20_FEATURE_MIN_RESUME_TIME = 0x05,
  MS_OS_20_FEATURE_MODEL_ID = 0x06,
  MS_OS_20_FEATURE_CCGP_DEVICE = 0x07,
  MS_OS_20_FEATURE_VENDOR_REVISION = 0x08
} microsoft_os_20_type_t;

enum
{
  CONTROL_STAGE_SETUP,
  CONTROL_STAGE_DATA,
  CONTROL_STAGE_ACK
};










typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint16_t bcdUSB ;

  uint8_t bDeviceClass ;
  uint8_t bDeviceSubClass ;
  uint8_t bDeviceProtocol ;
  uint8_t bMaxPacketSize0 ;

  uint16_t idVendor ;
  uint16_t idProduct ;
  uint16_t bcdDevice ;
  uint8_t iManufacturer ;
  uint8_t iProduct ;
  uint8_t iSerialNumber ;

  uint8_t bNumConfigurations ;
} tusb_desc_device_t;

static_assert( sizeof(tusb_desc_device_t) == 18, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint16_t wTotalLength ;
  uint8_t bNumDeviceCaps ;
} tusb_desc_bos_t;

static_assert( sizeof(tusb_desc_bos_t) == 5, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint16_t wTotalLength ;

  uint8_t bNumInterfaces ;
  uint8_t bConfigurationValue ;
  uint8_t iConfiguration ;
  uint8_t bmAttributes ;
  uint8_t bMaxPower ;
} tusb_desc_configuration_t;

static_assert( sizeof(tusb_desc_configuration_t) == 9, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;

  uint8_t bInterfaceNumber ;
  uint8_t bAlternateSetting ;
  uint8_t bNumEndpoints ;
  uint8_t bInterfaceClass ;
  uint8_t bInterfaceSubClass ;
  uint8_t bInterfaceProtocol ;
  uint8_t iInterface ;
} tusb_desc_interface_t;

static_assert( sizeof(tusb_desc_interface_t) == 9, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;

  uint8_t bEndpointAddress ;

  struct __attribute__ ((packed)) {
    uint8_t xfer : 2;
    uint8_t sync : 2;
    uint8_t usage : 2;
    uint8_t : 2;
  } bmAttributes;

  uint16_t wMaxPacketSize ;
  uint8_t bInterval ;
} tusb_desc_endpoint_t;

static_assert( sizeof(tusb_desc_endpoint_t) == 7, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint16_t wTotalLength ;

  uint8_t bNumInterfaces ;
  uint8_t bConfigurationValue ;
  uint8_t iConfiguration ;
  uint8_t bmAttributes ;
  uint8_t bMaxPower ;
} tusb_desc_other_speed_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint16_t bcdUSB ;

  uint8_t bDeviceClass ;
  uint8_t bDeviceSubClass ;
  uint8_t bDeviceProtocol ;

  uint8_t bMaxPacketSize0 ;
  uint8_t bNumConfigurations ;
  uint8_t bReserved ;
} tusb_desc_device_qualifier_t;

static_assert( sizeof(tusb_desc_device_qualifier_t) == 10, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;

  uint8_t bFirstInterface ;
  uint8_t bInterfaceCount ;

  uint8_t bFunctionClass ;
  uint8_t bFunctionSubClass ;
  uint8_t bFunctionProtocol ;

  uint8_t iFunction ;
} tusb_desc_interface_assoc_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint16_t unicode_string[];
} tusb_desc_string_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength;
  uint8_t bDescriptorType ;
  uint8_t bDevCapabilityType;
  uint8_t bReserved;
  uint8_t PlatformCapabilityUUID[16];
  uint8_t CapabilityData[];
} tusb_desc_bos_platform_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength;
  uint8_t bDescriptorType;
  uint8_t bScheme;
  char url[];
} tusb_desc_webusb_url_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength;
  uint8_t bDescriptorType;

  union {
    struct __attribute__ ((packed)) {
      uint8_t bitCanDnload : 1;
      uint8_t bitCanUpload : 1;
      uint8_t bitManifestationTolerant : 1;
      uint8_t bitWillDetach : 1;
      uint8_t reserved : 4;
    } bmAttributes;

    uint8_t bAttributes;
  };

  uint16_t wDetachTimeOut;
  uint16_t wTransferSize;
  uint16_t bcdDFUVersion;
} tusb_desc_dfu_functional_t;




typedef struct __attribute__ ((packed)){
  union {
    struct __attribute__ ((packed)) {
      uint8_t recipient : 5;
      uint8_t type : 2;
      uint8_t direction : 1;
    } bmRequestType_bit;

    uint8_t bmRequestType;
  };

  uint8_t bRequest;
  uint16_t wValue;
  uint16_t wIndex;
  uint16_t wLength;
} tusb_control_request_t;

static_assert( sizeof(tusb_control_request_t) == 8, "size is not correct");










static inline tusb_dir_t tu_edpt_dir(uint8_t addr)
{
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
}


static inline uint8_t tu_edpt_number(uint8_t addr)
{
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
}

static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir)
{
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return (desc_ep->wMaxPacketSize) & ( (
# 518 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_types.h" 3 4
                                              (0xffffffffUL) 
# 518 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_types.h"
                                              << (0)) & (
# 518 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_types.h" 3 4
                                              (0xffffffffUL) 
# 518 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_types.h"
                                              >> (31 - (10))) );
}




static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
}

static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}


 }
# 73 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 2

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_error.h" 1
# 37 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_error.h"
 extern "C" {
# 58 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_error.h"
typedef enum
{
  TUSB_ERROR_NONE, TUSB_ERROR_INVALID_PARA, TUSB_ERROR_DEVICE_NOT_READY, TUSB_ERROR_INTERFACE_IS_BUSY, TUSB_ERROR_HCD_OPEN_PIPE_FAILED, TUSB_ERROR_OSAL_TIMEOUT, TUSB_ERROR_CDCH_DEVICE_NOT_MOUNTED, TUSB_ERROR_MSCH_DEVICE_NOT_MOUNTED, TUSB_ERROR_NOT_SUPPORTED, TUSB_ERROR_NOT_ENOUGH_MEMORY, TUSB_ERROR_FAILED,
  TUSB_ERROR_COUNT
}tusb_error_t;







 }
# 75 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_timeout.h" 1
# 38 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_timeout.h"
extern "C" {


typedef struct {
  uint32_t start;
  uint32_t interval;
}tu_timeout_t;
# 75 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_timeout.h"
 }
# 76 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 2






bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed);


void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* p_desc, uint16_t desc_len, uint8_t driver_id);


uint16_t tu_desc_get_interface_total_len(tusb_desc_interface_t const* desc_itf, uint8_t itf_count, uint16_t max_len);
# 99 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h"
__attribute__ ((always_inline)) static inline uint32_t tu_u32(uint8_t b3, uint8_t b2, uint8_t b1, uint8_t b0)
{
  return ( ((uint32_t) b3) << 24) | ( ((uint32_t) b2) << 16) | ( ((uint32_t) b1) << 8) | b0;
}

__attribute__ ((always_inline)) static inline uint16_t tu_u16(uint8_t high, uint8_t low)
{
  return (uint16_t) ((((uint16_t) high) << 8) | low);
}

__attribute__ ((always_inline)) static inline uint8_t tu_u32_byte3(uint32_t ui32) { return ((uint8_t) ((((uint32_t) ui32) >> 24) & 0x000000ff)); }
__attribute__ ((always_inline)) static inline uint8_t tu_u32_byte2(uint32_t ui32) { return ((uint8_t) ((((uint32_t) ui32) >> 16) & 0x000000ff)); }
__attribute__ ((always_inline)) static inline uint8_t tu_u32_byte1(uint32_t ui32) { return ((uint8_t) ((((uint32_t) ui32) >> 8) & 0x000000ff)); }
__attribute__ ((always_inline)) static inline uint8_t tu_u32_byte0(uint32_t ui32) { return ((uint8_t) (((uint32_t) ui32) & 0x000000ff)); }

__attribute__ ((always_inline)) static inline uint16_t tu_u32_high16(uint32_t ui32) { return (uint16_t) (ui32 >> 16); }
__attribute__ ((always_inline)) static inline uint16_t tu_u32_low16 (uint32_t ui32) { return (uint16_t) (ui32 & 0x0000ffffu); }

__attribute__ ((always_inline)) static inline uint8_t tu_u16_high(uint16_t ui16) { return ((uint8_t) (((ui16) >> 8) & 0x00ff)); }
__attribute__ ((always_inline)) static inline uint8_t tu_u16_low (uint16_t ui16) { return ((uint8_t) ((ui16) & 0x00ff)); }


__attribute__ ((always_inline)) static inline uint32_t tu_bit_set (uint32_t value, uint8_t pos) { return value | (1UL << (pos)); }
__attribute__ ((always_inline)) static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~(1UL << (pos))); }
__attribute__ ((always_inline)) static inline bool tu_bit_test (uint32_t value, uint8_t pos) { return (value & (1UL << (pos))) ? true : false; }


__attribute__ ((always_inline)) static inline uint8_t tu_min8 (uint8_t x, uint8_t y ) { return (x < y) ? x : y; }
__attribute__ ((always_inline)) static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
__attribute__ ((always_inline)) static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }


__attribute__ ((always_inline)) static inline uint8_t tu_max8 (uint8_t x, uint8_t y ) { return (x > y) ? x : y; }
__attribute__ ((always_inline)) static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
__attribute__ ((always_inline)) static inline uint32_t tu_max32 (uint32_t x, uint32_t y) { return (x > y) ? x : y; }


__attribute__ ((always_inline)) static inline uint32_t tu_align(uint32_t value, uint32_t alignment)
{
  return value & ((uint32_t) ~(alignment-1));
}

__attribute__ ((always_inline)) static inline uint32_t tu_align16 (uint32_t value) { return (value & 0xFFFFFFF0UL); }
__attribute__ ((always_inline)) static inline uint32_t tu_align32 (uint32_t value) { return (value & 0xFFFFFFE0UL); }
__attribute__ ((always_inline)) static inline uint32_t tu_align4k (uint32_t value) { return (value & 0xFFFFF000UL); }
__attribute__ ((always_inline)) static inline uint32_t tu_offset4k(uint32_t value) { return (value & 0xFFFUL); }


__attribute__ ((always_inline)) static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }


__attribute__ ((always_inline)) static inline bool tu_within(uint32_t lower, uint32_t value, uint32_t upper)
{
  return (lower <= value) && (value <= upper);
}



static inline uint8_t tu_log2(uint32_t value)
{
  uint8_t result = 0;
  while (value >>= 1) { result++; }
  return result;
}
# 233 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h"
__attribute__ ((always_inline)) static inline uint32_t tu_unaligned_read32 (const void* mem) { return *((uint32_t const *) mem); }
__attribute__ ((always_inline)) static inline uint16_t tu_unaligned_read16 (const void* mem) { return *((uint16_t const *) mem); }

__attribute__ ((always_inline)) static inline void tu_unaligned_write32 (void* mem, uint32_t value ) { *((uint32_t*) mem) = value; }
__attribute__ ((always_inline)) static inline void tu_unaligned_write16 (void* mem, uint16_t value ) { *((uint16_t*) mem) = value; }
# 403 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h"
 }
# 38 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h" 1
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h"
 extern "C" {





# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_common.h" 1
# 38 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h" 2
# 48 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h"
typedef void (*osal_task_func_t)( void * );




# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h" 1
# 37 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h"
extern "C" {





static inline void osal_task_delay(uint32_t msec)
{
  vTaskDelay( ( ( TickType_t ) ( ( ( TickType_t ) ( msec ) * ( TickType_t ) 1024 ) / ( TickType_t ) 1000 ) ) );
}




typedef StaticSemaphore_t osal_semaphore_def_t;
typedef SemaphoreHandle_t osal_semaphore_t;

static inline osal_semaphore_t osal_semaphore_create(osal_semaphore_def_t* semdef)
{
  return xSemaphoreCreateBinaryStatic(semdef);
}

static inline bool osal_semaphore_post(osal_semaphore_t sem_hdl, bool in_isr)
{
  if ( !in_isr )
  {
    return xQueueGenericSend( ( QueueHandle_t ) ( sem_hdl ), 
# 63 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h" 3 4
          __null
# 63 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h"
          , ( ( TickType_t ) 0U ), ( ( BaseType_t ) 0 ) ) != 0;
  }
  else
  {
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t res = xQueueGiveFromISR( ( QueueHandle_t ) ( sem_hdl ), ( &xHigherPriorityTaskWoken ) );




    if ( (xHigherPriorityTaskWoken) != ( ( BaseType_t ) 0 ) ) do { ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICSR = (1UL << 28U); __asm volatile ("sev"); __DSB(); __ISB(); }while (0);


    return res != 0;
  }
}

static inline bool osal_semaphore_wait (osal_semaphore_t sem_hdl, uint32_t msec)
{
  uint32_t const ticks = (msec == (
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h" 3 4
                                 (0xffffffffUL)
# 82 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h"
                                 )) ? ( TickType_t ) 0xffffffffUL : ( ( TickType_t ) ( ( ( TickType_t ) ( msec ) * ( TickType_t ) 1024 ) / ( TickType_t ) 1000 ) );
  return xQueueSemaphoreTake( ( sem_hdl ), ( ticks ) );
}

static inline void osal_semaphore_reset(osal_semaphore_t const sem_hdl)
{
  xQueueGenericReset( sem_hdl, ( ( BaseType_t ) 0 ) );
}




typedef StaticSemaphore_t osal_mutex_def_t;
typedef SemaphoreHandle_t osal_mutex_t;

static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef)
{
  return xSemaphoreCreateMutexStatic(mdef);
}

static inline bool osal_mutex_lock (osal_mutex_t mutex_hdl, uint32_t msec)
{
  return osal_semaphore_wait(mutex_hdl, msec);
}

static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl)
{
  return xQueueGenericSend( ( QueueHandle_t ) ( mutex_hdl ), 
# 109 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h" 3 4
        __null
# 109 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h"
        , ( ( TickType_t ) 0U ), ( ( BaseType_t ) 0 ) );
}
# 121 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h"
typedef struct
{
  uint16_t depth;
  uint16_t item_sz;
  void* buf;

  StaticQueue_t sq;
}osal_queue_def_t;

typedef QueueHandle_t osal_queue_t;

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  return xQueueCreateStatic(qdef->depth, qdef->item_sz, (uint8_t*) qdef->buf, &qdef->sq);
}

static inline bool osal_queue_receive(osal_queue_t qhdl, void* data)
{
  return xQueueReceive(qhdl, data, ( TickType_t ) 0xffffffffUL);
}

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if ( !in_isr )
  {
    return xQueueGenericSend( ( qhdl ), ( data ), ( (
# 146 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h" 3 4
          (0xffffffffUL)
# 146 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal_freertos.h"
          ) ), ( ( BaseType_t ) 0 ) ) != 0;
  }
  else
  {
    BaseType_t xHigherPriorityTaskWoken;
    BaseType_t res = xQueueGenericSendFromISR( ( qhdl ), ( data ), ( &xHigherPriorityTaskWoken ), ( ( BaseType_t ) 0 ) );




    if ( (xHigherPriorityTaskWoken) != ( ( BaseType_t ) 0 ) ) do { ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICSR = (1UL << 28U); __asm volatile ("sev"); __DSB(); __ISB(); }while (0);


    return res != 0;
  }
}

static inline bool osal_queue_empty(osal_queue_t qhdl)
{
  return uxQueueMessagesWaiting(qhdl) == 0;
}


 }
# 54 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h" 2
# 71 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wredundant-decls"


static inline osal_semaphore_t osal_semaphore_create(osal_semaphore_def_t* semdef);
static inline bool osal_semaphore_post(osal_semaphore_t sem_hdl, bool in_isr);
static inline bool osal_semaphore_wait(osal_semaphore_t sem_hdl, uint32_t msec);

static inline void osal_semaphore_reset(osal_semaphore_t sem_hdl);


static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef);
static inline bool osal_mutex_lock (osal_mutex_t sem_hdl, uint32_t msec);
static inline bool osal_mutex_unlock(osal_mutex_t mutex_hdl);


static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef);
static inline bool osal_queue_receive(osal_queue_t qhdl, void* data);
static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr);
static inline bool osal_queue_empty(osal_queue_t qhdl);

#pragma GCC diagnostic pop
# 106 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h"
 }
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_fifo.h" 1
# 32 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_fifo.h"
extern "C" {
# 51 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_fifo.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/osal/osal.h" 1
# 52 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_fifo.h" 2



typedef struct
{
  uint8_t* buffer ;
  uint16_t depth ;
  uint16_t item_size ;
  bool overwritable ;

  uint16_t non_used_index_space ;
  uint16_t max_pointer_idx ;

  volatile uint16_t wr_idx ;
  volatile uint16_t rd_idx ;


  osal_mutex_t mutex_wr;
  osal_mutex_t mutex_rd;


} tu_fifo_t;

typedef struct
{
  uint16_t len_lin ;
  uint16_t len_wrap ;
  void * ptr_lin ;
  void * ptr_wrap ;
} tu_fifo_buffer_info_t;
# 98 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/common/tusb_fifo.h"
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable);
bool tu_fifo_clear(tu_fifo_t *f);
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);


__attribute__ ((always_inline)) static inline
void tu_fifo_config_mutex(tu_fifo_t *f, osal_mutex_t write_mutex_hdl, osal_mutex_t read_mutex_hdl)
{
  f->mutex_wr = write_mutex_hdl;
  f->mutex_rd = read_mutex_hdl;
}


bool tu_fifo_write (tu_fifo_t* f, void const * p_data);
uint16_t tu_fifo_write_n (tu_fifo_t* f, void const * p_data, uint16_t n);
uint16_t tu_fifo_write_n_const_addr_full_words (tu_fifo_t* f, const void * data, uint16_t n);

bool tu_fifo_read (tu_fifo_t* f, void * p_buffer);
uint16_t tu_fifo_read_n (tu_fifo_t* f, void * p_buffer, uint16_t n);
uint16_t tu_fifo_read_n_const_addr_full_words (tu_fifo_t* f, void * buffer, uint16_t n);

bool tu_fifo_peek (tu_fifo_t* f, void * p_buffer);
uint16_t tu_fifo_peek_n (tu_fifo_t* f, void * p_buffer, uint16_t n);

uint16_t tu_fifo_count (tu_fifo_t* f);
uint16_t tu_fifo_remaining (tu_fifo_t* f);
bool tu_fifo_empty (tu_fifo_t* f);
bool tu_fifo_full (tu_fifo_t* f);
bool tu_fifo_overflowed (tu_fifo_t* f);
void tu_fifo_correct_read_pointer (tu_fifo_t* f);

__attribute__ ((always_inline)) static inline
uint16_t tu_fifo_depth(tu_fifo_t* f)
{
  return f->depth;
}



void tu_fifo_advance_write_pointer(tu_fifo_t *f, uint16_t n);
void tu_fifo_advance_read_pointer (tu_fifo_t *f, uint16_t n);




void tu_fifo_get_read_info (tu_fifo_t *f, tu_fifo_buffer_info_t *info);
void tu_fifo_get_write_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info);



}
# 40 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2
# 65 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/device/usbd.h" 1
# 33 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/device/usbd.h"
extern "C" {







bool tud_init (uint8_t rhport);


bool tud_inited(void);


void tud_task (void);


bool tud_task_event_ready(void);


extern void dcd_int_handler(uint8_t rhport);



tusb_speed_t tud_speed_get(void);



bool tud_connected(void);


bool tud_mounted(void);


bool tud_suspended(void);


__attribute__ ((always_inline)) static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
}


bool tud_remote_wakeup(void);



bool tud_disconnect(void);



bool tud_connect(void);




bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len);


bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request);







uint8_t const * tud_descriptor_device_cb(void);



uint8_t const * tud_descriptor_configuration_cb(uint8_t index);



uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid);



__attribute__ ((weak)) uint8_t const * tud_descriptor_bos_cb(void);





__attribute__ ((weak)) uint8_t const* tud_descriptor_device_qualifier_cb(void);




__attribute__ ((weak)) uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index);


__attribute__ ((weak)) void tud_mount_cb(void);


__attribute__ ((weak)) void tud_umount_cb(void);



__attribute__ ((weak)) void tud_suspend_cb(bool remote_wakeup_en);


__attribute__ ((weak)) void tud_resume_cb(void);


__attribute__ ((weak)) bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request);
# 848 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/device/usbd.h"
}
# 66 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2


# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid_device.h" 1
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid_device.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h" 1
# 37 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
 extern "C" {
# 47 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
typedef struct __attribute__ ((packed))
{
  uint8_t bLength;
  uint8_t bDescriptorType;

  uint16_t bcdHID;
  uint8_t bCountryCode;
  uint8_t bNumDescriptors;

  uint8_t bReportType;
  uint16_t wReportLength;
} tusb_hid_descriptor_hid_t;


typedef enum
{
  HID_SUBCLASS_NONE = 0,
  HID_SUBCLASS_BOOT = 1
}hid_subclass_enum_t;


typedef enum
{
  HID_ITF_PROTOCOL_NONE = 0,
  HID_ITF_PROTOCOL_KEYBOARD = 1,
  HID_ITF_PROTOCOL_MOUSE = 2
}hid_interface_protocol_enum_t;


typedef enum
{
  HID_DESC_TYPE_HID = 0x21,
  HID_DESC_TYPE_REPORT = 0x22,
  HID_DESC_TYPE_PHYSICAL = 0x23
}hid_descriptor_enum_t;


typedef enum
{
  HID_REPORT_TYPE_INVALID = 0,
  HID_REPORT_TYPE_INPUT,
  HID_REPORT_TYPE_OUTPUT,
  HID_REPORT_TYPE_FEATURE
}hid_report_type_t;


typedef enum
{
  HID_REQ_CONTROL_GET_REPORT = 0x01,
  HID_REQ_CONTROL_GET_IDLE = 0x02,
  HID_REQ_CONTROL_GET_PROTOCOL = 0x03,
  HID_REQ_CONTROL_SET_REPORT = 0x09,
  HID_REQ_CONTROL_SET_IDLE = 0x0a,
  HID_REQ_CONTROL_SET_PROTOCOL = 0x0b
}hid_request_enum_t;


typedef enum
{
  HID_LOCAL_NotSupported = 0 ,
  HID_LOCAL_Arabic ,
  HID_LOCAL_Belgian ,
  HID_LOCAL_Canadian_Bilingual ,
  HID_LOCAL_Canadian_French ,
  HID_LOCAL_Czech_Republic ,
  HID_LOCAL_Danish ,
  HID_LOCAL_Finnish ,
  HID_LOCAL_French ,
  HID_LOCAL_German ,
  HID_LOCAL_Greek ,
  HID_LOCAL_Hebrew ,
  HID_LOCAL_Hungary ,
  HID_LOCAL_International ,
  HID_LOCAL_Italian ,
  HID_LOCAL_Japan_Katakana ,
  HID_LOCAL_Korean ,
  HID_LOCAL_Latin_American ,
  HID_LOCAL_Netherlands_Dutch ,
  HID_LOCAL_Norwegian ,
  HID_LOCAL_Persian_Farsi ,
  HID_LOCAL_Poland ,
  HID_LOCAL_Portuguese ,
  HID_LOCAL_Russia ,
  HID_LOCAL_Slovakia ,
  HID_LOCAL_Spanish ,
  HID_LOCAL_Swedish ,
  HID_LOCAL_Swiss_French ,
  HID_LOCAL_Swiss_German ,
  HID_LOCAL_Switzerland ,
  HID_LOCAL_Taiwan ,
  HID_LOCAL_Turkish_Q ,
  HID_LOCAL_UK ,
  HID_LOCAL_US ,
  HID_LOCAL_Yugoslavia ,
  HID_LOCAL_Turkish_F
} hid_local_enum_t;


typedef enum
{
  HID_PROTOCOL_BOOT = 0,
  HID_PROTOCOL_REPORT = 1
} hid_protocol_mode_enum_t;
# 195 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
typedef struct __attribute__ ((packed))
{
  int8_t x;
  int8_t y;
  int8_t z;
  int8_t rz;
  int8_t rx;
  int8_t ry;
  uint8_t hat;
  uint32_t buttons;
}hid_gamepad_report_t;


typedef enum
{
  GAMEPAD_BUTTON_0 = (1UL << (0)),
  GAMEPAD_BUTTON_1 = (1UL << (1)),
  GAMEPAD_BUTTON_2 = (1UL << (2)),
  GAMEPAD_BUTTON_3 = (1UL << (3)),
  GAMEPAD_BUTTON_4 = (1UL << (4)),
  GAMEPAD_BUTTON_5 = (1UL << (5)),
  GAMEPAD_BUTTON_6 = (1UL << (6)),
  GAMEPAD_BUTTON_7 = (1UL << (7)),
  GAMEPAD_BUTTON_8 = (1UL << (8)),
  GAMEPAD_BUTTON_9 = (1UL << (9)),
  GAMEPAD_BUTTON_10 = (1UL << (10)),
  GAMEPAD_BUTTON_11 = (1UL << (11)),
  GAMEPAD_BUTTON_12 = (1UL << (12)),
  GAMEPAD_BUTTON_13 = (1UL << (13)),
  GAMEPAD_BUTTON_14 = (1UL << (14)),
  GAMEPAD_BUTTON_15 = (1UL << (15)),
  GAMEPAD_BUTTON_16 = (1UL << (16)),
  GAMEPAD_BUTTON_17 = (1UL << (17)),
  GAMEPAD_BUTTON_18 = (1UL << (18)),
  GAMEPAD_BUTTON_19 = (1UL << (19)),
  GAMEPAD_BUTTON_20 = (1UL << (20)),
  GAMEPAD_BUTTON_21 = (1UL << (21)),
  GAMEPAD_BUTTON_22 = (1UL << (22)),
  GAMEPAD_BUTTON_23 = (1UL << (23)),
  GAMEPAD_BUTTON_24 = (1UL << (24)),
  GAMEPAD_BUTTON_25 = (1UL << (25)),
  GAMEPAD_BUTTON_26 = (1UL << (26)),
  GAMEPAD_BUTTON_27 = (1UL << (27)),
  GAMEPAD_BUTTON_28 = (1UL << (28)),
  GAMEPAD_BUTTON_29 = (1UL << (29)),
  GAMEPAD_BUTTON_30 = (1UL << (30)),
  GAMEPAD_BUTTON_31 = (1UL << (31)),
}hid_gamepad_button_bm_t;
# 272 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
typedef enum
{
  GAMEPAD_HAT_CENTERED = 0,
  GAMEPAD_HAT_UP = 1,
  GAMEPAD_HAT_UP_RIGHT = 2,
  GAMEPAD_HAT_RIGHT = 3,
  GAMEPAD_HAT_DOWN_RIGHT = 4,
  GAMEPAD_HAT_DOWN = 5,
  GAMEPAD_HAT_DOWN_LEFT = 6,
  GAMEPAD_HAT_LEFT = 7,
  GAMEPAD_HAT_UP_LEFT = 8,
}hid_gamepad_hat_t;
# 294 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
typedef struct __attribute__ ((packed))
{
  uint8_t buttons;
  int8_t x;
  int8_t y;
  int8_t wheel;
  int8_t pan;
} hid_mouse_report_t;


typedef enum
{
  MOUSE_BUTTON_LEFT = (1UL << (0)),
  MOUSE_BUTTON_RIGHT = (1UL << (1)),
  MOUSE_BUTTON_MIDDLE = (1UL << (2)),
  MOUSE_BUTTON_BACKWARD = (1UL << (3)),
  MOUSE_BUTTON_FORWARD = (1UL << (4)),
}hid_mouse_button_bm_t;
# 322 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
typedef struct __attribute__ ((packed))
{
  uint8_t modifier;
  uint8_t reserved;
  uint8_t keycode[6];
} hid_keyboard_report_t;


typedef enum
{
  KEYBOARD_MODIFIER_LEFTCTRL = (1UL << (0)),
  KEYBOARD_MODIFIER_LEFTSHIFT = (1UL << (1)),
  KEYBOARD_MODIFIER_LEFTALT = (1UL << (2)),
  KEYBOARD_MODIFIER_LEFTGUI = (1UL << (3)),
  KEYBOARD_MODIFIER_RIGHTCTRL = (1UL << (4)),
  KEYBOARD_MODIFIER_RIGHTSHIFT = (1UL << (5)),
  KEYBOARD_MODIFIER_RIGHTALT = (1UL << (6)),
  KEYBOARD_MODIFIER_RIGHTGUI = (1UL << (7))
}hid_keyboard_modifier_bm_t;

typedef enum
{
  KEYBOARD_LED_NUMLOCK = (1UL << (0)),
  KEYBOARD_LED_CAPSLOCK = (1UL << (1)),
  KEYBOARD_LED_SCROLLLOCK = (1UL << (2)),
  KEYBOARD_LED_COMPOSE = (1UL << (3)),
  KEYBOARD_LED_KANA = (1UL << (4))
}hid_keyboard_led_bm_t;
# 543 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
enum {
  RI_TYPE_MAIN = 0,
  RI_TYPE_GLOBAL = 1,
  RI_TYPE_LOCAL = 2
};




enum {
  RI_MAIN_INPUT = 8,
  RI_MAIN_OUTPUT = 9,
  RI_MAIN_COLLECTION = 10,
  RI_MAIN_FEATURE = 11,
  RI_MAIN_COLLECTION_END = 12
};
# 595 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
enum {
  HID_COLLECTION_PHYSICAL = 0,
  HID_COLLECTION_APPLICATION,
  HID_COLLECTION_LOGICAL,
  HID_COLLECTION_REPORT,
  HID_COLLECTION_NAMED_ARRAY,
  HID_COLLECTION_USAGE_SWITCH,
  HID_COLLECTION_USAGE_MODIFIER
};




enum {
  RI_GLOBAL_USAGE_PAGE = 0,
  RI_GLOBAL_LOGICAL_MIN = 1,
  RI_GLOBAL_LOGICAL_MAX = 2,
  RI_GLOBAL_PHYSICAL_MIN = 3,
  RI_GLOBAL_PHYSICAL_MAX = 4,
  RI_GLOBAL_UNIT_EXPONENT = 5,
  RI_GLOBAL_UNIT = 6,
  RI_GLOBAL_REPORT_SIZE = 7,
  RI_GLOBAL_REPORT_ID = 8,
  RI_GLOBAL_REPORT_COUNT = 9,
  RI_GLOBAL_PUSH = 10,
  RI_GLOBAL_POP = 11
};
# 658 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
enum {
  RI_LOCAL_USAGE = 0,
  RI_LOCAL_USAGE_MIN = 1,
  RI_LOCAL_USAGE_MAX = 2,
  RI_LOCAL_DESIGNATOR_INDEX = 3,
  RI_LOCAL_DESIGNATOR_MIN = 4,
  RI_LOCAL_DESIGNATOR_MAX = 5,

  RI_LOCAL_STRING_INDEX = 7,
  RI_LOCAL_STRING_MIN = 8,
  RI_LOCAL_STRING_MAX = 9,
  RI_LOCAL_DELIMITER = 10,
};
# 686 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
enum {
  HID_USAGE_PAGE_DESKTOP = 0x01,
  HID_USAGE_PAGE_SIMULATE = 0x02,
  HID_USAGE_PAGE_VIRTUAL_REALITY = 0x03,
  HID_USAGE_PAGE_SPORT = 0x04,
  HID_USAGE_PAGE_GAME = 0x05,
  HID_USAGE_PAGE_GENERIC_DEVICE = 0x06,
  HID_USAGE_PAGE_KEYBOARD = 0x07,
  HID_USAGE_PAGE_LED = 0x08,
  HID_USAGE_PAGE_BUTTON = 0x09,
  HID_USAGE_PAGE_ORDINAL = 0x0a,
  HID_USAGE_PAGE_TELEPHONY = 0x0b,
  HID_USAGE_PAGE_CONSUMER = 0x0c,
  HID_USAGE_PAGE_DIGITIZER = 0x0d,
  HID_USAGE_PAGE_PID = 0x0f,
  HID_USAGE_PAGE_UNICODE = 0x10,
  HID_USAGE_PAGE_ALPHA_DISPLAY = 0x14,
  HID_USAGE_PAGE_MEDICAL = 0x40,
  HID_USAGE_PAGE_MONITOR = 0x80,
  HID_USAGE_PAGE_POWER = 0x84,
  HID_USAGE_PAGE_BARCODE_SCANNER = 0x8c,
  HID_USAGE_PAGE_SCALE = 0x8d,
  HID_USAGE_PAGE_MSR = 0x8e,
  HID_USAGE_PAGE_CAMERA = 0x90,
  HID_USAGE_PAGE_ARCADE = 0x91,
  HID_USAGE_PAGE_VENDOR = 0xFF00
};


enum {
  HID_USAGE_DESKTOP_POINTER = 0x01,
  HID_USAGE_DESKTOP_MOUSE = 0x02,
  HID_USAGE_DESKTOP_JOYSTICK = 0x04,
  HID_USAGE_DESKTOP_GAMEPAD = 0x05,
  HID_USAGE_DESKTOP_KEYBOARD = 0x06,
  HID_USAGE_DESKTOP_KEYPAD = 0x07,
  HID_USAGE_DESKTOP_MULTI_AXIS_CONTROLLER = 0x08,
  HID_USAGE_DESKTOP_TABLET_PC_SYSTEM = 0x09,
  HID_USAGE_DESKTOP_X = 0x30,
  HID_USAGE_DESKTOP_Y = 0x31,
  HID_USAGE_DESKTOP_Z = 0x32,
  HID_USAGE_DESKTOP_RX = 0x33,
  HID_USAGE_DESKTOP_RY = 0x34,
  HID_USAGE_DESKTOP_RZ = 0x35,
  HID_USAGE_DESKTOP_SLIDER = 0x36,
  HID_USAGE_DESKTOP_DIAL = 0x37,
  HID_USAGE_DESKTOP_WHEEL = 0x38,
  HID_USAGE_DESKTOP_HAT_SWITCH = 0x39,
  HID_USAGE_DESKTOP_COUNTED_BUFFER = 0x3a,
  HID_USAGE_DESKTOP_BYTE_COUNT = 0x3b,
  HID_USAGE_DESKTOP_MOTION_WAKEUP = 0x3c,
  HID_USAGE_DESKTOP_START = 0x3d,
  HID_USAGE_DESKTOP_SELECT = 0x3e,
  HID_USAGE_DESKTOP_VX = 0x40,
  HID_USAGE_DESKTOP_VY = 0x41,
  HID_USAGE_DESKTOP_VZ = 0x42,
  HID_USAGE_DESKTOP_VBRX = 0x43,
  HID_USAGE_DESKTOP_VBRY = 0x44,
  HID_USAGE_DESKTOP_VBRZ = 0x45,
  HID_USAGE_DESKTOP_VNO = 0x46,
  HID_USAGE_DESKTOP_FEATURE_NOTIFICATION = 0x47,
  HID_USAGE_DESKTOP_RESOLUTION_MULTIPLIER = 0x48,
  HID_USAGE_DESKTOP_SYSTEM_CONTROL = 0x80,
  HID_USAGE_DESKTOP_SYSTEM_POWER_DOWN = 0x81,
  HID_USAGE_DESKTOP_SYSTEM_SLEEP = 0x82,
  HID_USAGE_DESKTOP_SYSTEM_WAKE_UP = 0x83,
  HID_USAGE_DESKTOP_SYSTEM_CONTEXT_MENU = 0x84,
  HID_USAGE_DESKTOP_SYSTEM_MAIN_MENU = 0x85,
  HID_USAGE_DESKTOP_SYSTEM_APP_MENU = 0x86,
  HID_USAGE_DESKTOP_SYSTEM_MENU_HELP = 0x87,
  HID_USAGE_DESKTOP_SYSTEM_MENU_EXIT = 0x88,
  HID_USAGE_DESKTOP_SYSTEM_MENU_SELECT = 0x89,
  HID_USAGE_DESKTOP_SYSTEM_MENU_RIGHT = 0x8A,
  HID_USAGE_DESKTOP_SYSTEM_MENU_LEFT = 0x8B,
  HID_USAGE_DESKTOP_SYSTEM_MENU_UP = 0x8C,
  HID_USAGE_DESKTOP_SYSTEM_MENU_DOWN = 0x8D,
  HID_USAGE_DESKTOP_SYSTEM_COLD_RESTART = 0x8E,
  HID_USAGE_DESKTOP_SYSTEM_WARM_RESTART = 0x8F,
  HID_USAGE_DESKTOP_DPAD_UP = 0x90,
  HID_USAGE_DESKTOP_DPAD_DOWN = 0x91,
  HID_USAGE_DESKTOP_DPAD_RIGHT = 0x92,
  HID_USAGE_DESKTOP_DPAD_LEFT = 0x93,
  HID_USAGE_DESKTOP_SYSTEM_DOCK = 0xA0,
  HID_USAGE_DESKTOP_SYSTEM_UNDOCK = 0xA1,
  HID_USAGE_DESKTOP_SYSTEM_SETUP = 0xA2,
  HID_USAGE_DESKTOP_SYSTEM_BREAK = 0xA3,
  HID_USAGE_DESKTOP_SYSTEM_DEBUGGER_BREAK = 0xA4,
  HID_USAGE_DESKTOP_APPLICATION_BREAK = 0xA5,
  HID_USAGE_DESKTOP_APPLICATION_DEBUGGER_BREAK = 0xA6,
  HID_USAGE_DESKTOP_SYSTEM_SPEAKER_MUTE = 0xA7,
  HID_USAGE_DESKTOP_SYSTEM_HIBERNATE = 0xA8,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_INVERT = 0xB0,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_INTERNAL = 0xB1,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_EXTERNAL = 0xB2,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_BOTH = 0xB3,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_DUAL = 0xB4,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_TOGGLE_INT_EXT = 0xB5,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_SWAP_PRIMARY_SECONDARY = 0xB6,
  HID_USAGE_DESKTOP_SYSTEM_DISPLAY_LCD_AUTOSCALE = 0xB7
};




enum
{

  HID_USAGE_CONSUMER_CONTROL = 0x0001,


  HID_USAGE_CONSUMER_POWER = 0x0030,
  HID_USAGE_CONSUMER_RESET = 0x0031,
  HID_USAGE_CONSUMER_SLEEP = 0x0032,


  HID_USAGE_CONSUMER_BRIGHTNESS_INCREMENT = 0x006F,
  HID_USAGE_CONSUMER_BRIGHTNESS_DECREMENT = 0x0070,



  HID_USAGE_CONSUMER_WIRELESS_RADIO_CONTROLS = 0x000C,
  HID_USAGE_CONSUMER_WIRELESS_RADIO_BUTTONS = 0x00C6,
  HID_USAGE_CONSUMER_WIRELESS_RADIO_LED = 0x00C7,
  HID_USAGE_CONSUMER_WIRELESS_RADIO_SLIDER_SWITCH = 0x00C8,


  HID_USAGE_CONSUMER_PLAY_PAUSE = 0x00CD,
  HID_USAGE_CONSUMER_SCAN_NEXT = 0x00B5,
  HID_USAGE_CONSUMER_SCAN_PREVIOUS = 0x00B6,
  HID_USAGE_CONSUMER_STOP = 0x00B7,
  HID_USAGE_CONSUMER_VOLUME = 0x00E0,
  HID_USAGE_CONSUMER_MUTE = 0x00E2,
  HID_USAGE_CONSUMER_BASS = 0x00E3,
  HID_USAGE_CONSUMER_TREBLE = 0x00E4,
  HID_USAGE_CONSUMER_BASS_BOOST = 0x00E5,
  HID_USAGE_CONSUMER_VOLUME_INCREMENT = 0x00E9,
  HID_USAGE_CONSUMER_VOLUME_DECREMENT = 0x00EA,
  HID_USAGE_CONSUMER_BASS_INCREMENT = 0x0152,
  HID_USAGE_CONSUMER_BASS_DECREMENT = 0x0153,
  HID_USAGE_CONSUMER_TREBLE_INCREMENT = 0x0154,
  HID_USAGE_CONSUMER_TREBLE_DECREMENT = 0x0155,


  HID_USAGE_CONSUMER_AL_CONSUMER_CONTROL_CONFIGURATION = 0x0183,
  HID_USAGE_CONSUMER_AL_EMAIL_READER = 0x018A,
  HID_USAGE_CONSUMER_AL_CALCULATOR = 0x0192,
  HID_USAGE_CONSUMER_AL_LOCAL_BROWSER = 0x0194,


  HID_USAGE_CONSUMER_AC_SEARCH = 0x0221,
  HID_USAGE_CONSUMER_AC_HOME = 0x0223,
  HID_USAGE_CONSUMER_AC_BACK = 0x0224,
  HID_USAGE_CONSUMER_AC_FORWARD = 0x0225,
  HID_USAGE_CONSUMER_AC_STOP = 0x0226,
  HID_USAGE_CONSUMER_AC_REFRESH = 0x0227,
  HID_USAGE_CONSUMER_AC_BOOKMARKS = 0x022A,


  HID_USAGE_CONSUMER_AC_PAN = 0x0238,
};
# 1114 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid.h"
 }
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid_device.h" 2


 extern "C" {
# 56 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid_device.h"
bool tud_hid_n_ready(uint8_t instance);


uint8_t tud_hid_n_interface_protocol(uint8_t instance);


uint8_t tud_hid_n_get_protocol(uint8_t instance);


bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const* report, uint8_t len);



bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, uint8_t keycode[6]);



bool tud_hid_n_mouse_report(uint8_t instance, uint8_t report_id, uint8_t buttons, int8_t x, int8_t y, int8_t vertical, int8_t horizontal);



bool tud_hid_n_gamepad_report(uint8_t instance, uint8_t report_id, int8_t x, int8_t y, int8_t z, int8_t rz, int8_t rx, int8_t ry, uint8_t hat, uint32_t buttons);




static inline bool tud_hid_ready(void);
static inline uint8_t tud_hid_interface_protocol(void);
static inline uint8_t tud_hid_get_protocol(void);
static inline bool tud_hid_report(uint8_t report_id, void const* report, uint8_t len);
static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, uint8_t keycode[6]);
static inline bool tud_hid_mouse_report(uint8_t report_id, uint8_t buttons, int8_t x, int8_t y, int8_t vertical, int8_t horizontal);
static inline bool tud_hid_gamepad_report(uint8_t report_id, int8_t x, int8_t y, int8_t z, int8_t rz, int8_t rx, int8_t ry, uint8_t hat, uint32_t buttons);







uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance);




uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen);



void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize);



__attribute__ ((weak)) void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol);




__attribute__ ((weak)) bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate);




__attribute__ ((weak)) void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint8_t len);





static inline bool tud_hid_ready(void)
{
  return tud_hid_n_ready(0);
}

static inline uint8_t tud_hid_interface_protocol(void)
{
  return tud_hid_n_interface_protocol(0);
}

static inline uint8_t tud_hid_get_protocol(void)
{
  return tud_hid_n_get_protocol(0);
}

static inline bool tud_hid_report(uint8_t report_id, void const* report, uint8_t len)
{
  return tud_hid_n_report(0, report_id, report, len);
}

static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, uint8_t keycode[6])
{
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
}

static inline bool tud_hid_mouse_report(uint8_t report_id, uint8_t buttons, int8_t x, int8_t y, int8_t vertical, int8_t horizontal)
{
  return tud_hid_n_mouse_report(0, report_id, buttons, x, y, vertical, horizontal);
}

static inline bool tud_hid_gamepad_report(uint8_t report_id, int8_t x, int8_t y, int8_t z, int8_t rz, int8_t rx, int8_t ry, uint8_t hat, uint32_t buttons)
{
  return tud_hid_n_gamepad_report(0, report_id, x, y, z, rz, rx, ry, hat, buttons);
}
# 383 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/hid/hid_device.h"
void hidd_init (void);
void hidd_reset (uint8_t rhport);
uint16_t hidd_open (uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len);
bool hidd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request);
bool hidd_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);


 }
# 69 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2



# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc_device.h" 1
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc_device.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc.h" 1
# 38 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc.h"
 extern "C" {







typedef enum
{
  CDC_PIPE_NOTIFICATION ,
  CDC_PIPE_DATA_IN ,
  CDC_PIPE_DATA_OUT ,
  CDC_PIPE_ERROR ,
}cdc_pipeid_t;






typedef enum
{
  CDC_COMM_SUBCLASS_DIRECT_LINE_CONTROL_MODEL = 0x01 ,
  CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL = 0x02 ,
  CDC_COMM_SUBCLASS_TELEPHONE_CONTROL_MODEL = 0x03 ,
  CDC_COMM_SUBCLASS_MULTICHANNEL_CONTROL_MODEL = 0x04 ,
  CDC_COMM_SUBCLASS_CAPI_CONTROL_MODEL = 0x05 ,
  CDC_COMM_SUBCLASS_ETHERNET_CONTROL_MODEL = 0x06 ,
  CDC_COMM_SUBCLASS_ATM_NETWORKING_CONTROL_MODEL = 0x07 ,
  CDC_COMM_SUBCLASS_WIRELESS_HANDSET_CONTROL_MODEL = 0x08 ,
  CDC_COMM_SUBCLASS_DEVICE_MANAGEMENT = 0x09 ,
  CDC_COMM_SUBCLASS_MOBILE_DIRECT_LINE_MODEL = 0x0A ,
  CDC_COMM_SUBCLASS_OBEX = 0x0B ,
  CDC_COMM_SUBCLASS_ETHERNET_EMULATION_MODEL = 0x0C ,
  CDC_COMM_SUBCLASS_NETWORK_CONTROL_MODEL = 0x0D
} cdc_comm_sublcass_type_t;


typedef enum
{
  CDC_COMM_PROTOCOL_NONE = 0x00 ,
  CDC_COMM_PROTOCOL_ATCOMMAND = 0x01 ,
  CDC_COMM_PROTOCOL_ATCOMMAND_PCCA_101 = 0x02 ,
  CDC_COMM_PROTOCOL_ATCOMMAND_PCCA_101_AND_ANNEXO = 0x03 ,
  CDC_COMM_PROTOCOL_ATCOMMAND_GSM_707 = 0x04 ,
  CDC_COMM_PROTOCOL_ATCOMMAND_3GPP_27007 = 0x05 ,
  CDC_COMM_PROTOCOL_ATCOMMAND_CDMA = 0x06 ,
  CDC_COMM_PROTOCOL_ETHERNET_EMULATION_MODEL = 0x07
} cdc_comm_protocol_type_t;



typedef enum
{
  CDC_FUNC_DESC_HEADER = 0x00 ,
  CDC_FUNC_DESC_CALL_MANAGEMENT = 0x01 ,
  CDC_FUNC_DESC_ABSTRACT_CONTROL_MANAGEMENT = 0x02 ,
  CDC_FUNC_DESC_DIRECT_LINE_MANAGEMENT = 0x03 ,
  CDC_FUNC_DESC_TELEPHONE_RINGER = 0x04 ,
  CDC_FUNC_DESC_TELEPHONE_CALL_AND_LINE_STATE_REPORTING_CAPACITY = 0x05 ,
  CDC_FUNC_DESC_UNION = 0x06 ,
  CDC_FUNC_DESC_COUNTRY_SELECTION = 0x07 ,
  CDC_FUNC_DESC_TELEPHONE_OPERATIONAL_MODES = 0x08 ,
  CDC_FUNC_DESC_USB_TERMINAL = 0x09 ,
  CDC_FUNC_DESC_NETWORK_CHANNEL_TERMINAL = 0x0A ,
  CDC_FUNC_DESC_PROTOCOL_UNIT = 0x0B ,
  CDC_FUNC_DESC_EXTENSION_UNIT = 0x0C ,
  CDC_FUNC_DESC_MULTICHANEL_MANAGEMENT = 0x0D ,
  CDC_FUNC_DESC_CAPI_CONTROL_MANAGEMENT = 0x0E ,
  CDC_FUNC_DESC_ETHERNET_NETWORKING = 0x0F ,
  CDC_FUNC_DESC_ATM_NETWORKING = 0x10 ,
  CDC_FUNC_DESC_WIRELESS_HANDSET_CONTROL_MODEL = 0x11 ,
  CDC_FUNC_DESC_MOBILE_DIRECT_LINE_MODEL = 0x12 ,
  CDC_FUNC_DESC_MOBILE_DIRECT_LINE_MODEL_DETAIL = 0x13 ,
  CDC_FUNC_DESC_DEVICE_MANAGEMENT_MODEL = 0x14 ,
  CDC_FUNC_DESC_OBEX = 0x15 ,
  CDC_FUNC_DESC_COMMAND_SET = 0x16 ,
  CDC_FUNC_DESC_COMMAND_SET_DETAIL = 0x17 ,
  CDC_FUNC_DESC_TELEPHONE_CONTROL_MODEL = 0x18 ,
  CDC_FUNC_DESC_OBEX_SERVICE_IDENTIFIER = 0x19 ,
  CDC_FUNC_DESC_NCM = 0x1A ,
}cdc_func_desc_type_t;
# 129 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc.h"
typedef enum{
  CDC_DATA_PROTOCOL_ISDN_BRI = 0x30,
  CDC_DATA_PROTOCOL_HDLC = 0x31,
  CDC_DATA_PROTOCOL_TRANSPARENT = 0x32,
  CDC_DATA_PROTOCOL_Q921_MANAGEMENT = 0x50,
  CDC_DATA_PROTOCOL_Q921_DATA_LINK = 0x51,
  CDC_DATA_PROTOCOL_Q921_TEI_MULTIPLEXOR = 0x52,
  CDC_DATA_PROTOCOL_V42BIS_DATA_COMPRESSION = 0x90,
  CDC_DATA_PROTOCOL_EURO_ISDN = 0x91,
  CDC_DATA_PROTOCOL_V24_RATE_ADAPTION_TO_ISDN = 0x92,
  CDC_DATA_PROTOCOL_CAPI_COMMAND = 0x93,
  CDC_DATA_PROTOCOL_HOST_BASED_DRIVER = 0xFD,
  CDC_DATA_PROTOCOL_IN_PROTOCOL_UNIT_FUNCTIONAL_DESCRIPTOR = 0xFE
}cdc_data_protocol_type_t;






typedef enum
{
  CDC_REQUEST_SEND_ENCAPSULATED_COMMAND = 0x00,
  CDC_REQUEST_GET_ENCAPSULATED_RESPONSE = 0x01,
  CDC_REQUEST_SET_COMM_FEATURE = 0x02,
  CDC_REQUEST_GET_COMM_FEATURE = 0x03,
  CDC_REQUEST_CLEAR_COMM_FEATURE = 0x04,

  CDC_REQUEST_SET_AUX_LINE_STATE = 0x10,
  CDC_REQUEST_SET_HOOK_STATE = 0x11,
  CDC_REQUEST_PULSE_SETUP = 0x12,
  CDC_REQUEST_SEND_PULSE = 0x13,
  CDC_REQUEST_SET_PULSE_TIME = 0x14,
  CDC_REQUEST_RING_AUX_JACK = 0x15,

  CDC_REQUEST_SET_LINE_CODING = 0x20,
  CDC_REQUEST_GET_LINE_CODING = 0x21,
  CDC_REQUEST_SET_CONTROL_LINE_STATE = 0x22,
  CDC_REQUEST_SEND_BREAK = 0x23,

  CDC_REQUEST_SET_RINGER_PARMS = 0x30,
  CDC_REQUEST_GET_RINGER_PARMS = 0x31,
  CDC_REQUEST_SET_OPERATION_PARMS = 0x32,
  CDC_REQUEST_GET_OPERATION_PARMS = 0x33,
  CDC_REQUEST_SET_LINE_PARMS = 0x34,
  CDC_REQUEST_GET_LINE_PARMS = 0x35,
  CDC_REQUEST_DIAL_DIGITS = 0x36,
  CDC_REQUEST_SET_UNIT_PARAMETER = 0x37,
  CDC_REQUEST_GET_UNIT_PARAMETER = 0x38,
  CDC_REQUEST_CLEAR_UNIT_PARAMETER = 0x39,
  CDC_REQUEST_GET_PROFILE = 0x3A,

  CDC_REQUEST_SET_ETHERNET_MULTICAST_FILTERS = 0x40,
  CDC_REQUEST_SET_ETHERNET_POWER_MANAGEMENT_PATTERN_FILTER = 0x41,
  CDC_REQUEST_GET_ETHERNET_POWER_MANAGEMENT_PATTERN_FILTER = 0x42,
  CDC_REQUEST_SET_ETHERNET_PACKET_FILTER = 0x43,
  CDC_REQUEST_GET_ETHERNET_STATISTIC = 0x44,

  CDC_REQUEST_SET_ATM_DATA_FORMAT = 0x50,
  CDC_REQUEST_GET_ATM_DEVICE_STATISTICS = 0x51,
  CDC_REQUEST_SET_ATM_DEFAULT_VC = 0x52,
  CDC_REQUEST_GET_ATM_VC_STATISTICS = 0x53,

  CDC_REQUEST_MDLM_SEMANTIC_MODEL = 0x60,
}cdc_management_request_t;






typedef enum
{
  CDC_NOTIF_NETWORK_CONNECTION = 0x00,
  CDC_NOTIF_RESPONSE_AVAILABLE = 0x01,
  CDC_NOTIF_AUX_JACK_HOOK_STATE = 0x08,
  CDC_NOTIF_RING_DETECT = 0x09,
  CDC_NOTIF_SERIAL_STATE = 0x20,
  CDC_NOTIF_CALL_STATE_CHANGE = 0x28,
  CDC_NOTIF_LINE_STATE_CHANGE = 0x29,
  CDC_NOTIF_CONNECTION_SPEED_CHANGE = 0x2A,
  CDC_NOTIF_MDLM_SEMANTIC_MODEL_NOTIFICATION = 0x40,
}cdc_notification_request_t;










typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint16_t bcdCDC ;
}cdc_desc_func_header_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bControlInterface ;
  uint8_t bSubordinateInterface ;
}cdc_desc_func_union_t;
# 250 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc.h"
typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t iCountryCodeRelDate ;
  uint16_t wCountryCode ;
}cdc_desc_func_country_selection_t;
# 274 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc.h"
typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;

  struct {
    uint8_t handle_call : 1;
    uint8_t send_recv_call : 1;
    uint8_t reserved4 : 6;
  } bmCapabilities;

  uint8_t bDataInterface;
}cdc_desc_func_call_management_t;

typedef struct __attribute__ ((packed))
{
  uint8_t support_comm_request : 1;
  uint8_t support_line_request : 1;
  uint8_t support_send_break : 1;
  uint8_t support_notification_network_connection : 1;
  uint8_t reserved5 : 4;
}cdc_acm_capability_t;

static_assert(sizeof(cdc_acm_capability_t) == 1, "mostly problem with compiler");



typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  cdc_acm_capability_t bmCapabilities ;
}cdc_desc_func_acm_t;



typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  struct {
    uint8_t require_pulse_setup : 1;
    uint8_t support_aux_request : 1;
    uint8_t support_pulse_request : 1;
    uint8_t reserved6 : 5;
  } bmCapabilities;
}cdc_desc_func_direct_line_management_t;




typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bRingerVolSteps ;
  uint8_t bNumRingerPatterns ;
}cdc_desc_func_telephone_ringer_t;




typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  struct {
    uint8_t simple_mode : 1;
    uint8_t standalone_mode : 1;
    uint8_t computer_centric_mode : 1;
    uint8_t reserved7 : 5;
  } bmCapabilities;
}cdc_desc_func_telephone_operational_modes_t;




typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  struct {
    uint32_t interrupted_dialtone : 1;
    uint32_t ringback_busy_fastbusy : 1;
    uint32_t caller_id : 1;
    uint32_t incoming_distinctive : 1;
    uint32_t dual_tone_multi_freq : 1;
    uint32_t line_state_change : 1;
    uint32_t reserved8 : 26;
  } bmCapabilities;
}cdc_desc_func_telephone_call_state_reporting_capabilities_t;


static inline uint8_t cdc_functional_desc_typeof(uint8_t const * p_desc)
{
  return p_desc[2];
}




typedef struct __attribute__ ((packed))
{
  uint32_t bit_rate;
  uint8_t stop_bits;
  uint8_t parity;
  uint8_t data_bits;
} cdc_line_coding_t;

static_assert(sizeof(cdc_line_coding_t) == 7, "size is not correct");

typedef struct __attribute__ ((packed))
{
  uint16_t dte_is_present : 1;
  uint16_t half_duplex_carrier_control : 1;
  uint16_t : 14;
} cdc_line_control_state_t;

static_assert(sizeof(cdc_line_control_state_t) == 2, "size is not correct");





 }
# 32 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc_device.h" 2
# 46 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc_device.h"
 extern "C" {
# 60 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/cdc/cdc_device.h"
bool tud_cdc_n_connected (uint8_t itf);


uint8_t tud_cdc_n_get_line_state (uint8_t itf);


void tud_cdc_n_get_line_coding (uint8_t itf, cdc_line_coding_t* coding);


void tud_cdc_n_set_wanted_char (uint8_t itf, char wanted);


uint32_t tud_cdc_n_available (uint8_t itf);


uint32_t tud_cdc_n_read (uint8_t itf, void* buffer, uint32_t bufsize);


static inline
int32_t tud_cdc_n_read_char (uint8_t itf);


void tud_cdc_n_read_flush (uint8_t itf);


bool tud_cdc_n_peek (uint8_t itf, uint8_t* ui8);


uint32_t tud_cdc_n_write (uint8_t itf, void const* buffer, uint32_t bufsize);


static inline
uint32_t tud_cdc_n_write_char (uint8_t itf, char ch);


static inline
uint32_t tud_cdc_n_write_str (uint8_t itf, char const* str);


uint32_t tud_cdc_n_write_flush (uint8_t itf);


uint32_t tud_cdc_n_write_available (uint8_t itf);


bool tud_cdc_n_write_clear (uint8_t itf);




static inline bool tud_cdc_connected (void);
static inline uint8_t tud_cdc_get_line_state (void);
static inline void tud_cdc_get_line_coding (cdc_line_coding_t* coding);
static inline void tud_cdc_set_wanted_char (char wanted);

static inline uint32_t tud_cdc_available (void);
static inline int32_t tud_cdc_read_char (void);
static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize);
static inline void tud_cdc_read_flush (void);
static inline bool tud_cdc_peek (uint8_t* ui8);

static inline uint32_t tud_cdc_write_char (char ch);
static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize);
static inline uint32_t tud_cdc_write_str (char const* str);
static inline uint32_t tud_cdc_write_flush (void);
static inline uint32_t tud_cdc_write_available (void);
static inline bool tud_cdc_write_clear (void);






__attribute__ ((weak)) void tud_cdc_rx_cb(uint8_t itf);


__attribute__ ((weak)) void tud_cdc_rx_wanted_cb(uint8_t itf, char wanted_char);


__attribute__ ((weak)) void tud_cdc_tx_complete_cb(uint8_t itf);


__attribute__ ((weak)) void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts);


__attribute__ ((weak)) void tud_cdc_line_coding_cb(uint8_t itf, cdc_line_coding_t const* p_line_coding);


__attribute__ ((weak)) void tud_cdc_send_break_cb(uint8_t itf, uint16_t duration_ms);




static inline int32_t tud_cdc_n_read_char (uint8_t itf)
{
  uint8_t ch;
  return tud_cdc_n_read(itf, &ch, 1) ? (int32_t) ch : -1;
}

static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch)
{
  return tud_cdc_n_write(itf, &ch, 1);
}

static inline uint32_t tud_cdc_n_write_str (uint8_t itf, char const* str)
{
  return tud_cdc_n_write(itf, str, strlen(str));
}

static inline bool tud_cdc_connected (void)
{
  return tud_cdc_n_connected(0);
}

static inline uint8_t tud_cdc_get_line_state (void)
{
  return tud_cdc_n_get_line_state(0);
}

static inline void tud_cdc_get_line_coding (cdc_line_coding_t* coding)
{
  tud_cdc_n_get_line_coding(0, coding);
}

static inline void tud_cdc_set_wanted_char (char wanted)
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
  return tud_cdc_n_available(0);
}

static inline int32_t tud_cdc_read_char (void)
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
  return tud_cdc_n_read(0, buffer, bufsize);
}

static inline void tud_cdc_read_flush (void)
{
  tud_cdc_n_read_flush(0);
}

static inline bool tud_cdc_peek (uint8_t* ui8)
{
  return tud_cdc_n_peek(0, ui8);
}

static inline uint32_t tud_cdc_write_char (char ch)
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
  return tud_cdc_n_write(0, buffer, bufsize);
}

static inline uint32_t tud_cdc_write_str (char const* str)
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
  return tud_cdc_n_write_flush(0);
}

static inline uint32_t tud_cdc_write_available(void)
{
  return tud_cdc_n_write_available(0);
}

static inline bool tud_cdc_write_clear(void)
{
  return tud_cdc_n_write_clear(0);
}







void cdcd_init (void);
void cdcd_reset (uint8_t rhport);
uint16_t cdcd_open (uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len);
bool cdcd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request);
bool cdcd_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);


 }
# 73 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2



# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h" 1
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc.h" 1
# 33 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc.h"
 extern "C" {






typedef enum
{
  MSC_SUBCLASS_RBC = 1 ,
  MSC_SUBCLASS_SFF_MMC ,
  MSC_SUBCLASS_QIC ,
  MSC_SUBCLASS_UFI ,
  MSC_SUBCLASS_SFF ,
  MSC_SUBCLASS_SCSI
}msc_subclass_type_t;

enum {
  MSC_CBW_SIGNATURE = 0x43425355,
  MSC_CSW_SIGNATURE = 0x53425355
};



typedef enum
{
  MSC_PROTOCOL_CBI = 0 ,
  MSC_PROTOCOL_CBI_NO_INTERRUPT = 1 ,
  MSC_PROTOCOL_BOT = 0x50
}msc_protocol_type_t;


typedef enum
{
  MSC_REQ_GET_MAX_LUN = 254,
  MSC_REQ_RESET = 255
}msc_request_type_t;




typedef enum
{
  MSC_CSW_STATUS_PASSED = 0 ,
  MSC_CSW_STATUS_FAILED ,
  MSC_CSW_STATUS_PHASE_ERROR
}msc_csw_status_t;


typedef struct __attribute__ ((packed))
{
  uint32_t signature;
  uint32_t tag;
  uint32_t total_bytes;
  uint8_t dir;
  uint8_t lun;
  uint8_t cmd_len;
  uint8_t command[16];
}msc_cbw_t;

static_assert(sizeof(msc_cbw_t) == 31, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint32_t signature ;
  uint32_t tag ;
  uint32_t data_residue ;
  uint8_t status ;
}msc_csw_t;

static_assert(sizeof(msc_csw_t) == 13, "size is not correct");






typedef enum
{
  SCSI_CMD_TEST_UNIT_READY = 0x00,
  SCSI_CMD_INQUIRY = 0x12,
  SCSI_CMD_MODE_SELECT_6 = 0x15,
  SCSI_CMD_MODE_SENSE_6 = 0x1A,
  SCSI_CMD_START_STOP_UNIT = 0x1B,
  SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL = 0x1E,
  SCSI_CMD_READ_CAPACITY_10 = 0x25,
  SCSI_CMD_REQUEST_SENSE = 0x03,
  SCSI_CMD_READ_FORMAT_CAPACITY = 0x23,
  SCSI_CMD_READ_10 = 0x28,
  SCSI_CMD_WRITE_10 = 0x2A,
}scsi_cmd_type_t;


typedef enum
{
  SCSI_SENSE_NONE = 0x00,
  SCSI_SENSE_RECOVERED_ERROR = 0x01,
  SCSI_SENSE_NOT_READY = 0x02,
  SCSI_SENSE_MEDIUM_ERROR = 0x03,
  SCSI_SENSE_HARDWARE_ERROR = 0x04,
  SCSI_SENSE_ILLEGAL_REQUEST = 0x05,
  SCSI_SENSE_UNIT_ATTENTION = 0x06,
  SCSI_SENSE_DATA_PROTECT = 0x07,
  SCSI_SENSE_FIRMWARE_ERROR = 0x08,
  SCSI_SENSE_ABORTED_COMMAND = 0x0b,
  SCSI_SENSE_EQUAL = 0x0c,
  SCSI_SENSE_VOLUME_OVERFLOW = 0x0d,
  SCSI_SENSE_MISCOMPARE = 0x0e
}scsi_sense_key_type_t;






typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code ;
  uint8_t lun ;
  uint8_t reserved[3] ;
  uint8_t control ;
} scsi_test_unit_ready_t;

static_assert(sizeof(scsi_test_unit_ready_t) == 6, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code ;
  uint8_t reserved1 ;
  uint8_t page_code ;
  uint8_t reserved2 ;
  uint8_t alloc_length ;
  uint8_t control ;
} scsi_inquiry_t, scsi_request_sense_t;

static_assert(sizeof(scsi_inquiry_t) == 6, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t peripheral_device_type : 5;
  uint8_t peripheral_qualifier : 3;

  uint8_t : 7;
  uint8_t is_removable : 1;

  uint8_t version;

  uint8_t response_data_format : 4;
  uint8_t hierarchical_support : 1;
  uint8_t normal_aca : 1;
  uint8_t : 2;

  uint8_t additional_length;

  uint8_t protect : 1;
  uint8_t : 2;
  uint8_t third_party_copy : 1;
  uint8_t target_port_group_support : 2;
  uint8_t access_control_coordinator : 1;
  uint8_t scc_support : 1;

  uint8_t addr16 : 1;
  uint8_t : 3;
  uint8_t multi_port : 1;
  uint8_t : 1;
  uint8_t enclosure_service : 1;
  uint8_t : 1;

  uint8_t : 1;
  uint8_t cmd_que : 1;
  uint8_t : 2;
  uint8_t sync : 1;
  uint8_t wbus16 : 1;
  uint8_t : 2;

  uint8_t vendor_id[8] ;
  uint8_t product_id[16];
  uint8_t product_rev[4];
} scsi_inquiry_resp_t;

static_assert(sizeof(scsi_inquiry_resp_t) == 36, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t response_code : 7;
  uint8_t valid : 1;

  uint8_t reserved;

  uint8_t sense_key : 4;
  uint8_t : 1;
  uint8_t ili : 1;
  uint8_t end_of_medium : 1;
  uint8_t filemark : 1;

  uint32_t information;
  uint8_t add_sense_len;
  uint32_t command_specific_info;
  uint8_t add_sense_code;
  uint8_t add_sense_qualifier;
  uint8_t field_replaceable_unit_code;

  uint8_t sense_key_specific[3];

} scsi_sense_fixed_resp_t;

static_assert(sizeof(scsi_sense_fixed_resp_t) == 18, "size is not correct");

typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code ;

  uint8_t : 3;
  uint8_t disable_block_descriptor : 1;
  uint8_t : 4;

  uint8_t page_code : 6;
  uint8_t page_control : 2;

  uint8_t subpage_code;
  uint8_t alloc_length;
  uint8_t control;
} scsi_mode_sense6_t;

static_assert( sizeof(scsi_mode_sense6_t) == 6, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t data_len;
  uint8_t medium_type;

  uint8_t reserved : 7;
  bool write_protected : 1;

  uint8_t block_descriptor_len;
} scsi_mode_sense6_resp_t;

static_assert( sizeof(scsi_mode_sense6_resp_t) == 4, "size is not correct");

typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code;
  uint8_t reserved[3];
  uint8_t prohibit_removal;
  uint8_t control;
} scsi_prevent_allow_medium_removal_t;

static_assert( sizeof(scsi_prevent_allow_medium_removal_t) == 6, "size is not correct");

typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code;

  uint8_t immded : 1;
  uint8_t : 7;

  uint8_t reserved9;

  uint8_t power_condition_mod : 4;
  uint8_t : 4;

  uint8_t start : 1;
  uint8_t load_eject : 1;
  uint8_t no_flush : 1;
  uint8_t : 1;
  uint8_t power_condition : 4;

  uint8_t control;
} scsi_start_stop_unit_t;

static_assert( sizeof(scsi_start_stop_unit_t) == 6, "size is not correct");





typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code;
  uint8_t reserved[6];
  uint16_t alloc_length;
  uint8_t control;
} scsi_read_format_capacity_t;

static_assert( sizeof(scsi_read_format_capacity_t) == 10, "size is not correct");

typedef struct __attribute__ ((packed)){
  uint8_t reserved[3];
  uint8_t list_length;

  uint32_t block_num;
  uint8_t descriptor_type;

  uint8_t reserved2;
  uint16_t block_size_u16;

} scsi_read_format_capacity_data_t;

static_assert( sizeof(scsi_read_format_capacity_data_t) == 12, "size is not correct");







typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code ;
  uint8_t reserved1 ;
  uint32_t lba ;
  uint16_t reserved2 ;
  uint8_t partial_medium_indicator ;
  uint8_t control ;
} scsi_read_capacity10_t;

static_assert(sizeof(scsi_read_capacity10_t) == 10, "size is not correct");


typedef struct {
  uint32_t last_lba ;
  uint32_t block_size ;
} scsi_read_capacity10_resp_t;

static_assert(sizeof(scsi_read_capacity10_resp_t) == 8, "size is not correct");


typedef struct __attribute__ ((packed))
{
  uint8_t cmd_code ;
  uint8_t reserved ;
  uint32_t lba ;
  uint8_t reserved2 ;
  uint16_t block_count ;
  uint8_t control ;
} scsi_read10_t, scsi_write10_t;

static_assert(sizeof(scsi_read10_t) == 10, "size is not correct");
static_assert(sizeof(scsi_write10_t) == 10, "size is not correct");


 }
# 32 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h" 2


 extern "C" {
# 51 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h"
static_assert(512 < 
# 51 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h" 3 4
                                         (0xffff)
# 51 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h"
                                                   , "Size is not correct");






bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier);
# 76 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h"
int32_t tud_msc_read10_cb (uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize);
# 92 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h"
int32_t tud_msc_write10_cb (uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize);



void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4]);



bool tud_msc_test_unit_ready_cb(uint8_t lun);



void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size);
# 122 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/msc/msc_device.h"
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize);




__attribute__ ((weak)) uint8_t tud_msc_get_maxlun_cb(void);




__attribute__ ((weak)) bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject);


__attribute__ ((weak)) void tud_msc_read10_complete_cb(uint8_t lun);


__attribute__ ((weak)) void tud_msc_write10_complete_cb(uint8_t lun);


__attribute__ ((weak)) void tud_msc_scsi_complete_cb(uint8_t lun, uint8_t const scsi_cmd[16]);


__attribute__ ((weak)) bool tud_msc_is_writable_cb(uint8_t lun);




void mscd_init (void);
void mscd_reset (uint8_t rhport);
uint16_t mscd_open (uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len);
bool mscd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * p_request);
bool mscd_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);


 }
# 77 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2
# 88 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi_device.h" 1
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi_device.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/audio/audio.h" 1
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/audio/audio.h"
extern "C" {





typedef enum
{
  AUDIO_FUNCTION_SUBCLASS_UNDEFINED = 0x00,
} audio_function_subclass_type_t;


typedef enum
{
  AUDIO_FUNC_PROTOCOL_CODE_UNDEF = 0x00,
  AUDIO_FUNC_PROTOCOL_CODE_V2 = 0x20,
} audio_function_protocol_code_t;


typedef enum
{
  AUDIO_SUBCLASS_UNDEFINED = 0x00,
  AUDIO_SUBCLASS_CONTROL ,
  AUDIO_SUBCLASS_STREAMING ,
  AUDIO_SUBCLASS_MIDI_STREAMING ,
} audio_subclass_type_t;


typedef enum
{
  AUDIO_INT_PROTOCOL_CODE_UNDEF = 0x00,
  AUDIO_INT_PROTOCOL_CODE_V2 = 0x20,
} audio_interface_protocol_code_t;


typedef enum
{
  AUDIO_FUNC_UNDEF = 0x00,
  AUDIO_FUNC_DESKTOP_SPEAKER = 0x01,
  AUDIO_FUNC_HOME_THEATER = 0x02,
  AUDIO_FUNC_MICROPHONE = 0x03,
  AUDIO_FUNC_HEADSET = 0x04,
  AUDIO_FUNC_TELEPHONE = 0x05,
  AUDIO_FUNC_CONVERTER = 0x06,
  AUDIO_FUNC_SOUND_RECODER = 0x07,
  AUDIO_FUNC_IO_BOX = 0x08,
  AUDIO_FUNC_MUSICAL_INSTRUMENT = 0x09,
  AUDIO_FUNC_PRO_AUDIO = 0x0A,
  AUDIO_FUNC_AUDIO_VIDEO = 0x0B,
  AUDIO_FUNC_CONTROL_PANEL = 0x0C,
  AUDIO_FUNC_OTHER = 0xFF,
} audio_function_code_t;


typedef enum
{
  AUDIO_CS_AC_INTERFACE_AC_DESCRIPTOR_UNDEF = 0x00,
  AUDIO_CS_AC_INTERFACE_HEADER = 0x01,
  AUDIO_CS_AC_INTERFACE_INPUT_TERMINAL = 0x02,
  AUDIO_CS_AC_INTERFACE_OUTPUT_TERMINAL = 0x03,
  AUDIO_CS_AC_INTERFACE_MIXER_UNIT = 0x04,
  AUDIO_CS_AC_INTERFACE_SELECTOR_UNIT = 0x05,
  AUDIO_CS_AC_INTERFACE_FEATURE_UNIT = 0x06,
  AUDIO_CS_AC_INTERFACE_EFFECT_UNIT = 0x07,
  AUDIO_CS_AC_INTERFACE_PROCESSING_UNIT = 0x08,
  AUDIO_CS_AC_INTERFACE_EXTENSION_UNIT = 0x09,
  AUDIO_CS_AC_INTERFACE_CLOCK_SOURCE = 0x0A,
  AUDIO_CS_AC_INTERFACE_CLOCK_SELECTOR = 0x0B,
  AUDIO_CS_AC_INTERFACE_CLOCK_MULTIPLIER = 0x0C,
  AUDIO_CS_AC_INTERFACE_SAMPLE_RATE_CONVERTER = 0x0D,
} audio_cs_ac_interface_subtype_t;


typedef enum
{
  AUDIO_CS_AS_INTERFACE_AS_DESCRIPTOR_UNDEF = 0x00,
  AUDIO_CS_AS_INTERFACE_AS_GENERAL = 0x01,
  AUDIO_CS_AS_INTERFACE_FORMAT_TYPE = 0x02,
  AUDIO_CS_AS_INTERFACE_ENCODER = 0x03,
  AUDIO_CS_AS_INTERFACE_DECODER = 0x04,
} audio_cs_as_interface_subtype_t;


typedef enum
{
  AUDIO_EFFECT_TYPE_UNDEF = 0x00,
  AUDIO_EFFECT_TYPE_PARAM_EQ_SECTION = 0x01,
  AUDIO_EFFECT_TYPE_REVERBERATION = 0x02,
  AUDIO_EFFECT_TYPE_MOD_DELAY = 0x03,
  AUDIO_EFFECT_TYPE_DYN_RANGE_COMP = 0x04,
} audio_effect_unit_effect_type_t;


typedef enum
{
  AUDIO_PROCESS_TYPE_UNDEF = 0x00,
  AUDIO_PROCESS_TYPE_UP_DOWN_MIX = 0x01,
  AUDIO_PROCESS_TYPE_DOLBY_PROLOGIC = 0x02,
  AUDIO_PROCESS_TYPE_STEREO_EXTENDER = 0x03,
} audio_processing_unit_process_type_t;


typedef enum
{
  AUDIO_CS_EP_SUBTYPE_UNDEF = 0x00,
  AUDIO_CS_EP_SUBTYPE_GENERAL = 0x01,
} audio_cs_ep_subtype_t;


typedef enum
{
  AUDIO_CS_REQ_UNDEF = 0x00,
  AUDIO_CS_REQ_CUR = 0x01,
  AUDIO_CS_REQ_RANGE = 0x02,
  AUDIO_CS_REQ_MEM = 0x03,
} audio_cs_req_t;




typedef enum
{
  AUDIO_CS_CTRL_UNDEF = 0x00,
  AUDIO_CS_CTRL_SAM_FREQ = 0x01,
  AUDIO_CS_CTRL_CLK_VALID = 0x02,
} audio_clock_src_control_selector_t;


typedef enum
{
  AUDIO_CX_CTRL_UNDEF = 0x00,
  AUDIO_CX_CTRL_CONTROL = 0x01,
} audio_clock_sel_control_selector_t;


typedef enum
{
  AUDIO_CM_CTRL_UNDEF = 0x00,
  AUDIO_CM_CTRL_NUMERATOR_CONTROL = 0x01,
  AUDIO_CM_CTRL_DENOMINATOR_CONTROL = 0x02,
} audio_clock_mul_control_selector_t;


typedef enum
{
  AUDIO_TE_CTRL_UNDEF = 0x00,
  AUDIO_TE_CTRL_COPY_PROTECT = 0x01,
  AUDIO_TE_CTRL_CONNECTOR = 0x02,
  AUDIO_TE_CTRL_OVERLOAD = 0x03,
  AUDIO_TE_CTRL_CLUSTER = 0x04,
  AUDIO_TE_CTRL_UNDERFLOW = 0x05,
  AUDIO_TE_CTRL_OVERFLOW = 0x06,
  AUDIO_TE_CTRL_LATENCY = 0x07,
} audio_terminal_control_selector_t;


typedef enum
{
  AUDIO_MU_CTRL_UNDEF = 0x00,
  AUDIO_MU_CTRL_MIXER = 0x01,
  AUDIO_MU_CTRL_CLUSTER = 0x02,
  AUDIO_MU_CTRL_UNDERFLOW = 0x03,
  AUDIO_MU_CTRL_OVERFLOW = 0x04,
  AUDIO_MU_CTRL_LATENCY = 0x05,
} audio_mixer_control_selector_t;


typedef enum
{
  AUDIO_SU_CTRL_UNDEF = 0x00,
  AUDIO_SU_CTRL_SELECTOR = 0x01,
  AUDIO_SU_CTRL_LATENCY = 0x02,
} audio_sel_control_selector_t;


typedef enum
{
  AUDIO_FU_CTRL_UNDEF = 0x00,
  AUDIO_FU_CTRL_MUTE = 0x01,
  AUDIO_FU_CTRL_VOLUME = 0x02,
  AUDIO_FU_CTRL_BASS = 0x03,
  AUDIO_FU_CTRL_MID = 0x04,
  AUDIO_FU_CTRL_TREBLE = 0x05,
  AUDIO_FU_CTRL_GRAPHIC_EQUALIZER = 0x06,
  AUDIO_FU_CTRL_AGC = 0x07,
  AUDIO_FU_CTRL_DELAY = 0x08,
  AUDIO_FU_CTRL_BASS_BOOST = 0x09,
  AUDIO_FU_CTRL_LOUDNESS = 0x0A,
  AUDIO_FU_CTRL_INPUT_GAIN = 0x0B,
  AUDIO_FU_CTRL_GAIN_PAD = 0x0C,
  AUDIO_FU_CTRL_INVERTER = 0x0D,
  AUDIO_FU_CTRL_UNDERFLOW = 0x0E,
  AUDIO_FU_CTRL_OVERVLOW = 0x0F,
  AUDIO_FU_CTRL_LATENCY = 0x10,
} audio_feature_unit_control_selector_t;




typedef enum
{
  AUDIO_PE_CTRL_UNDEF = 0x00,
  AUDIO_PE_CTRL_ENABLE = 0x01,
  AUDIO_PE_CTRL_CENTERFREQ = 0x02,
  AUDIO_PE_CTRL_QFACTOR = 0x03,
  AUDIO_PE_CTRL_GAIN = 0x04,
  AUDIO_PE_CTRL_UNDERFLOW = 0x05,
  AUDIO_PE_CTRL_OVERFLOW = 0x06,
  AUDIO_PE_CTRL_LATENCY = 0x07,
} audio_parametric_equalizer_control_selector_t;


typedef enum
{
  AUDIO_RV_CTRL_UNDEF = 0x00,
  AUDIO_RV_CTRL_ENABLE = 0x01,
  AUDIO_RV_CTRL_TYPE = 0x02,
  AUDIO_RV_CTRL_LEVEL = 0x03,
  AUDIO_RV_CTRL_TIME = 0x04,
  AUDIO_RV_CTRL_FEEDBACK = 0x05,
  AUDIO_RV_CTRL_PREDELAY = 0x06,
  AUDIO_RV_CTRL_DENSITY = 0x07,
  AUDIO_RV_CTRL_HIFREQ_ROLLOFF = 0x08,
  AUDIO_RV_CTRL_UNDERFLOW = 0x09,
  AUDIO_RV_CTRL_OVERFLOW = 0x0A,
  AUDIO_RV_CTRL_LATENCY = 0x0B,
} audio_reverberation_effect_control_selector_t;


typedef enum
{
  AUDIO_MD_CTRL_UNDEF = 0x00,
  AUDIO_MD_CTRL_ENABLE = 0x01,
  AUDIO_MD_CTRL_BALANCE = 0x02,
  AUDIO_MD_CTRL_RATE = 0x03,
  AUDIO_MD_CTRL_DEPTH = 0x04,
  AUDIO_MD_CTRL_TIME = 0x05,
  AUDIO_MD_CTRL_FEEDBACK = 0x06,
  AUDIO_MD_CTRL_UNDERFLOW = 0x07,
  AUDIO_MD_CTRL_OVERFLOW = 0x08,
  AUDIO_MD_CTRL_LATENCY = 0x09,
} audio_modulation_delay_control_selector_t;


typedef enum
{
  AUDIO_DR_CTRL_UNDEF = 0x00,
  AUDIO_DR_CTRL_ENABLE = 0x01,
  AUDIO_DR_CTRL_COMPRESSION_RATE = 0x02,
  AUDIO_DR_CTRL_MAXAMPL = 0x03,
  AUDIO_DR_CTRL_THRESHOLD = 0x04,
  AUDIO_DR_CTRL_ATTACK_TIME = 0x05,
  AUDIO_DR_CTRL_RELEASE_TIME = 0x06,
  AUDIO_DR_CTRL_UNDERFLOW = 0x07,
  AUDIO_DR_CTRL_OVERFLOW = 0x08,
  AUDIO_DR_CTRL_LATENCY = 0x09,
} audio_dynamic_range_compression_control_selector_t;




typedef enum
{
  AUDIO_UD_CTRL_UNDEF = 0x00,
  AUDIO_UD_CTRL_ENABLE = 0x01,
  AUDIO_UD_CTRL_MODE_SELECT = 0x02,
  AUDIO_UD_CTRL_CLUSTER = 0x03,
  AUDIO_UD_CTRL_UNDERFLOW = 0x04,
  AUDIO_UD_CTRL_OVERFLOW = 0x05,
  AUDIO_UD_CTRL_LATENCY = 0x06,
} audio_up_down_mix_control_selector_t;


typedef enum
{
  AUDIO_DP_CTRL_UNDEF = 0x00,
  AUDIO_DP_CTRL_ENABLE = 0x01,
  AUDIO_DP_CTRL_MODE_SELECT = 0x02,
  AUDIO_DP_CTRL_CLUSTER = 0x03,
  AUDIO_DP_CTRL_UNDERFLOW = 0x04,
  AUDIO_DP_CTRL_OVERFLOW = 0x05,
  AUDIO_DP_CTRL_LATENCY = 0x06,
} audio_dolby_prologic_control_selector_t;


typedef enum
{
  AUDIO_ST_EXT_CTRL_UNDEF = 0x00,
  AUDIO_ST_EXT_CTRL_ENABLE = 0x01,
  AUDIO_ST_EXT_CTRL_WIDTH = 0x02,
  AUDIO_ST_EXT_CTRL_UNDERFLOW = 0x03,
  AUDIO_ST_EXT_CTRL_OVERFLOW = 0x04,
  AUDIO_ST_EXT_CTRL_LATENCY = 0x05,
} audio_stereo_extender_control_selector_t;


typedef enum
{
  AUDIO_XU_CTRL_UNDEF = 0x00,
  AUDIO_XU_CTRL_ENABLE = 0x01,
  AUDIO_XU_CTRL_CLUSTER = 0x02,
  AUDIO_XU_CTRL_UNDERFLOW = 0x03,
  AUDIO_XU_CTRL_OVERFLOW = 0x04,
  AUDIO_XU_CTRL_LATENCY = 0x05,
} audio_extension_unit_control_selector_t;


typedef enum
{
  AUDIO_AS_CTRL_UNDEF = 0x00,
  AUDIO_AS_CTRL_ACT_ALT_SETTING = 0x01,
  AUDIO_AS_CTRL_VAL_ALT_SETTINGS = 0x02,
  AUDIO_AS_CTRL_AUDIO_DATA_FORMAT = 0x03,
} audio_audiostreaming_interface_control_selector_t;


typedef enum
{
  AUDIO_EN_CTRL_UNDEF = 0x00,
  AUDIO_EN_CTRL_BIT_RATE = 0x01,
  AUDIO_EN_CTRL_QUALITY = 0x02,
  AUDIO_EN_CTRL_VBR = 0x03,
  AUDIO_EN_CTRL_TYPE = 0x04,
  AUDIO_EN_CTRL_UNDERFLOW = 0x05,
  AUDIO_EN_CTRL_OVERFLOW = 0x06,
  AUDIO_EN_CTRL_ENCODER_ERROR = 0x07,
  AUDIO_EN_CTRL_PARAM1 = 0x08,
  AUDIO_EN_CTRL_PARAM2 = 0x09,
  AUDIO_EN_CTRL_PARAM3 = 0x0A,
  AUDIO_EN_CTRL_PARAM4 = 0x0B,
  AUDIO_EN_CTRL_PARAM5 = 0x0C,
  AUDIO_EN_CTRL_PARAM6 = 0x0D,
  AUDIO_EN_CTRL_PARAM7 = 0x0E,
  AUDIO_EN_CTRL_PARAM8 = 0x0F,
} audio_encoder_control_selector_t;




typedef enum
{
  AUDIO_MPD_CTRL_UNDEF = 0x00,
  AUDIO_MPD_CTRL_DUAL_CHANNEL = 0x01,
  AUDIO_MPD_CTRL_SECOND_STEREO = 0x02,
  AUDIO_MPD_CTRL_MULTILINGUAL = 0x03,
  AUDIO_MPD_CTRL_DYN_RANGE = 0x04,
  AUDIO_MPD_CTRL_SCALING = 0x05,
  AUDIO_MPD_CTRL_HILO_SCALING = 0x06,
  AUDIO_MPD_CTRL_UNDERFLOW = 0x07,
  AUDIO_MPD_CTRL_OVERFLOW = 0x08,
  AUDIO_MPD_CTRL_DECODER_ERROR = 0x09,
} audio_MPEG_decoder_control_selector_t;


typedef enum
{
  AUDIO_AD_CTRL_UNDEF = 0x00,
  AUDIO_AD_CTRL_MODE = 0x01,
  AUDIO_AD_CTRL_DYN_RANGE = 0x02,
  AUDIO_AD_CTRL_SCALING = 0x03,
  AUDIO_AD_CTRL_HILO_SCALING = 0x04,
  AUDIO_AD_CTRL_UNDERFLOW = 0x05,
  AUDIO_AD_CTRL_OVERFLOW = 0x06,
  AUDIO_AD_CTRL_DECODER_ERROR = 0x07,
} audio_AC3_decoder_control_selector_t;


typedef enum
{
  AUDIO_WD_CTRL_UNDEF = 0x00,
  AUDIO_WD_CTRL_UNDERFLOW = 0x01,
  AUDIO_WD_CTRL_OVERFLOW = 0x02,
  AUDIO_WD_CTRL_DECODER_ERROR = 0x03,
} audio_WMA_decoder_control_selector_t;


typedef enum
{
  AUDIO_DD_CTRL_UNDEF = 0x00,
  AUDIO_DD_CTRL_UNDERFLOW = 0x01,
  AUDIO_DD_CTRL_OVERFLOW = 0x02,
  AUDIO_DD_CTRL_DECODER_ERROR = 0x03,
} audio_DTS_decoder_control_selector_t;


typedef enum
{
  AUDIO_EP_CTRL_UNDEF = 0x00,
  AUDIO_EP_CTRL_PITCH = 0x01,
  AUDIO_EP_CTRL_DATA_OVERRUN = 0x02,
  AUDIO_EP_CTRL_DATA_UNDERRUN = 0x03,
} audio_EP_control_selector_t;




typedef enum
{
  AUDIO_TERM_TYPE_USB_UNDEFINED = 0x0100,
  AUDIO_TERM_TYPE_USB_STREAMING = 0x0101,
  AUDIO_TERM_TYPE_USB_VENDOR_SPEC = 0x01FF,
} audio_terminal_type_t;


typedef enum
{
  AUDIO_TERM_TYPE_IN_UNDEFINED = 0x0200,
  AUDIO_TERM_TYPE_IN_GENERIC_MIC = 0x0201,
  AUDIO_TERM_TYPE_IN_DESKTOP_MIC = 0x0202,
  AUDIO_TERM_TYPE_IN_PERSONAL_MIC = 0x0203,
  AUDIO_TERM_TYPE_IN_OMNI_MIC = 0x0204,
  AUDIO_TERM_TYPE_IN_ARRAY_MIC = 0x0205,
  AUDIO_TERM_TYPE_IN_PROC_ARRAY_MIC = 0x0206,
} audio_terminal_input_type_t;


typedef enum
{
  AUDIO_TERM_TYPE_OUT_UNDEFINED = 0x0300,
  AUDIO_TERM_TYPE_OUT_GENERIC_SPEAKER = 0x0301,
  AUDIO_TERM_TYPE_OUT_HEADPHONES = 0x0302,
  AUDIO_TERM_TYPE_OUT_HEAD_MNT_DISP_AUIDO = 0x0303,
  AUDIO_TERM_TYPE_OUT_DESKTOP_SPEAKER = 0x0304,
  AUDIO_TERM_TYPE_OUT_ROOM_SPEAKER = 0x0305,
  AUDIO_TERM_TYPE_OUT_COMMUNICATION_SPEAKER = 0x0306,
  AUDIO_TERM_TYPE_OUT_LOW_FRQ_EFFECTS_SPEAKER = 0x0307,
} audio_terminal_output_type_t;






typedef enum
{
  AUDIO_FORMAT_TYPE_UNDEFINED = 0x00,
  AUDIO_FORMAT_TYPE_I = 0x01,
  AUDIO_FORMAT_TYPE_II = 0x02,
  AUDIO_FORMAT_TYPE_III = 0x03,
  AUDIO_FORMAT_TYPE_IV = 0x04,
  AUDIO_EXT_FORMAT_TYPE_I = 0x81,
  AUDIO_EXT_FORMAT_TYPE_II = 0x82,
  AUDIO_EXT_FORMAT_TYPE_III = 0x83,
} audio_format_type_t;


typedef enum
{
  AUDIO_DATA_FORMAT_TYPE_I_PCM = (uint32_t) (1 << 0),
  AUDIO_DATA_FORMAT_TYPE_I_PCM8 = (uint32_t) (1 << 1),
  AUDIO_DATA_FORMAT_TYPE_I_IEEE_FLOAT = (uint32_t) (1 << 2),
  AUDIO_DATA_FORMAT_TYPE_I_ALAW = (uint32_t) (1 << 3),
  AUDIO_DATA_FORMAT_TYPE_I_MULAW = (uint32_t) (1 << 4),
  AUDIO_DATA_FORMAT_TYPE_I_RAW_DATA = 0x80000000,
} audio_data_format_type_I_t;




typedef enum
{
  AUDIO_CTRL_NONE = 0x00,
  AUDIO_CTRL_R = 0x01,
  AUDIO_CTRL_RW = 0x03,
} audio_control_t;


typedef enum
{
  AUDIO_CS_AS_INTERFACE_CTRL_LATENCY_POS = 0,
} audio_cs_ac_interface_control_pos_t;


typedef enum
{
  AUDIO_CS_AS_INTERFACE_CTRL_ACTIVE_ALT_SET_POS = 0,
  AUDIO_CS_AS_INTERFACE_CTRL_VALID_ALT_SET_POS = 2,
} audio_cs_as_interface_control_pos_t;


typedef enum
{
  AUDIO_CS_AS_ISO_DATA_EP_ATT_MAX_PACKETS_ONLY = 0x80,
  AUDIO_CS_AS_ISO_DATA_EP_ATT_NON_MAX_PACKETS_OK = 0x00,
} audio_cs_as_iso_data_ep_attribute_t;


typedef enum
{
  AUDIO_CS_AS_ISO_DATA_EP_CTRL_PITCH_POS = 0,
  AUDIO_CS_AS_ISO_DATA_EP_CTRL_DATA_OVERRUN_POS = 2,
  AUDIO_CS_AS_ISO_DATA_EP_CTRL_DATA_UNDERRUN_POS = 4,
} audio_cs_as_iso_data_ep_control_pos_t;


typedef enum
{
  AUDIO_CS_AS_ISO_DATA_EP_LOCK_DELAY_UNIT_UNDEFINED = 0x00,
  AUDIO_CS_AS_ISO_DATA_EP_LOCK_DELAY_UNIT_MILLISEC = 0x01,
  AUDIO_CS_AS_ISO_DATA_EP_LOCK_DELAY_UNIT_PCM_SAMPLES = 0x02,
} audio_cs_as_iso_data_ep_lock_delay_unit_t;


typedef enum
{
  AUDIO_CLOCK_SOURCE_ATT_EXT_CLK = 0x00,
  AUDIO_CLOCK_SOURCE_ATT_INT_FIX_CLK = 0x01,
  AUDIO_CLOCK_SOURCE_ATT_INT_VAR_CLK = 0x02,
  AUDIO_CLOCK_SOURCE_ATT_INT_PRO_CLK = 0x03,
  AUDIO_CLOCK_SOURCE_ATT_CLK_SYC_SOF = 0x04,
} audio_clock_source_attribute_t;


typedef enum
{
  AUDIO_CLOCK_SOURCE_CTRL_CLK_FRQ_POS = 0,
  AUDIO_CLOCK_SOURCE_CTRL_CLK_VAL_POS = 2,
} audio_clock_source_control_pos_t;


typedef enum
{
  AUDIO_CLOCK_SELECTOR_CTRL_POS = 0,
} audio_clock_selector_control_pos_t;


typedef enum
{
  AUDIO_CLOCK_MULTIPLIER_CTRL_NUMERATOR_POS = 0,
  AUDIO_CLOCK_MULTIPLIER_CTRL_DENOMINATOR_POS = 2,
} audio_clock_multiplier_control_pos_t;


typedef enum
{
  AUDIO_IN_TERM_CTRL_CPY_PROT_POS = 0,
  AUDIO_IN_TERM_CTRL_CONNECTOR_POS = 2,
  AUDIO_IN_TERM_CTRL_OVERLOAD_POS = 4,
  AUDIO_IN_TERM_CTRL_CLUSTER_POS = 6,
  AUDIO_IN_TERM_CTRL_UNDERFLOW_POS = 8,
  AUDIO_IN_TERM_CTRL_OVERFLOW_POS = 10,
} audio_terminal_input_control_pos_t;


typedef enum
{
  AUDIO_OUT_TERM_CTRL_CPY_PROT_POS = 0,
  AUDIO_OUT_TERM_CTRL_CONNECTOR_POS = 2,
  AUDIO_OUT_TERM_CTRL_OVERLOAD_POS = 4,
  AUDIO_OUT_TERM_CTRL_UNDERFLOW_POS = 6,
  AUDIO_OUT_TERM_CTRL_OVERFLOW_POS = 8,
} audio_terminal_output_control_pos_t;


typedef enum
{
  AUDIO_FEATURE_UNIT_CTRL_MUTE_POS = 0,
  AUDIO_FEATURE_UNIT_CTRL_VOLUME_POS = 2,
  AUDIO_FEATURE_UNIT_CTRL_BASS_POS = 4,
  AUDIO_FEATURE_UNIT_CTRL_MID_POS = 6,
  AUDIO_FEATURE_UNIT_CTRL_TREBLE_POS = 8,
  AUDIO_FEATURE_UNIT_CTRL_GRAPHIC_EQU_POS = 10,
  AUDIO_FEATURE_UNIT_CTRL_AGC_POS = 12,
  AUDIO_FEATURE_UNIT_CTRL_DELAY_POS = 14,
  AUDIO_FEATURE_UNIT_CTRL_BASS_BOOST_POS = 16,
  AUDIO_FEATURE_UNIT_CTRL_LOUDNESS_POS = 18,
  AUDIO_FEATURE_UNIT_CTRL_INPUT_GAIN_POS = 20,
  AUDIO_FEATURE_UNIT_CTRL_INPUT_GAIN_PAD_POS = 22,
  AUDIO_FEATURE_UNIT_CTRL_PHASE_INV_POS = 24,
  AUDIO_FEATURE_UNIT_CTRL_UNDERFLOW_POS = 26,
  AUDIO_FEATURE_UNIT_CTRL_OVERFLOW_POS = 28,
} audio_feature_unit_control_pos_t;


typedef enum
{
  AUDIO_CHANNEL_CONFIG_NON_PREDEFINED = 0x00000000,
  AUDIO_CHANNEL_CONFIG_FRONT_LEFT = 0x00000001,
  AUDIO_CHANNEL_CONFIG_FRONT_RIGHT = 0x00000002,
  AUDIO_CHANNEL_CONFIG_FRONT_CENTER = 0x00000004,
  AUDIO_CHANNEL_CONFIG_LOW_FRQ_EFFECTS = 0x00000008,
  AUDIO_CHANNEL_CONFIG_BACK_LEFT = 0x00000010,
  AUDIO_CHANNEL_CONFIG_BACK_RIGHT = 0x00000020,
  AUDIO_CHANNEL_CONFIG_FRONT_LEFT_OF_CENTER = 0x00000040,
  AUDIO_CHANNEL_CONFIG_FRONT_RIGHT_OF_CENTER = 0x00000080,
  AUDIO_CHANNEL_CONFIG_BACK_CENTER = 0x00000100,
  AUDIO_CHANNEL_CONFIG_SIDE_LEFT = 0x00000200,
  AUDIO_CHANNEL_CONFIG_SIDE_RIGHT = 0x00000400,
  AUDIO_CHANNEL_CONFIG_TOP_CENTER = 0x00000800,
  AUDIO_CHANNEL_CONFIG_TOP_FRONT_LEFT = 0x00001000,
  AUDIO_CHANNEL_CONFIG_TOP_FRONT_CENTER = 0x00002000,
  AUDIO_CHANNEL_CONFIG_TOP_FRONT_RIGHT = 0x00004000,
  AUDIO_CHANNEL_CONFIG_TOP_BACK_LEFT = 0x00008000,
  AUDIO_CHANNEL_CONFIG_TOP_BACK_CENTER = 0x00010000,
  AUDIO_CHANNEL_CONFIG_TOP_BACK_RIGHT = 0x00020000,
  AUDIO_CHANNEL_CONFIG_TOP_FRONT_LEFT_OF_CENTER = 0x00040000,
  AUDIO_CHANNEL_CONFIG_TOP_FRONT_RIGHT_OF_CENTER = 0x00080000,
  AUDIO_CHANNEL_CONFIG_LEFT_LOW_FRQ_EFFECTS = 0x00100000,
  AUDIO_CHANNEL_CONFIG_RIGHT_LOW_FRQ_EFFECTS = 0x00200000,
  AUDIO_CHANNEL_CONFIG_TOP_SIDE_LEFT = 0x00400000,
  AUDIO_CHANNEL_CONFIG_TOP_SIDE_RIGHT = 0x00800000,
  AUDIO_CHANNEL_CONFIG_BOTTOM_CENTER = 0x01000000,
  AUDIO_CHANNEL_CONFIG_BACK_LEFT_OF_CENTER = 0x02000000,
  AUDIO_CHANNEL_CONFIG_BACK_RIGHT_OF_CENTER = 0x04000000,
  AUDIO_CHANNEL_CONFIG_RAW_DATA = 0x80000000,
} audio_channel_config_t;


typedef struct __attribute__ ((packed)) {
  uint8_t bNrChannels;
  audio_channel_config_t bmChannelConfig;
  uint8_t iChannelNames;
} audio_desc_channel_cluster_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint16_t bcdADC ;
  uint8_t bCategory ;
  uint16_t wTotalLength ;
  uint8_t bmControls ;
} audio_desc_cs_ac_interface_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bClockID ;
  uint8_t bmAttributes ;
  uint8_t bmControls ;
  uint8_t bAssocTerminal ;
  uint8_t iClockSource ;
} audio_desc_clock_source_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bClockID ;
  uint8_t bNrInPins ;
  uint8_t baCSourceID ;
  uint8_t bmControls ;
  uint8_t iClockSource ;
} audio_desc_clock_selector_t;
# 707 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/audio/audio.h"
typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bClockID ;
  uint8_t bCSourceID ;
  uint8_t bmControls ;
  uint8_t iClockSource ;
} audio_desc_clock_multiplier_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint16_t wTerminalType ;
  uint8_t bAssocTerminal ;
  uint8_t bCSourceID ;
  uint8_t bNrChannels ;
  uint32_t bmChannelConfig ;
  uint16_t bmControls ;
  uint8_t iTerminal ;
} audio_desc_input_terminal_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bTerminalID ;
  uint16_t wTerminalType ;
  uint8_t bAssocTerminal ;
  uint8_t bSourceID ;
  uint8_t bCSourceID ;
  uint16_t bmControls ;
  uint8_t iTerminal ;
} audio_desc_output_terminal_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bUnitID ;
  uint8_t bSourceID ;
  struct __attribute__ ((packed)) {
    uint32_t bmaControls ;
  } controls[2] ;
  uint8_t iTerminal ;
} audio_desc_feature_unit_t;
# 777 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/audio/audio.h"
typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bTerminalLink ;
  uint8_t bmControls ;
  uint8_t bFormatType ;
  uint32_t bmFormats ;
  uint8_t bNrChannels ;
  uint32_t bmChannelConfig ;
  uint8_t iChannelNames ;
} audio_desc_cs_as_interface_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bFormatType ;
  uint8_t bSubslotSize ;
  uint8_t bBitResolution ;
} audio_desc_type_I_format_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bmAttributes ;
  uint8_t bmControls ;
  uint8_t bLockDelayUnits ;
  uint16_t wLockDelay ;
} audio_desc_cs_as_iso_data_ep_t;


typedef struct __attribute__ ((packed))
{
    union
    {
        struct __attribute__ ((packed))
        {
            uint8_t recipient : 5;
            uint8_t type : 2;
            uint8_t direction : 1;
        } bmRequestType_bit;

        uint8_t bmRequestType;
    };

    uint8_t bRequest;
    uint8_t bChannelNumber;
    uint8_t bControlSelector;
    union
    {
        uint8_t bInterface;
        uint8_t bEndpoint;
    };
    uint8_t bEntityID;
    uint16_t wLength;
} audio_control_request_t;




typedef struct __attribute__ ((packed))
{
  int8_t bCur ;
} audio_control_cur_1_t;


typedef struct __attribute__ ((packed))
{
  int16_t bCur ;
} audio_control_cur_2_t;


typedef struct __attribute__ ((packed))
{
  int32_t bCur ;
} audio_control_cur_4_t;



typedef struct __attribute__ ((packed)) {
  uint16_t wNumSubRanges;
  struct __attribute__ ((packed)) {
    int8_t bMin ;
    int8_t bMax ;
    uint8_t bRes ;
  } subrange[] ;
} audio_control_range_1_t;


typedef struct __attribute__ ((packed)) {
  uint16_t wNumSubRanges;
  struct __attribute__ ((packed)) {
    int16_t bMin ;
    int16_t bMax ;
    uint16_t bRes ;
  } subrange[] ;
} audio_control_range_2_t;


typedef struct __attribute__ ((packed)) {
  uint16_t wNumSubRanges;
  struct __attribute__ ((packed)) {
    int32_t bMin ;
    int32_t bMax ;
    uint32_t bRes ;
  } subrange[] ;
} audio_control_range_4_t;
# 928 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/audio/audio.h"
}
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi_device.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi.h" 1
# 38 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi.h"
 extern "C" {






typedef enum
{
  MIDI_CS_INTERFACE_HEADER = 0x01,
  MIDI_CS_INTERFACE_IN_JACK = 0x02,
  MIDI_CS_INTERFACE_OUT_JACK = 0x03,
  MIDI_CS_INTERFACE_ELEMENT = 0x04,
} midi_cs_interface_subtype_t;

typedef enum
{
  MIDI_CS_ENDPOINT_GENERAL = 0x01
} midi_cs_endpoint_subtype_t;

typedef enum
{
  MIDI_JACK_EMBEDDED = 0x01,
  MIDI_JACK_EXTERNAL = 0x02
} midi_jack_type_t;

typedef enum
{
  MIDI_CIN_MISC = 0,
  MIDI_CIN_CABLE_EVENT = 1,
  MIDI_CIN_SYSCOM_2BYTE = 2,
  MIDI_CIN_SYSCOM_3BYTE = 3,
  MIDI_CIN_SYSEX_START = 4,
  MIDI_CIN_SYSEX_END_1BYTE = 5,
  MIDI_CIN_SYSEX_END_2BYTE = 6,
  MIDI_CIN_SYSEX_END_3BYTE = 7,
  MIDI_CIN_NOTE_ON = 8,
  MIDI_CIN_NOTE_OFF = 9,
  MIDI_CIN_POLY_KEYPRESS = 10,
  MIDI_CIN_CONTROL_CHANGE = 11,
  MIDI_CIN_PROGRAM_CHANGE = 12,
  MIDI_CIN_CHANNEL_PRESSURE = 13,
  MIDI_CIN_PITCH_BEND_CHANGE = 14,
  MIDI_CIN_1BYTE_DATA = 15
} midi_code_index_number_t;


enum
{

  MIDI_STATUS_SYSEX_START = 0xF0,
  MIDI_STATUS_SYSEX_END = 0xF7,


  MIDI_STATUS_SYSCOM_TIME_CODE_QUARTER_FRAME = 0xF1,
  MIDI_STATUS_SYSCOM_SONG_POSITION_POINTER = 0xF2,
  MIDI_STATUS_SYSCOM_SONG_SELECT = 0xF3,

  MIDI_STATUS_SYSCOM_TUNE_REQUEST = 0xF6,


  MIDI_STATUS_SYSREAL_TIMING_CLOCK = 0xF8,

  MIDI_STATUS_SYSREAL_START = 0xFA,
  MIDI_STATUS_SYSREAL_CONTINUE = 0xFB,
  MIDI_STATUS_SYSREAL_STOP = 0xFC,

  MIDI_STATUS_SYSREAL_ACTIVE_SENSING = 0xFE,
  MIDI_STATUS_SYSREAL_SYSTEM_RESET = 0xFF,
};


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint16_t bcdMSC ;
  uint16_t wTotalLength ;
} midi_desc_header_t;


typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bJackType ;
  uint8_t bJackID ;
  uint8_t iJack ;
} midi_desc_in_jack_t;



typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bJackType ;
  uint8_t bJackID ;
  uint8_t bNrInputPins;

  uint8_t baSourceID;
  uint8_t baSourcePin;

  uint8_t iJack ;
} midi_desc_out_jack_t ;
# 164 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi.h"
typedef struct __attribute__ ((packed))
{
  uint8_t bLength ;
  uint8_t bDescriptorType ;
  uint8_t bDescriptorSubType ;
  uint8_t bElementID;

  uint8_t bNrInputPins;
  uint8_t baSourceID;
  uint8_t baSourcePin;

  uint8_t bNrOutputPins;
  uint8_t bInTerminalLink;
  uint8_t bOutTerminalLink;
  uint8_t bElCapsSize;

  uint16_t bmElementCaps;
  uint8_t iElement;
} midi_desc_element_t;
# 207 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi.h"
 }
# 32 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi_device.h" 2
# 47 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi_device.h"
 extern "C" {
# 61 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/midi/midi_device.h"
bool tud_midi_n_mounted (uint8_t itf);


uint32_t tud_midi_n_available (uint8_t itf, uint8_t cable_num);


uint32_t tud_midi_n_stream_read (uint8_t itf, uint8_t cable_num, void* buffer, uint32_t bufsize);


uint32_t tud_midi_n_stream_write (uint8_t itf, uint8_t cable_num, uint8_t const* buffer, uint32_t bufsize);


bool tud_midi_n_packet_read (uint8_t itf, uint8_t packet[4]);


bool tud_midi_n_packet_write (uint8_t itf, uint8_t const packet[4]);




static inline bool tud_midi_mounted (void);
static inline uint32_t tud_midi_available (void);

static inline uint32_t tud_midi_stream_read (void* buffer, uint32_t bufsize);
static inline uint32_t tud_midi_stream_write (uint8_t cable_num, uint8_t const* buffer, uint32_t bufsize);

static inline bool tud_midi_packet_read (uint8_t packet[4]);
static inline bool tud_midi_packet_write (uint8_t const packet[4]);




__attribute__ ((deprecated("tud_midi_read() is renamed to tud_midi_stream_read()")))
static inline uint32_t tud_midi_read (void* buffer, uint32_t bufsize)
{
  return tud_midi_stream_read(buffer, bufsize);
}

__attribute__ ((deprecated("tud_midi_write() is renamed to tud_midi_stream_write()")))
static inline uint32_t tud_midi_write(uint8_t cable_num, uint8_t const* buffer, uint32_t bufsize)
{
  return tud_midi_stream_write(cable_num, buffer, bufsize);
}


__attribute__ ((deprecated("tud_midi_send() is renamed to tud_midi_packet_write()")))
static inline bool tud_midi_send(uint8_t packet[4])
{
  return tud_midi_packet_write(packet);
}

__attribute__ ((deprecated("tud_midi_receive() is renamed to tud_midi_packet_read()")))
static inline bool tud_midi_receive(uint8_t packet[4])
{
  return tud_midi_packet_read(packet);
}




__attribute__ ((weak)) void tud_midi_rx_cb(uint8_t itf);





static inline bool tud_midi_mounted (void)
{
  return tud_midi_n_mounted(0);
}

static inline uint32_t tud_midi_available (void)
{
  return tud_midi_n_available(0, 0);
}

static inline uint32_t tud_midi_stream_read (void* buffer, uint32_t bufsize)
{
  return tud_midi_n_stream_read(0, 0, buffer, bufsize);
}

static inline uint32_t tud_midi_stream_write (uint8_t cable_num, uint8_t const* buffer, uint32_t bufsize)
{
  return tud_midi_n_stream_write(0, cable_num, buffer, bufsize);
}

static inline bool tud_midi_packet_read (uint8_t packet[4])
{
  return tud_midi_n_packet_read(0, packet);
}

static inline bool tud_midi_packet_write (uint8_t const packet[4])
{
  return tud_midi_n_packet_write(0, packet);
}




void midid_init (void);
void midid_reset (uint8_t rhport);
uint16_t midid_open (uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len);
bool midid_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request);
bool midid_xfer_cb (uint8_t rhport, uint8_t edpt_addr, xfer_result_t result, uint32_t xferred_bytes);


 }
# 89 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2



# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/vendor/vendor_device.h" 1
# 37 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/class/vendor/vendor_device.h"
 extern "C" {





bool tud_vendor_n_mounted (uint8_t itf);

uint32_t tud_vendor_n_available (uint8_t itf);
uint32_t tud_vendor_n_read (uint8_t itf, void* buffer, uint32_t bufsize);
bool tud_vendor_n_peek (uint8_t itf, uint8_t* ui8);
void tud_vendor_n_read_flush (uint8_t itf);

uint32_t tud_vendor_n_write (uint8_t itf, void const* buffer, uint32_t bufsize);
uint32_t tud_vendor_n_write_available (uint8_t itf);

static inline
uint32_t tud_vendor_n_write_str (uint8_t itf, char const* str);




static inline bool tud_vendor_mounted (void);
static inline uint32_t tud_vendor_available (void);
static inline uint32_t tud_vendor_read (void* buffer, uint32_t bufsize);
static inline bool tud_vendor_peek (uint8_t* ui8);
static inline void tud_vendor_read_flush (void);
static inline uint32_t tud_vendor_write (void const* buffer, uint32_t bufsize);
static inline uint32_t tud_vendor_write_str (char const* str);
static inline uint32_t tud_vendor_write_available (void);






__attribute__ ((weak)) void tud_vendor_rx_cb(uint8_t itf);





static inline uint32_t tud_vendor_n_write_str (uint8_t itf, char const* str)
{
  return tud_vendor_n_write(itf, str, strlen(str));
}

static inline bool tud_vendor_mounted (void)
{
  return tud_vendor_n_mounted(0);
}

static inline uint32_t tud_vendor_available (void)
{
  return tud_vendor_n_available(0);
}

static inline uint32_t tud_vendor_read (void* buffer, uint32_t bufsize)
{
  return tud_vendor_n_read(0, buffer, bufsize);
}

static inline bool tud_vendor_peek (uint8_t* ui8)
{
  return tud_vendor_n_peek(0, ui8);
}

static inline void tud_vendor_read_flush(void)
{
    tud_vendor_n_read_flush(0);
}

static inline uint32_t tud_vendor_write (void const* buffer, uint32_t bufsize)
{
  return tud_vendor_n_write(0, buffer, bufsize);
}

static inline uint32_t tud_vendor_write_str (char const* str)
{
  return tud_vendor_n_write_str(0, str);
}

static inline uint32_t tud_vendor_write_available (void)
{
  return tud_vendor_n_write_available(0);
}




void vendord_init(void);
void vendord_reset(uint8_t rhport);
uint16_t vendord_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len);
bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);


 }
# 93 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h" 2
# 126 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/tusb.h"
bool tusb_init(void);


bool tusb_inited(void);







 }
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Device.h" 2





class Adafruit_USBD_Device {
private:
  enum { STRING_DESCRIPTOR_MAX = 8 };


  tusb_desc_device_t _desc_device __attribute__((aligned(4)));


  uint8_t *_desc_cfg;
  uint8_t _desc_cfg_buffer[256];
  uint16_t _desc_cfg_len;
  uint16_t _desc_cfg_maxlen;

  uint8_t _itf_count;

  uint8_t _epin_count;
  uint8_t _epout_count;


  const char *_desc_str_arr[STRING_DESCRIPTOR_MAX];
  uint8_t _desc_str_count;
  uint16_t _desc_str[32 + 1];

public:
  Adafruit_USBD_Device(void);




  void setID(uint16_t vid, uint16_t pid);


  void setVersion(uint16_t bcd);


  void setDeviceVersion(uint16_t bcd);




  bool addInterface(Adafruit_USBD_Interface &itf);


  void clearConfiguration(void);



  void setConfigurationBuffer(uint8_t *buf, uint32_t buflen);


  void setLanguageDescriptor(uint16_t language_id);
  void setManufacturerDescriptor(const char *s);
  void setProductDescriptor(const char *s);
  uint8_t getSerialDescriptor(uint16_t *serial_utf16);



  bool begin(uint8_t rhport = 0);
  void task(void);


  bool detach(void);
  bool attach(void);


  bool mounted(void);
  bool suspended(void);
  bool ready(void);
  bool remoteWakeup(void);

private:
  uint16_t const *descriptor_string_cb(uint8_t index, uint16_t langid);

  friend uint8_t const *tud_descriptor_device_cb(void);
  friend uint8_t const *tud_descriptor_configuration_cb(uint8_t index);
  friend uint16_t const *tud_descriptor_string_cb(uint8_t index,
                                                  uint16_t langid);
};

extern Adafruit_USBD_Device TinyUSBDevice;
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_CDC.h" 1
# 40 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 2

# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/hid/Adafruit_USBD_HID.h" 1
# 28 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/hid/Adafruit_USBD_HID.h"
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/Adafruit_USBD_Device.h" 1
# 29 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/hid/Adafruit_USBD_HID.h" 2

class Adafruit_USBD_HID : public Adafruit_USBD_Interface {
public:
  typedef uint16_t (*get_report_callback_t)(uint8_t report_id,
                                            hid_report_type_t report_type,
                                            uint8_t *buffer, uint16_t reqlen);
  typedef void (*set_report_callback_t)(uint8_t report_id,
                                        hid_report_type_t report_type,
                                        uint8_t const *buffer,
                                        uint16_t bufsize);

  Adafruit_USBD_HID(void);
  Adafruit_USBD_HID(uint8_t const *desc_report, uint16_t len,
                    uint8_t protocol = HID_ITF_PROTOCOL_NONE,
                    uint8_t interval_ms = 4, bool has_out_endpoint = false);

  void setPollInterval(uint8_t interval_ms);
  void setBootProtocol(uint8_t protocol);

  void enableOutEndpoint(bool enable);
  bool isOutEndpointEnabled(void);

  void setReportDescriptor(uint8_t const *desc_report, uint16_t len);
  void setReportCallback(get_report_callback_t get_report,
                         set_report_callback_t set_report);

  bool begin(void);

  bool ready(void);
  bool sendReport(uint8_t report_id, void const *report, uint8_t len);


  bool sendReport8(uint8_t report_id, uint8_t num);
  bool sendReport16(uint8_t report_id, uint16_t num);
  bool sendReport32(uint8_t report_id, uint32_t num);


  bool keyboardReport(uint8_t report_id, uint8_t modifier, uint8_t keycode[6]);
  bool keyboardPress(uint8_t report_id, char ch);
  bool keyboardRelease(uint8_t report_id);


  bool mouseReport(uint8_t report_id, uint8_t buttons, int8_t x, int8_t y,
                   int8_t vertical, int8_t horizontal);
  bool mouseMove(uint8_t report_id, int8_t x, int8_t y);
  bool mouseScroll(uint8_t report_id, int8_t scroll, int8_t pan);
  bool mouseButtonPress(uint8_t report_id, uint8_t buttons);
  bool mouseButtonRelease(uint8_t report_id);


  virtual uint16_t getInterfaceDescriptor(uint8_t itfnum, uint8_t *buf,
                                          uint16_t bufsize);


  uint16_t makeItfDesc(uint8_t itfnum, uint8_t *buf, uint16_t bufsize,
                       uint8_t ep_in, uint8_t ep_out);

private:
  uint8_t _interval_ms;
  uint8_t _protocol;
  bool _out_endpoint;
  uint8_t _mouse_button;

  uint16_t _desc_report_len;
  uint8_t const *_desc_report;

  get_report_callback_t _get_report_cb;
  set_report_callback_t _set_report_cb;

  friend uint16_t tud_hid_get_report_cb(uint8_t itf, uint8_t report_id,
                                        hid_report_type_t report_type,
                                        uint8_t *buffer, uint16_t reqlen);
  friend void tud_hid_set_report_cb(uint8_t itf, uint8_t report_id,
                                    hid_report_type_t report_type,
                                    uint8_t const *buffer, uint16_t bufsize);
  friend uint8_t const *tud_hid_descriptor_report_cb(uint8_t itf);
};
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/midi/Adafruit_USBD_MIDI.h" 1
# 31 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/midi/Adafruit_USBD_MIDI.h"
class Adafruit_USBD_MIDI : public Stream, public Adafruit_USBD_Interface {
public:
  Adafruit_USBD_MIDI(uint8_t n_cables = 1);

  void setCables(uint8_t n_cables);

  bool begin(void);


  bool begin(uint32_t baud) {
    (void)baud;
    return begin();
  }


  virtual int read(void);
  virtual size_t write(uint8_t b);
  virtual int available(void);
  virtual int peek(void);
  virtual void flush(void);

  using Stream::write;


  bool writePacket(const uint8_t packet[4]);
  bool readPacket(uint8_t packet[4]);


  virtual uint16_t getInterfaceDescriptor(uint8_t itfnum, uint8_t *buf,
                                          uint16_t bufsize);


  uint16_t makeItfDesc(uint8_t itfnum, uint8_t *buf, uint16_t bufsize,
                       uint8_t ep_in, uint8_t ep_out);

private:
  uint8_t _n_cables;
};
# 43 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/msc/Adafruit_USBD_MSC.h" 1
# 30 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/msc/Adafruit_USBD_MSC.h"
class Adafruit_USBD_MSC : public Adafruit_USBD_Interface {
public:
  typedef int32_t (*read_callback_t)(uint32_t lba, void *buffer,
                                     uint32_t bufsize);
  typedef int32_t (*write_callback_t)(uint32_t lba, uint8_t *buffer,
                                      uint32_t bufsize);
  typedef void (*flush_callback_t)(void);
  typedef bool (*ready_callback_t)(void);

  Adafruit_USBD_MSC(void);

  bool begin(void);

  void setMaxLun(uint8_t maxlun);
  uint8_t getMaxLun(void);


  void setID(uint8_t lun, const char *vendor_id, const char *product_id,
             const char *product_rev);
  void setCapacity(uint8_t lun, uint32_t block_count, uint16_t block_size);
  void setUnitReady(uint8_t lun, bool ready);
  void setReadWriteCallback(uint8_t lun, read_callback_t rd_cb,
                            write_callback_t wr_cb, flush_callback_t fl_cb);
  void setReadyCallback(uint8_t lun, ready_callback_t cb);


  void setID(const char *vendor_id, const char *product_id,
             const char *product_rev) {
    setID(0, vendor_id, product_id, product_rev);
  }

  void setCapacity(uint32_t block_count, uint16_t block_size) {
    setCapacity(0, block_count, block_size);
  }

  void setUnitReady(bool ready) { setUnitReady(0, ready); }

  void setReadWriteCallback(read_callback_t rd_cb, write_callback_t wr_cb,
                            flush_callback_t fl_cb) {
    setReadWriteCallback(0, rd_cb, wr_cb, fl_cb);
  }

  void setReadyCallback(ready_callback_t cb) { setReadyCallback(0, cb); }


  virtual uint16_t getInterfaceDescriptor(uint8_t itfnum, uint8_t *buf,
                                          uint16_t bufsize);

private:
  enum { MAX_LUN = 2 };
  struct {
    read_callback_t rd_cb;
    write_callback_t wr_cb;
    flush_callback_t fl_cb;
    ready_callback_t ready_cb;

    const char *_inquiry_vid;
    const char *_inquiry_pid;
    const char *_inquiry_rev;

    uint32_t block_count;
    uint16_t block_size;
    bool unit_ready;

  } _lun_info[MAX_LUN];

  uint8_t _maxlun;


  friend void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8],
                                 uint8_t product_id[16],
                                 uint8_t product_rev[4]);
  friend bool tud_msc_test_unit_ready_cb(uint8_t lun);
  friend void tud_msc_capacity_cb(uint8_t lun, uint32_t *block_count,
                                  uint16_t *block_size);
  friend int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset,
                                   void *buffer, uint32_t bufsize);
  friend int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset,
                                    uint8_t *buffer, uint32_t bufsize);
  friend void tud_msc_write10_complete_cb(uint8_t lun);
};
# 44 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 2
# 1 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/webusb/Adafruit_USBD_WebUSB.h" 1
# 39 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/webusb/Adafruit_USBD_WebUSB.h"
class Adafruit_USBD_WebUSB : public Stream, public Adafruit_USBD_Interface {
public:
  typedef void (*linestate_callback_t)(bool connected);
  Adafruit_USBD_WebUSB(const void *url = 
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/webusb/Adafruit_USBD_WebUSB.h" 3 4
                                        __null
# 42 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/arduino/webusb/Adafruit_USBD_WebUSB.h"
                                            );

  bool begin(void);

  bool setLandingPage(const void *url);
  void setLineStateCallback(linestate_callback_t fp);


  virtual int read(void);
  virtual int available(void);
  virtual int peek(void);
  virtual void flush(void);
  virtual size_t write(uint8_t b);

  virtual size_t write(const uint8_t *buffer, size_t size);
  size_t write(const char *buffer, size_t size) {
    return write((const uint8_t *)buffer, size);
  }

  bool connected(void);
  operator bool();


  virtual uint16_t getInterfaceDescriptor(uint8_t itfnum, uint8_t *buf,
                                          uint16_t bufsize);


  uint16_t makeItfDesc(uint8_t itfnum, uint8_t *buf, uint16_t bufsize,
                       uint8_t ep_in, uint8_t ep_out);

private:
  bool _connected;
  const uint8_t *_url;
  linestate_callback_t _linestate_cb;


  friend bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage,
                                         tusb_control_request_t const *request);
};
# 45 "/home/leroy/.platformio/packages/framework-arduinoadafruitnrf52/libraries/Adafruit_TinyUSB_Arduino/src/Adafruit_TinyUSB.h" 2



void TinyUSB_Device_Init(uint8_t rhport);
# 4 "src/main.cpp" 2


void setup()
{

}


void loop()
{

}
