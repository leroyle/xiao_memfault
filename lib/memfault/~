
Import("env")
import os
import fnmatch


print("ENTER MEMFAULT script")
print("LAL MEMFAULT CPPINCFLAGS BEFORE")
#print(env['_CPPINCFLAGS'])

print("LAL MEMFAULT CPPPATH")
print("LAL MEMFAULT pre-adjust CPPPATH")
for item in env.get("CPPPATH", []):
    print(item)


# print(env.Dump())

if os.path.isdir(env['PIOENV']):
    incdir = env['PIOENV']
else:
    incdir = "."

#env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)

tcopy = env.get("CPPPATH").copy()
env['SAVE_CPPPATH'] = tcopy



#print("LAL MEMFAULT TEST CPPPATH")
NEW_CPPPATH = []
NEW_NRFINCS = []
pattern = "*framework*"

#for item in env.get("CPPPATH", []):
#    
#    if fnmatch.fnmatch(item, pattern):
#        NEW_NRFINCS.append(item)
#    else:
#        NEW_CPPPATH.append(item)
#
#env['CPPPATH'] = NEW_CPPPATH


#print("LAL MEMFAULT TEST CPPDEFINES")
for item in env.get("CPPDEFINES", []):
    if item == "MEMFAULT_SDK_INCS":
        # env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
        #env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
        break

print("LAL MEMFAULT Adjusted CPPPATH")
for item in env.get("CPPPATH", []):
    print(item)


print("LAL MEMFAULT SAVE_CPPPATH")
for item in env.get("SAVE_CPPPATH", []):
    print(item)

#print("LAL MEMFAULT TCOPY")
#for item in env.get("tcopy", []):
#    print(item)

print("LAL MEMFAULT CPPINCFLAGS")
print(env['_CPPINCFLAGS'])

def testme(env, node):
    print("NODE NAME")
    print (node.name)
    env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
    return env.Object(
        node,
        _CPPINCFLAGS=env["_CPPINCFLAGS"]
        #CCFLAGS=env["CCFLAGS"] + ["-fno-builtin-printf"]
    )

def testme_LAL(env, node):
    print("NODE NAME")
    print (node.name)

    for item in env.get("CPPPATH", []):
         #print("In test me")
         #print(item)
         if fnmatch.fnmatch(item, pattern):
             NEW_NRFINCS.append(item)
         else:
             NEW_CPPPATH.append(item)

    env['CPPPATH'] = NEW_CPPPATH
    print("testme CPPPATH")
    for item in env.get("CPPPATH", []):
       print(item)
     
    return env.Object(
        node,
        CCFLAGS=env["CCFLAGS"] + ["-fno-builtin-printf"]
    )

env.AddBuildMiddleware(testme)
