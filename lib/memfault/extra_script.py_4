
Import("env")
import os
import fnmatch


print("ENTER MEMFAULT script")

if os.path.isdir(env['PIOENV']):
    incdir = env['PIOENV']
else:
    incdir = "."

env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE, affect_signature=False)} $)" % (incdir)


NEW_CPPPATH = []
NEW_NRFINCS = []
pattern = "*framework*"

#for item in env.get("CPPPATH", []):
#    
#    if fnmatch.fnmatch(item, pattern):
#        NEW_NRFINCS.append(item)
#    else:
#        NEW_CPPPATH.append(item)
#
#env['CPPPATH'] = NEW_CPPPATH


#print("LAL MEMFAULT TEST CPPDEFINES")
#for item in env.get("CPPDEFINES", []):
 #   if item == "MEMFAULT_SDK_INCS":
#        # env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
#        #env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
#        break

def testme_old(env, node):
    print("NODE NAME")
    print (node.name)

    env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE, affect_signature=False)} $)" % (incdir)
    NEW_CPPPATH = []
    NEW_NRFINCS = []
    pattern = "*framework*"

    for item in env.get("CPPPATH", []):
         #print("In test me")
         #print(item)
         if fnmatch.fnmatch(item, pattern):
             NEW_NRFINCS.append(item)
         else:
             NEW_CPPPATH.append(item)

    env['CPPPATH'] = NEW_NRFINCS

    print("LAL MEMFAULT CPPINCFLAGS")
    print(env['_CPPINCFLAGS'])
    return env.Object(
        node,
        CPPPATH=env["CPPPATH"],
        _CPPINCFLAGS=env["_CPPINCFLAGS"],
        CCFLAGS=env["CCFLAGS"] + ["-fno-builtin-printf"]
    )

def testme(env, node):
    print("NODE NAME")
    print (node.name)

    NEW_CPPPATH = []
    NEW_NRFINCS = []
    pattern = "*framework*"

    for item in env.get("CPPPATH", []):
         print("In test me")
         print(item)
         if fnmatch.fnmatch(item, pattern):
             print("MATCH")
             print(item)
             NEW_NRFINCS.append(item)
         else:
             NEW_CPPPATH.append(item)
             print("NO MATCH")
             print(item)

    env['CPPPATH'] = NEW_CPPPATH
    env['LALINCS'] =  NEW_CPPPATH

    print("testme NEW_CPPPATH")
    for item in env.get('CPPPATH', []):
    #for item in NEW_CPPPATH:
       print(item)
     
    print("testme NEW_CPPPATH END")
    return env.Object(
        node,
        CPPPATH=env['CPPPATH'],
        CCFLAGS=env['CCFLAGS'] + ["-fno-builtin-printf"]
    )

env.AddBuildMiddleware(testme)
