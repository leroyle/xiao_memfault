
import os
Import("env")
import fnmatch

print(env.Dump())
if os.path.isdir(env['PIOENV']):
    incdir = env['PIOENV']
else:
    incdir = "."

#env['LAL_FLAG'] = "MEMFAULT"

#env['LAL_1'] = "$( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
#env['LAL_2'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
#env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)


print("LAL TEST ENV")

print("LAL_env")
for item in env.get("__env__", []):
        print("LAL_")
        print(item)
#env['INCOREFIX'] = ""

print("LAL TEST CPPPATH")
NEW_CPPPATH = []
pattern = "*framework*"

for item in env.get("CPPPATH", []):
    
    if fnmatch.fnmatch(item, pattern):
        lal="F"
    else:
        print("ADD: ")
        print( item)
        NEW_CPPPATH.append(item)

env['CPPPATH'] = NEW_CPPPATH

print("LAL TEST AFTER FILER")
for item in env.get("CPPPATH", []):
    print(item)


print("LAL TEST CPPDEFINES")
for item in env.get("CPPDEFINES", []):
    print(item)
    if item == "LAL_MEMFAULT":
        # env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
        env['_CPPINCFLAGS'] = "-I%s $( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)" % (incdir)
        break



